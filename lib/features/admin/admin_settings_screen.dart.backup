// Dosya: lib/features/admin/admin_settings_screen.dart
// Açıklama: Admin’in puanlama sistemi değerlerini düzenleyebileceği ekran.
// Klasör: lib/features/admin

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:zikirmo_new/core/services/auth_service.dart';
import 'package:zikirmo_new/core/services/firestore_service.dart';

final settingsProvider = FutureProvider<Map<String, dynamic>>((ref) async {
  final firestoreService = FirestoreService();
  final doc = await firestoreService.firestore.collection('settings').doc('points').get();
  return doc.data() ?? {};
});

class AdminSettingsScreen extends ConsumerStatefulWidget {
  const AdminSettingsScreen({super.key});

  @override
  ConsumerState<AdminSettingsScreen> createState() => _AdminSettingsScreenState();
}

class _AdminSettingsScreenState extends ConsumerState<AdminSettingsScreen> {
  final _formKey = GlobalKey<FormState>();
  final Map<String, TextEditingController> _controllers = {
    'clickPoints': TextEditingController(),
    'dailyGoalPoints': TextEditingController(),
    'streak5DaysPoints': TextEditingController(),
    'streak7DaysPoints': TextEditingController(),
    'streak30DaysPoints': TextEditingController(),
    'customZikirPoints': TextEditingController(),
    'profileCompletePoints': TextEditingController(),
    'friendInvitePoints': TextEditingController(),
    'perfectWeekPoints': TextEditingController(),
    'levelUpBonusPoints': TextEditingController(),
  };

  @override
  void dispose() {
    _controllers.forEach((_, controller) => controller.dispose());
    super.dispose();
  }

  Future<void> _saveSettings() async {
    if (_formKey.currentState!.validate()) {
      final firestoreService = FirestoreService();
      final settings = _controllers.map((key, controller) => MapEntry(key, double.parse(controller.text)));
      await firestoreService.setSettings(settings);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('settingsSaved'.tr())),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final settingsAsync = ref.watch(settingsProvider);
    final authService = ref.watch(authServiceProvider);
    final user = authService.currentUser;

    if (user == null || !(user.customClaims?['admin'] ?? false)) {
      return Scaffold(
        body: Center(child: Text('adminAccessRequired'.tr())),
      );
    }

    return Scaffold(
      appBar: AppBar(
        title: Text('adminSettingsTitle'.tr()),
      ),
      body: settingsAsync.when(
        data: (settings) {
          _controllers.forEach((key, controller) {
            controller.text = (settings[key] ?? _getDefaultValue(key)).toString();
          });
          return Padding(
            padding: const EdgeInsets.all(16.0),
            child: Form(
              key: _formKey,
              child: SingleChildScrollView(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text('pointsSettings'.tr(), style: Theme.of(context).textTheme.titleLarge),
                    const SizedBox(height: 20),
                    ..._controllers.entries.map((entry) => Padding(
                          padding: const EdgeInsets.only(bottom: 10),
                          child: TextFormField(
                            controller: entry.value,
                            decoration: InputDecoration(
                              labelText: entry.key.tr(),
                              border: const OutlineInputBorder(),
                            ),
                            keyboardType: TextInputType.number,
                            validator: (value) {
                              if (value == null || value.isEmpty) {
                                return 'valueRequired'.tr();
                              }
                              if (double.tryParse(value) == null) {
                                return 'invalidNumber'.tr();
                              }
                              return null;
                            },
                          ),
                        )),
                    const SizedBox(height: 20),
                    Center(
                      child: ElevatedButton(
                        onPressed: _saveSettings,
                        child: Text('save'.tr()),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          );
        },
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stack) => Center(child: Text('errorLoadingSettings'.tr())),
      ),
    );
  }

  double _getDefaultValue(String key) {
    switch (key) {
      case 'clickPoints':
        return 1;
      case 'dailyGoalPoints':
        return 10;
      case 'streak5DaysPoints':
        return 20;
      case 'streak7DaysPoints':
        return 40;
      case 'streak30DaysPoints':
        return 200;
      case 'customZikirPoints':
        return 5;
      case 'profileCompletePoints':
        return 10;
      case 'friendInvitePoints':
        return 15;
      case 'perfectWeekPoints':
        return 50;
      case 'levelUpBonusPoints':
        return 30;
      default:
        return 0;
    }
  }
}

// Dosya Sonu: lib/features/admin/admin_settings_screen.dart