// lib/features/zikir/categories_screen.dart

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:zikirmo_new/core/models/category_model.dart';
import 'package:zikirmo_new/core/services/firestore_service.dart';

// Kategoriler provider'ı
final categoriesProvider = FutureProvider<List<CategoryModel>>((ref) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return await firestoreService.getCategories();
});

class CategoriesScreen extends ConsumerWidget {
  const CategoriesScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final categoriesAsync = ref.watch(categoriesProvider);
    
    return Scaffold(
      appBar: AppBar(
        title: Text('categories'.tr()),
      ),
      body: categoriesAsync.when(
        data: (categories) {
          if (categories.isEmpty) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(
                    Icons.category_outlined,
                    size: 64,
                    color: Colors.grey[400],
                  ),
                  const SizedBox(height: 16),
                  Text(
                    'noCategories'.tr(),
                    style: const TextStyle(fontSize: 16, color: Colors.grey),
                  ),
                ],
              ),
            );
          }
          
          return GridView.builder(
            padding: const EdgeInsets.all(16),
            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: 2,
              crossAxisSpacing: 16,
              mainAxisSpacing: 16,
              childAspectRatio: 1.0,
            ),
            itemCount: categories.length,
            itemBuilder: (context, index) {
              final category = categories[index];
              return _buildCategoryCard(context, category);
            },
          );
        },
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stack) => Center(
          child: Text('errorLoadingCategories'.tr()),
        ),
      ),
    );
  }
  
  Widget _buildCategoryCard(BuildContext context, CategoryModel category) {
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: InkWell(
        onTap: () {
          // Kategori detay sayfasına git
          Navigator.pushNamed(
            context,
            '/category_detail',
            arguments: category.id,
          );
        },
        borderRadius: BorderRadius.circular(16),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Kategori ikonu
              Icon(
                _getCategoryIcon(category.iconName),
                size: 48,
                color: Theme.of(context).primaryColor,
              ),
              const SizedBox(height: 16),
              
              // Kategori adı
              Text(
                category.getLocalizedName(context.locale.languageCode),
                style: Theme.of(context).textTheme.titleMedium,
                textAlign: TextAlign.center,
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
              ),
            ],
          ),
        ),
      ),
    );
  }
  
  IconData _getCategoryIcon(String iconName) {
    switch (iconName) {
      case 'star':
        return Icons.star;
      case 'favorite':
        return Icons.favorite;
      case 'prayer':
        return Icons.emoji_emotions;
      case 'daily':
        return Icons.access_time;
      case 'special':
        return Icons.celebration;
      case 'weekly':
        return Icons.calendar_today;
      case 'personal':
        return Icons.person;
      default:
        return Icons.category;
    }
  }
}