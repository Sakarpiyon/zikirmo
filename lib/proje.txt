====================  
Dosya: C:\src\zikirmo_new\lib\app.dart  
====================  
  
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'core/config/theme_config.dart';
import 'routes.dart';

class ZikirMatikApp extends ConsumerWidget {
  const ZikirMatikApp({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return MaterialApp(
      localizationsDelegates: context.localizationDelegates,
      supportedLocales: context.supportedLocales,
      locale: context.locale,
      title: 'Zikir Matik',
      theme: ThemeConfig.lightTheme,
      darkTheme: ThemeConfig.darkTheme,
      themeMode: ThemeMode.system, // Sistem temasına göre otomatik geçiş
      initialRoute: '/splash',
      onGenerateRoute: RouteGenerator.generateRoute,
      debugShowCheckedModeBanner: false,
    );
  }
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\firebase_options.dart  
====================  
  
// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyBNc1yEX0mXMB0L8ZJTgb0_RJTg6FF-pB4',
    appId: '1:510473874379:web:ace2eec82312a4cf3c644e',
    messagingSenderId: '510473874379',
    projectId: 'zikirmatik-be5c0',
    authDomain: 'zikirmatik-be5c0.firebaseapp.com',
    storageBucket: 'zikirmatik-be5c0.firebasestorage.app',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyC7lKo8mBQSNW_9Tfj5MuFKRRht0Wo8dqc',
    appId: '1:510473874379:ios:f649491ce49dc0c13c644e',
    messagingSenderId: '510473874379',
    projectId: 'zikirmatik-be5c0',
    storageBucket: 'zikirmatik-be5c0.firebasestorage.app',
    iosBundleId: 'com.zikirmo.zikirmoNew',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'AIzaSyC7lKo8mBQSNW_9Tfj5MuFKRRht0Wo8dqc',
    appId: '1:510473874379:ios:f649491ce49dc0c13c644e',
    messagingSenderId: '510473874379',
    projectId: 'zikirmatik-be5c0',
    storageBucket: 'zikirmatik-be5c0.firebasestorage.app',
    iosBundleId: 'com.zikirmo.zikirmoNew',
  );

  static const FirebaseOptions windows = FirebaseOptions(
    apiKey: 'AIzaSyBNc1yEX0mXMB0L8ZJTgb0_RJTg6FF-pB4',
    appId: '1:510473874379:web:ace2eec82312a4cf3c644e',
    messagingSenderId: '510473874379',
    projectId: 'zikirmatik-be5c0',
    authDomain: 'zikirmatik-be5c0.firebaseapp.com',
    storageBucket: 'zikirmatik-be5c0.firebasestorage.app',
    measurementId: 'G-MDP7VPX7D5',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyAFy9XnebVQFc8Itt_jnCwaZYm67k8zpR8',
    appId: '1:510473874379:android:b73bda7d7e84d6943c644e',
    messagingSenderId: '510473874379',
    projectId: 'zikirmatik-be5c0',
    storageBucket: 'zikirmatik-be5c0.firebasestorage.app',
  );
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\main.dart  
====================  
  
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart';
import 'app.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  // Firebase başlatma
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  
  // EasyLocalization başlatma
  await EasyLocalization.ensureInitialized();
  
  runApp(
    EasyLocalization(
      supportedLocales: const [Locale('en'), Locale('tr')],
      path: 'assets/lang',
      fallbackLocale: const Locale('tr'),
      child: const ProviderScope(
        child: ZikirMatikApp(),
      ),
    ),
  );
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\routes.dart  
====================  
  
// Dosya: lib/routes.dart
// Yol: C:\src\zikirmo_new\lib\routes.dart
// Açıklama: Navigation tutarsızlıkları düzeltildi, tüm route'lar standardize edildi

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart'; // .tr() için gerekli
import 'features/splash/splash_screen.dart';
import 'features/onboarding/onboarding_screen.dart';
import 'features/auth/login_screen.dart';
import 'features/auth/register_screen.dart';
import 'features/auth/forgot_password_screen.dart';
import 'features/home/home_screen.dart';
import 'features/profile/profile_screen.dart';
import 'features/profile/edit_profile_screen.dart';
import 'features/profile/social_links_screen.dart';
import 'features/settings/settings_screen.dart';
import 'features/zikir/zikir_counter_screen.dart';
import 'features/zikir/zikir_detail_screen.dart';
import 'features/categories/category_screen.dart';
import 'features/categories/category_detail_screen.dart';
import 'features/friends/friends_screen.dart';
import 'features/friends/add_friend_screen.dart';
import 'features/friends/friend_profile_screen.dart';
import 'features/leaderboard/leaderboard_screen.dart';
import 'features/membership/membership_info_screen.dart';
import 'features/rewards/reward_store_screen.dart';
import 'features/challenges/challenge_screen.dart';
import 'features/friends/user_search_screen.dart';
import 'features/messages/send_message_screen.dart';
import 'features/gifts/send_gift_screen.dart';
import 'features/zikir/categories_screen.dart';
import 'features/zikir/suggested_zikirs_screen.dart';
import 'features/admin/admin_settings_screen.dart';
import 'features/premium/premium_screen.dart';
import 'features/notifications/notifications_screen.dart';
import 'features/zikir/custom_zikir_screen.dart';
import 'features/history/zikir_history_screen.dart';
import 'features/messages/messages_list_screen.dart';

class AppRoutes {
  // Ana route'lar
  static const String splash = '/splash';
  static const String onboarding = '/onboarding';
  static const String login = '/login';
  static const String register = '/register';
  static const String forgotPassword = '/forgot_password';
  static const String home = '/home';
  
  // Profil route'ları
  static const String profile = '/profile';
  static const String editProfile = '/edit_profile';
  static const String socialLinks = '/social_links';
  
  // Ayar route'ları
  static const String settings = '/settings';
  
  // Zikir route'ları
  static const String zikirCounter = '/zikir_counter';
  static const String zikirDetail = '/zikir_detail';
  static const String customZikir = '/custom_zikir';
  static const String zikirHistory = '/zikir_history';
  
  // Kategori route'ları
  static const String categories = '/categories';
  static const String categoryDetail = '/category_detail';
  static const String zikirCategories = '/zikir_categories';
  static const String suggestedZikirs = '/suggested_zikirs';
  
  // Arkadaş route'ları
  static const String friends = '/friends';
  static const String addFriend = '/add_friend';
  static const String friendProfile = '/friend_profile';
  static const String userSearch = '/user_search';
  
  // Sosyal route'lar
  static const String leaderboard = '/leaderboard';
  static const String challenges = '/challenges';
  
  // Mesajlaşma route'ları
  static const String messages = '/messages';
  static const String messagesList = '/messages_list';
  static const String sendMessage = '/send_message';
  
  // Hediye route'ları
  static const String sendGift = '/send_gift';
  static const String rewardStore = '/reward_store';
  
  // Premium route'ları
  static const String premium = '/premium';
  static const String membershipInfo = '/membership_info';
  
  // Bildirim route'ları
  static const String notifications = '/notifications';
  
  // Admin route'ları
  static const String adminSettings = '/admin_settings';
  
  // Gelecek özellikler (placeholder)
  static const String statistics = '/statistics';
  static const String privacyPolicy = '/privacy_policy';
  static const String termsOfService = '/terms_of_service';
  static const String purchaseHistory = '/purchase_history';
  static const String subscriptionManagement = '/subscription_management';

  AppRoutes._();
}

class RouteGenerator {
  static Route<dynamic> generateRoute(RouteSettings settings) {
    final args = settings.arguments;
    
    switch (settings.name) {
      // Ana route'lar
      case AppRoutes.splash:
        return _createRoute(const SplashScreen());
        
      case AppRoutes.onboarding:
        return _createRoute(const OnboardingScreen());
        
      case AppRoutes.login:
        return _createRoute(const LoginScreen());
        
      case AppRoutes.register:
        return _createRoute(const RegisterScreen());

      case AppRoutes.forgotPassword:
        return _createRoute(const ForgotPasswordScreen());
        
      case AppRoutes.home:
        return _createRoute(const HomeScreen());
      
      // Profil route'ları
      case AppRoutes.profile:
        return _createRoute(const ProfileScreen());
        
      case AppRoutes.editProfile:
        return _createRoute(const EditProfileScreen());
        
      case AppRoutes.socialLinks:
        return _createRoute(const SocialLinksScreen());
        
      // Ayar route'ları
      case AppRoutes.settings:
        return _createRoute(const SettingsScreen());
        
      // Zikir route'ları
      case AppRoutes.zikirCounter:
        if (args is String) {
          return _createRoute(ZikirCounterScreen(zikirId: args));
        }
        return _createRoute(const ZikirCounterScreen());
        
      case AppRoutes.zikirDetail:
        if (args is String) {
          return _createRoute(ZikirDetailScreen(zikirId: args));
        }
        return _errorRoute('zikirNotFound');
        
      case AppRoutes.customZikir:
        return _createRoute(const CustomZikirScreen());
        
      case AppRoutes.zikirHistory:
        return _createRoute(const ZikirHistoryScreen());
        
      // Kategori route'ları
      case AppRoutes.categories:
        return _createRoute(const CategoryScreen());
        
      case AppRoutes.categoryDetail:
        if (args is String) {
          return _createRoute(CategoryDetailScreen(categoryId: args));
        }
        return _errorRoute('categoryNotFound');
        
      case AppRoutes.zikirCategories:
        return _createRoute(const CategoriesScreen());
        
      case AppRoutes.suggestedZikirs:
        return _createRoute(const SuggestedZikirsScreen());
        
      // Arkadaş route'ları
      case AppRoutes.friends:
        return _createRoute(const FriendsScreen());
        
      case AppRoutes.addFriend:
        return _createRoute(const AddFriendScreen());
        
      case AppRoutes.friendProfile:
        if (args is String) {
          return _createRoute(FriendProfileScreen(userId: args));
        }
        return _errorRoute('userNotFound');
        
      case AppRoutes.userSearch:
        return _createRoute(const UserSearchScreen());
        
      // Sosyal route'lar
      case AppRoutes.leaderboard:
        return _createRoute(const LeaderboardScreen());
        
      case AppRoutes.challenges:
        return _createRoute(const ChallengeScreen());
        
      // Mesajlaşma route'ları
      case AppRoutes.messagesList:
        return _createRoute(const MessagesListScreen());
        
      case AppRoutes.sendMessage:
        if (args is String) {
          return _createRoute(SendMessageScreen(receiverId: args));
        }
        return _errorRoute('invalidReceiver');
      
      // Hediye route'ları
      case AppRoutes.sendGift:
        if (args is String) {
          return _createRoute(SendGiftScreen(receiverId: args));
        }
        return _errorRoute('invalidReceiver');
        
      case AppRoutes.rewardStore:
        return _createRoute(const RewardStoreScreen());
        
      // Premium route'ları
      case AppRoutes.premium:
        return _createRoute(const PremiumScreen());
        
      case AppRoutes.membershipInfo:
        return _createRoute(const MembershipInfoScreen());
        
      // Bildirim route'ları
      case AppRoutes.notifications:
        return _createRoute(const NotificationsScreen());
        
      // Admin route'ları
      case AppRoutes.adminSettings:
        return _createRoute(const AdminSettingsScreen());
        
      // Placeholder route'lar
      case AppRoutes.statistics:
        return _placeholderRoute('detailedStatistics', 'statisticsComingSoon');
        
      case AppRoutes.privacyPolicy:
        return _placeholderRoute('privacyPolicy', 'pageInPreparation');
        
      case AppRoutes.termsOfService:
        return _placeholderRoute('termsOfService', 'pageInPreparation');
        
      case AppRoutes.purchaseHistory:
        return _placeholderRoute('purchaseHistory', 'featureComingSoon');
        
      case AppRoutes.subscriptionManagement:
        return _placeholderRoute('subscriptionManagement', 'featureComingSoon');
        
      // Varsayılan (404)
      default:
        return _errorRoute('pageNotFound');
    }
  }
  
  // Standart route oluşturma
  static Route<dynamic> _createRoute(Widget page) {
    return MaterialPageRoute(builder: (_) => page);
  }
  
  // Hata route'u
  static Route<dynamic> _errorRoute(String errorKey) {
    return MaterialPageRoute(
      builder: (context) => Scaffold(
        appBar: AppBar(title: Text('error'.tr())),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(Icons.error_outline, size: 64, color: Colors.red[400]),
              const SizedBox(height: 16),
              Text(
                errorKey.tr(),
                style: const TextStyle(fontSize: 18),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 16),
              ElevatedButton(
                onPressed: () => Navigator.pop(context),
                child: Text('goBack'.tr()),
              ),
            ],
          ),
        ),
      ),
    );
  }
  
  // Placeholder route'u
  static Route<dynamic> _placeholderRoute(String titleKey, String messageKey) {
    return MaterialPageRoute(
      builder: (context) => Scaffold(
        appBar: AppBar(title: Text(titleKey.tr())),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(Icons.construction, size: 64, color: Colors.orange[400]),
              const SizedBox(height: 16),
              Text(
                titleKey.tr(),
                style: const TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 8),
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 32),
                child: Text(
                  messageKey.tr(),
                  style: const TextStyle(fontSize: 16, color: Colors.grey),
                  textAlign: TextAlign.center,
                ),
              ),
              const SizedBox(height: 24),
              ElevatedButton(
                onPressed: () => Navigator.pop(context),
                child: Text('goBack'.tr()),
              ),
            ],
          ),
        ),
      ),
    );
  }
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\core\config\firebase_options.dart  
====================  
  
// Dosya: lib/core/config/firebase_options.dart
// Açıklama: Firebase hizmetleri için platforma özgü yapılandırma dosyası.

import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart' show defaultTargetPlatform, TargetPlatform;

class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'FIREBASE_ANDROID_API_KEY',
    appId: 'FIREBASE_ANDROID_APP_ID',
    messagingSenderId: 'FIREBASE_MESSAGING_SENDER_ID',
    projectId: 'FIREBASE_PROJECT_ID',
    storageBucket: 'FIREBASE_STORAGE_BUCKET',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'FIREBASE_IOS_API_KEY',
    appId: 'FIREBASE_IOS_APP_ID',
    messagingSenderId: 'FIREBASE_MESSAGING_SENDER_ID',
    projectId: 'FIREBASE_PROJECT_ID',
    storageBucket: 'FIREBASE_STORAGE_BUCKET',
    iosBundleId: 'FIREBASE_IOS_BUNDLE_ID',
  );
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\core\config\theme_config.dart  
====================  
  
// lib/core/config/theme_config.dart
// Tema yapılandırması

import 'package:flutter/material.dart';

class ThemeConfig {
  // Ana renkler
  static const Color primaryColor = Color(0xFF00897B); // Teal 600
  static const Color accentColor = Color(0xFF26A69A); // Teal 400
  static const Color errorColor = Colors.red; // Hata rengi
  
  // Aydınlık tema
  static final ThemeData lightTheme = ThemeData(
    useMaterial3: true,
    colorScheme: ColorScheme.fromSeed(
      seedColor: primaryColor,
      brightness: Brightness.light,
    ),
    scaffoldBackgroundColor: Colors.white,
    appBarTheme: const AppBarTheme(
      backgroundColor: primaryColor,
      foregroundColor: Colors.white,
      elevation: 0,
    ),
    textTheme: const TextTheme(
      displayLarge: TextStyle(fontSize: 32, fontWeight: FontWeight.bold),
      bodyLarge: TextStyle(fontSize: 16, color: Colors.black87),
      bodyMedium: TextStyle(fontSize: 14, color: Colors.black54),
    ),
    elevatedButtonTheme: ElevatedButtonThemeData(
      style: ElevatedButton.styleFrom(
        backgroundColor: primaryColor,
        foregroundColor: Colors.white,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
      ),
    ),
  );

  // Karanlık tema
  static final ThemeData darkTheme = ThemeData(
    useMaterial3: true,
    colorScheme: ColorScheme.fromSeed(
      seedColor: primaryColor,
      brightness: Brightness.dark,
    ),
    scaffoldBackgroundColor: Colors.grey[900],
    appBarTheme: AppBarTheme(
      backgroundColor: Colors.grey[850],
      foregroundColor: Colors.white,
      elevation: 0,
    ),
    textTheme: const TextTheme(
      displayLarge: TextStyle(fontSize: 32, fontWeight: FontWeight.bold),
      bodyLarge: TextStyle(fontSize: 16, color: Colors.white70),
      bodyMedium: TextStyle(fontSize: 14, color: Colors.white60),
    ),
    elevatedButtonTheme: ElevatedButtonThemeData(
      style: ElevatedButton.styleFrom(
        backgroundColor: primaryColor,
        foregroundColor: Colors.white,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
      ),
    ),
  );
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\core\constants\app_constants.dart  
====================  
  
import 'package:flutter/material.dart';

class AppConstants {
  AppConstants._();

  // Uygulama bilgileri
  static const String appName = 'Zikir Matik';
  static const String appVersion = '1.0.0';
  static const String appDescription = 'Zikir takip ve sosyal özellikler uygulaması';

  // API ve Servis sabitleri
  static const String firebaseProjectId = 'zikirmatik-be5c0';
  static const String firestoreRegion = 'europe-west1';
  
  // Koleksiyon isimleri
  static const String usersCollection = 'users';
  static const String zikirsCollection = 'zikirler';
  static const String categoriesCollection = 'categories';
  static const String userZikirsCollection = 'user_zikirs';
  static const String friendRequestsCollection = 'friend_requests';
  static const String messagesCollection = 'messages';
  static const String giftsCollection = 'gifts';
  static const String notificationsCollection = 'notifications';
  static const String challengesCollection = 'challenges';
  static const String badgeDefinitionsCollection = 'badge_definitions';
  static const String pointsCollection = 'points';
  static const String dailyGoalsCollection = 'daily_goals';
  static const String settingsCollection = 'settings';

  // Zikir sayacı sabitleri
  static const double minCounterSize = 80.0;
  static const double maxCounterSize = 150.0;
  static const double defaultCounterSize = 100.0;
  static const int defaultZikirTarget = 33;
  static const int maxZikirTarget = 9999;
  static const Duration counterAnimationDuration = Duration(milliseconds: 150);

  // Puanlama sistemi sabitleri
  static const int pointsPerZikir = 1;
  static const int pointsPerDailyGoal = 15;
  static const int pointsPerStreak7Days = 25;
  static const int pointsPerStreak30Days = 100;
  static const int pointsPerBadge = 20;
  static const int pointsPerCustomZikir = 5;
  static const int pointsPerFriendInvite = 15;
  static const int pointsPerPerfectWeek = 50;
  static const int pointsPerLevelUp = 30;

  // Seviye sistemi sabitleri
  static const Map<String, int> levelThresholds = {
    'levelBeginner': 0,
    'levelApprentice': 100,
    'levelMaster': 500,
    'levelSage': 1000,
    'levelGrateful': 2500,
    'levelSaint': 5000,
    'levelKnower': 10000,
  };

  // Freemium limitler
  static const int freemiumFriendLimit = 20;
  static const int freemiumCustomZikirLimit = 5;
  static const int freemiumDailyReminderLimit = 1;
  static const int premiumUnlimitedValue = -1;

  // Zaman sabitleri
  static const Duration sessionTimeout = Duration(minutes: 30);
  static const Duration cacheExpiry = Duration(hours: 1);
  static const Duration apiTimeout = Duration(seconds: 30);
  static const Duration notificationDelay = Duration(seconds: 2);
  static const Duration splashScreenDuration = Duration(seconds: 3);

  // Sayfa sabitleri
  static const int defaultPageSize = 20;
  static const int maxPageSize = 100;
  static const int leaderboardLimit = 50;
  static const int friendsListLimit = 100;

  // Mesajlaşma sabitleri
  static const int maxMessageLength = 500;
  static const int maxChatHistory = 100;
  static const Duration messageEditTimeLimit = Duration(minutes: 5);

  // Medya sabitleri
  static const int maxImageSize = 5 * 1024 * 1024; // 5MB
  static const int maxAudioDuration = 60; // 60 saniye
  static const List<String> supportedImageFormats = ['jpg', 'jpeg', 'png', 'webp'];
  static const List<String> supportedAudioFormats = ['mp3', 'wav', 'aac', 'm4a'];

  // Validasyon sabitleri
  static const int minNicknameLength = 3;
  static const int maxNicknameLength = 30;
  static const int minPasswordLength = 6;
  static const int maxPasswordLength = 128;
  static const int maxAboutMeLength = 500;
  static const int maxZikirTitleLength = 100;
  static const int maxZikirDescriptionLength = 1000;

  // Animasyon sabitleri
  static const Duration shortAnimationDuration = Duration(milliseconds: 200);
  static const Duration mediumAnimationDuration = Duration(milliseconds: 300);
  static const Duration longAnimationDuration = Duration(milliseconds: 500);
  static const Curve defaultAnimationCurve = Curves.easeInOut;

  // Tema sabitleri
  static const Color primaryColor = Color(0xFF00897B);
  static const Color accentColor = Color(0xFF26A69A);
  static const Color errorColor = Colors.red;
  static const Color successColor = Colors.green;
  static const Color warningColor = Colors.orange;
  static const Color infoColor = Colors.blue;

  // Spacing sabitleri
  static const double smallSpacing = 8.0;
  static const double mediumSpacing = 16.0;
  static const double largeSpacing = 24.0;
  static const double extraLargeSpacing = 32.0;

  // Border radius sabitleri
  static const double smallBorderRadius = 8.0;
  static const double mediumBorderRadius = 12.0;
  static const double largeBorderRadius = 16.0;
  static const double circleBorderRadius = 50.0;

  // Elevation sabitleri
  static const double lowElevation = 2.0;
  static const double mediumElevation = 4.0;
  static const double highElevation = 8.0;

  // Font size sabitleri
  static const double smallFontSize = 12.0;
  static const double mediumFontSize = 14.0;
  static const double largeFontSize = 16.0;
  static const double extraLargeFontSize = 18.0;
  static const double titleFontSize = 20.0;
  static const double headlineFontSize = 24.0;

  // Icon size sabitleri
  static const double smallIconSize = 16.0;
  static const double mediumIconSize = 24.0;
  static const double largeIconSize = 32.0;
  static const double extraLargeIconSize = 48.0;

  // SharedPreferences keyleri
  static const String isFirstLaunchKey = 'is_first_launch';
  static const String userIdKey = 'user_id';
  static const String languageKey = 'language';
  static const String themeModeKey = 'theme_mode';
  static const String notificationsEnabledKey = 'notifications_enabled';
  static const String soundEnabledKey = 'sound_enabled';
  static const String vibrationEnabledKey = 'vibration_enabled';
  static const String counterSizeKey = 'counter_size';
  static const String dailyReminderTimeKey = 'daily_reminder_time';
  static const String lastSyncTimeKey = 'last_sync_time';

  // Hata mesajları
  static const String networkErrorMessage = 'İnternet bağlantısı kontrol edilemedi';
  static const String authErrorMessage = 'Kimlik doğrulama hatası';
  static const String permissionErrorMessage = 'İzin hatası';
  static const String storageErrorMessage = 'Depolama hatası';
  static const String unknownErrorMessage = 'Bilinmeyen hata oluştu';

  // Başarı mesajları
  static const String saveSuccessMessage = 'Başarıyla kaydedildi';
  static const String updateSuccessMessage = 'Başarıyla güncellendi';
  static const String deleteSuccessMessage = 'Başarıyla silindi';
  static const String sendSuccessMessage = 'Başarıyla gönderildi';

  // Regex patternleri
  static const String emailPattern = r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$';
  static const String phonePattern = r'^\+?[1-9]\d{1,14}$';
  static const String nicknamePattern = r'^[a-zA-ZğüşıöçĞÜŞİÖÇ0-9_\s]{3,30}$';
  static const String passwordPattern = r'^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d@$!%*#?&]{6,}$';

  // Sosyal medya URL patternleri
  static const String instagramPattern = r'^@[A-Za-z0-9_.]+$';
  static const String twitterPattern = r'^@[A-Za-z0-9_]+$';
  static const String facebookPattern = r'^[A-Za-z0-9.]+$';
  static const String spotifyPattern = r'^[A-Za-z0-9]+$';
  static const String blueskyPattern = r'^@[A-Za-z0-9_.]+$';

  // Yardımcı metotlar
  static int getLevelThreshold(String level) {
    return levelThresholds[level] ?? 0;
  }

  static String calculateLevel(int points) {
    for (var entry in levelThresholds.entries.toList().reversed) {
      if (points >= entry.value) {
        return entry.key;
      }
    }
    return 'levelBeginner';
  }

  static int getNextLevelPoints(String currentLevel) {
    final levels = levelThresholds.entries.toList();
    final currentIndex = levels.indexWhere((entry) => entry.key == currentLevel);
    
    if (currentIndex == -1 || currentIndex == levels.length - 1) {
      return levelThresholds.values.last;
    }
    
    return levels[currentIndex + 1].value;
  }
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\core\models\category_model.dart  
====================  
  
// Dosya: lib/core/models/category_model.dart
// Açıklama: Zikir kategorisi veri modelini tanımlar.

import 'package:cloud_firestore/cloud_firestore.dart';

class CategoryModel {
  final String id;
  final Map<String, String> name;
  final DateTime createdAt;
  final String iconName;
  final int orderIndex;
  final bool isActive;

  CategoryModel({
    required this.id,
    required this.name,
    required this.createdAt,
    this.iconName = 'category',
    this.orderIndex = 0,
    this.isActive = true,
  });

  factory CategoryModel.fromMap(String id, Map<String, dynamic> data) {
    return CategoryModel(
      id: id,
      name: Map<String, String>.from(data['name'] ?? {}),
      createdAt: (data['createdAt'] as Timestamp?)?.toDate() ?? DateTime.now(),
      iconName: data['iconName'] ?? 'category',
      orderIndex: data['orderIndex'] ?? 0,
      isActive: data['isActive'] ?? true,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'name': name,
      'createdAt': Timestamp.fromDate(createdAt),
      'iconName': iconName,
      'orderIndex': orderIndex,
      'isActive': isActive,
    };
  }

  String getLocalizedName(String languageCode) {
    return name[languageCode] ?? name['en'] ?? 'Category';
  }

  CategoryModel copyWith({
    String? id,
    Map<String, String>? name,
    DateTime? createdAt,
    String? iconName,
    int? orderIndex,
    bool? isActive,
  }) {
    return CategoryModel(
      id: id ?? this.id,
      name: name ?? this.name,
      createdAt: createdAt ?? this.createdAt,
      iconName: iconName ?? this.iconName,
      orderIndex: orderIndex ?? this.orderIndex,
      isActive: isActive ?? this.isActive,
    );
  }
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\core\models\friend_model.dart  
====================  
  
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';

/// Arkadaşlık istekleri ve durumlarını yönetmek için kullanılan model
class FriendModel {
  final String id;
  final String requesterId; // İstek gönderen kullanıcının ID'si
  final String receiverId; // İstek alan kullanıcının ID'si
  final FriendRequestStatus status; // İsteğin durumu
  final DateTime createdAt; // İsteğin gönderilme tarihi
  final DateTime? updatedAt; // İsteğin güncellenme tarihi
  final Map<String, dynamic>? metadata; // Ek bilgiler

  FriendModel({
    required this.id,
    required this.requesterId,
    required this.receiverId,
    required this.status,
    required this.createdAt,
    this.updatedAt,
    this.metadata,
  });

  /// Firestore dokümanından FriendModel oluşturur
  factory FriendModel.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>;
    
    return FriendModel(
      id: doc.id,
      requesterId: data['requesterId'] ?? '',
      receiverId: data['receiverId'] ?? '',
      status: FriendRequestStatus.fromString(data['status'] ?? 'pending'),
      createdAt: (data['createdAt'] as Timestamp?)?.toDate() ?? DateTime.now(),
      updatedAt: (data['updatedAt'] as Timestamp?)?.toDate(),
      metadata: data['metadata'] as Map<String, dynamic>?,
    );
  }

  /// Map'ten FriendModel oluşturur
  factory FriendModel.fromMap(Map<String, dynamic> data, String id) {
    return FriendModel(
      id: id,
      requesterId: data['requesterId'] ?? '',
      receiverId: data['receiverId'] ?? '',
      status: FriendRequestStatus.fromString(data['status'] ?? 'pending'),
      createdAt: (data['createdAt'] as Timestamp?)?.toDate() ?? DateTime.now(),
      updatedAt: (data['updatedAt'] as Timestamp?)?.toDate(),
      metadata: data['metadata'] as Map<String, dynamic>?,
    );
  }

  /// FriendModel'i Map'e dönüştürür (Firestore için)
  Map<String, dynamic> toMap() {
    return {
      'requesterId': requesterId,
      'receiverId': receiverId,
      'status': status.toString(),
      'createdAt': Timestamp.fromDate(createdAt),
      'updatedAt': updatedAt != null ? Timestamp.fromDate(updatedAt!) : null,
      'metadata': metadata,
    };
  }

  /// FriendModel'in bir kopyasını oluşturur
  FriendModel copyWith({
    String? id,
    String? requesterId,
    String? receiverId,
    FriendRequestStatus? status,
    DateTime? createdAt,
    DateTime? updatedAt,
    Map<String, dynamic>? metadata,
  }) {
    return FriendModel(
      id: id ?? this.id,
      requesterId: requesterId ?? this.requesterId,
      receiverId: receiverId ?? this.receiverId,
      status: status ?? this.status,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      metadata: metadata ?? this.metadata,
    );
  }

  /// Arkadaşlık isteğinin engellenip engellenmediğini kontrol eder
  bool get isBlocked => status == FriendRequestStatus.blocked;

  /// Arkadaşlık isteğinin beklemede olup olmadığını kontrol eder
  bool get isPending => status == FriendRequestStatus.pending;

  /// Arkadaşlık isteğinin kabul edilip edilmediğini kontrol eder
  bool get isAccepted => status == FriendRequestStatus.accepted;

  /// Arkadaşlık isteğinin reddedilip edilmediğini kontrol eder
  bool get isRejected => status == FriendRequestStatus.rejected;

  /// İsteğin ne kadar süre önce gönderildiğini hesaplar
  Duration get timeAgo => DateTime.now().difference(createdAt);

  /// İsteğin son güncellenme zamanını alır
  DateTime get lastUpdated => updatedAt ?? createdAt;

  @override
  String toString() {
    return 'FriendModel(id: $id, requesterId: $requesterId, receiverId: $receiverId, status: $status, createdAt: $createdAt)';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;

    return other is FriendModel &&
        other.id == id &&
        other.requesterId == requesterId &&
        other.receiverId == receiverId &&
        other.status == status;
  }

  @override
  int get hashCode {
    return id.hashCode ^
        requesterId.hashCode ^
        receiverId.hashCode ^
        status.hashCode;
  }
}

/// Arkadaşlık isteği durumlarını temsil eden enum
enum FriendRequestStatus {
  pending,   // Beklemede
  accepted,  // Kabul edildi
  rejected,  // Reddedildi
  blocked,   // Engellendi
  cancelled; // İptal edildi

  /// String'den FriendRequestStatus oluşturur
  static FriendRequestStatus fromString(String status) {
    switch (status.toLowerCase()) {
      case 'pending':
        return FriendRequestStatus.pending;
      case 'accepted':
        return FriendRequestStatus.accepted;
      case 'rejected':
        return FriendRequestStatus.rejected;
      case 'blocked':
        return FriendRequestStatus.blocked;
      case 'cancelled':
        return FriendRequestStatus.cancelled;
      default:
        return FriendRequestStatus.pending;
    }
  }

  /// FriendRequestStatus'u string'e dönüştürür
  @override
  String toString() {
    switch (this) {
      case FriendRequestStatus.pending:
        return 'pending';
      case FriendRequestStatus.accepted:
        return 'accepted';
      case FriendRequestStatus.rejected:
        return 'rejected';
      case FriendRequestStatus.blocked:
        return 'blocked';
      case FriendRequestStatus.cancelled:
        return 'cancelled';
    }
  }

  /// Durumun görüntülenecek ismini döner
  String get displayName {
    switch (this) {
      case FriendRequestStatus.pending:
        return 'Beklemede';
      case FriendRequestStatus.accepted:
        return 'Kabul Edildi';
      case FriendRequestStatus.rejected:
        return 'Reddedildi';
      case FriendRequestStatus.blocked:
        return 'Engellendi';
      case FriendRequestStatus.cancelled:
        return 'İptal Edildi';
    }
  }

  /// Durumun rengini döner
  Color get color {
    switch (this) {
      case FriendRequestStatus.pending:
        return Colors.orange;
      case FriendRequestStatus.accepted:
        return Colors.green;
      case FriendRequestStatus.rejected:
        return Colors.red;
      case FriendRequestStatus.blocked:
        return Colors.red.shade800;
      case FriendRequestStatus.cancelled:
        return Colors.grey;
    }
  }
}

/// Arkadaşlık listesi için basit bir model
class FriendshipModel {
  final String userId;
  final String friendId;
  final DateTime createdAt;
  final bool isActive;
  final Map<String, dynamic>? metadata;

  FriendshipModel({
    required this.userId,
    required this.friendId,
    required this.createdAt,
    this.isActive = true,
    this.metadata,
  });

  /// Firestore dokümanından FriendshipModel oluşturur
  factory FriendshipModel.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>;
    
    return FriendshipModel(
      userId: data['userId'] ?? '',
      friendId: data['friendId'] ?? '',
      createdAt: (data['createdAt'] as Timestamp?)?.toDate() ?? DateTime.now(),
      isActive: data['isActive'] ?? true,
      metadata: data['metadata'] as Map<String, dynamic>?,
    );
  }

  /// Map'ten FriendshipModel oluşturur
  factory FriendshipModel.fromMap(Map<String, dynamic> data) {
    return FriendshipModel(
      userId: data['userId'] ?? '',
      friendId: data['friendId'] ?? '',
      createdAt: (data['createdAt'] as Timestamp?)?.toDate() ?? DateTime.now(),
      isActive: data['isActive'] ?? true,
      metadata: data['metadata'] as Map<String, dynamic>?,
    );
  }

  /// FriendshipModel'i Map'e dönüştürür
  Map<String, dynamic> toMap() {
    return {
      'userId': userId,
      'friendId': friendId,
      'createdAt': Timestamp.fromDate(createdAt),
      'isActive': isActive,
      'metadata': metadata,
    };
  }

  /// FriendshipModel'in bir kopyasını oluşturur
  FriendshipModel copyWith({
    String? userId,
    String? friendId,
    DateTime? createdAt,
    bool? isActive,
    Map<String, dynamic>? metadata,
  }) {
    return FriendshipModel(
      userId: userId ?? this.userId,
      friendId: friendId ?? this.friendId,
      createdAt: createdAt ?? this.createdAt,
      isActive: isActive ?? this.isActive,
      metadata: metadata ?? this.metadata,
    );
  }

  @override
  String toString() {
    return 'FriendshipModel(userId: $userId, friendId: $friendId, createdAt: $createdAt, isActive: $isActive)';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;

    return other is FriendshipModel &&
        other.userId == userId &&
        other.friendId == friendId;
  }

  @override
  int get hashCode {
    return userId.hashCode ^ friendId.hashCode;
  }
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\core\models\user_model.dart  
====================  
  
import 'package:cloud_firestore/cloud_firestore.dart';

class UserModel {
  final String id;
  final String nickname;
  final String email;
  final bool isEmailVerified;
  final int totalZikirCount;
  final String createdAt;
  final bool isPremium;
  final List<String> friends;
  final int points;
  final String level;
  final int currentStreak;
  final int? longestStreak;
  final List<String> badges;
  final DateTime? lastActivity;
  final Map<String, dynamic>? customClaims;
  final List<String>? purchasedThemes;
  final List<String>? purchasedAvatars;
  final List<String>? purchasedRingtones;
  final String? aboutMe;
  final Map<String, String>? socialLinks;
  final String? profileImageUrl;
  final int? dailyZikirTarget;

  UserModel({
    required this.id,
    required this.nickname,
    required this.email,
    required this.isEmailVerified,
    required this.totalZikirCount,
    required this.createdAt,
    required this.isPremium,
    this.friends = const [],
    this.points = 0,
    this.level = 'levelBeginner',
    this.currentStreak = 0,
    this.longestStreak,
    this.badges = const [],
    this.lastActivity,
    this.customClaims,
    this.purchasedThemes = const [],
    this.purchasedAvatars = const [],
    this.purchasedRingtones = const [],
    this.aboutMe,
    this.socialLinks,
    this.profileImageUrl,
    this.dailyZikirTarget,
  });

  factory UserModel.fromJson(Map<String, dynamic> json, String id) {
    return UserModel(
      id: id,
      nickname: json['nickname'] ?? '',
      email: json['email'] ?? '',
      isEmailVerified: json['isEmailVerified'] ?? false,
      totalZikirCount: json['totalZikirCount'] ?? 0,
      createdAt: json['createdAt'] ?? '',
      isPremium: json['isPremium'] ?? false,
      friends: List<String>.from(json['friends'] ?? []),
      points: json['points'] ?? 0,
      level: json['level'] ?? 'levelBeginner',
      currentStreak: json['currentStreak'] ?? 0,
      longestStreak: json['longestStreak'],
      badges: List<String>.from(json['badges'] ?? []),
      lastActivity: (json['lastActivity'] as Timestamp?)?.toDate(),
      customClaims: json['customClaims'],
      purchasedThemes: List<String>.from(json['purchasedThemes'] ?? []),
      purchasedAvatars: List<String>.from(json['purchasedAvatars'] ?? []),
      purchasedRingtones: List<String>.from(json['purchasedRingtones'] ?? []),
      aboutMe: json['aboutMe'],
      socialLinks: json['socialLinks'] != null 
          ? Map<String, String>.from(json['socialLinks']) 
          : null,
      profileImageUrl: json['profileImageUrl'],
      dailyZikirTarget: json['dailyZikirTarget'],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'nickname': nickname,
      'email': email,
      'isEmailVerified': isEmailVerified,
      'totalZikirCount': totalZikirCount,
      'createdAt': createdAt,
      'isPremium': isPremium,
      'friends': friends,
      'points': points,
      'level': level,
      'currentStreak': currentStreak,
      'longestStreak': longestStreak,
      'badges': badges,
      'lastActivity': lastActivity != null ? Timestamp.fromDate(lastActivity!) : null,
      'customClaims': customClaims,
      'purchasedThemes': purchasedThemes,
      'purchasedAvatars': purchasedAvatars,
      'purchasedRingtones': purchasedRingtones,
      'aboutMe': aboutMe,
      'socialLinks': socialLinks,
      'profileImageUrl': profileImageUrl,
      'dailyZikirTarget': dailyZikirTarget,
    };
  }

  UserModel copyWith({
    String? id,
    String? nickname,
    String? email,
    bool? isEmailVerified,
    int? totalZikirCount,
    String? createdAt,
    bool? isPremium,
    List<String>? friends,
    int? points,
    String? level,
    int? currentStreak,
    int? longestStreak,
    List<String>? badges,
    DateTime? lastActivity,
    Map<String, dynamic>? customClaims,
    List<String>? purchasedThemes,
    List<String>? purchasedAvatars,
    List<String>? purchasedRingtones,
    String? aboutMe,
    Map<String, String>? socialLinks,
    String? profileImageUrl,
    int? dailyZikirTarget,
  }) {
    return UserModel(
      id: id ?? this.id,
      nickname: nickname ?? this.nickname,
      email: email ?? this.email,
      isEmailVerified: isEmailVerified ?? this.isEmailVerified,
      totalZikirCount: totalZikirCount ?? this.totalZikirCount,
      createdAt: createdAt ?? this.createdAt,
      isPremium: isPremium ?? this.isPremium,
      friends: friends ?? this.friends,
      points: points ?? this.points,
      level: level ?? this.level,
      currentStreak: currentStreak ?? this.currentStreak,
      longestStreak: longestStreak ?? this.longestStreak,
      badges: badges ?? this.badges,
      lastActivity: lastActivity ?? this.lastActivity,
      customClaims: customClaims ?? this.customClaims,
      purchasedThemes: purchasedThemes ?? this.purchasedThemes,
      purchasedAvatars: purchasedAvatars ?? this.purchasedAvatars,
      purchasedRingtones: purchasedRingtones ?? this.purchasedRingtones,
      aboutMe: aboutMe ?? this.aboutMe,
      socialLinks: socialLinks ?? this.socialLinks,
      profileImageUrl: profileImageUrl ?? this.profileImageUrl,
      dailyZikirTarget: dailyZikirTarget ?? this.dailyZikirTarget,
    );
  }

  // Kullanıcının belirli bir rozete sahip olup olmadığını kontrol eder
  bool hasBadge(String badgeId) {
    return badges.contains(badgeId);
  }

  // Freemium kullanıcı için arkadaş limitini kontrol eder
  bool canAddMoreFriends() {
    if (isPremium) return true; // Premium kullanıcılar için sınırsız
    return friends.length < 20; // Freemium için 20 arkadaş limiti
  }
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\core\models\user_zikir_model.dart  
====================  
  
// lib/core/models/user_zikir_model.dart

import 'package:cloud_firestore/cloud_firestore.dart';

/// Kullanıcının zikir geçmişini ve ilerlemesini takip eden model
class UserZikirModel {
  final String id;
  final String userId;
  final String zikirId;
  final int currentCount; // Mevcut sayım
  final int targetCount; // Hedef sayım
  final bool isCompleted; // Tamamlandı mı?
  final DateTime createdAt; // Oluşturulma tarihi
  final DateTime updatedAt; // Son güncellenme tarihi
  final DateTime? completedAt; // Tamamlanma tarihi
  final Duration? timeSpent; // Harcanan süre
  final List<ZikirSession> sessions; // Zikir oturumları
  final Map<String, dynamic>? metadata; // Ek bilgiler

  UserZikirModel({
    required this.id,
    required this.userId,
    required this.zikirId,
    required this.currentCount,
    required this.targetCount,
    required this.createdAt,
    required this.updatedAt,
    this.isCompleted = false,
    this.completedAt,
    this.timeSpent,
    this.sessions = const [],
    this.metadata,
  });

  /// Firestore dokümanından UserZikirModel oluşturur
  factory UserZikirModel.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>;
    
    return UserZikirModel(
      id: doc.id,
      userId: data['userId'] ?? '',
      zikirId: data['zikirId'] ?? '',
      currentCount: data['currentCount'] ?? 0,
      targetCount: data['targetCount'] ?? 33,
      isCompleted: data['isCompleted'] ?? false,
      createdAt: (data['createdAt'] as Timestamp?)?.toDate() ?? DateTime.now(),
      updatedAt: (data['updatedAt'] as Timestamp?)?.toDate() ?? DateTime.now(),
      completedAt: (data['completedAt'] as Timestamp?)?.toDate(),
      timeSpent: data['timeSpentSeconds'] != null 
          ? Duration(seconds: data['timeSpentSeconds']) 
          : null,
      sessions: (data['sessions'] as List<dynamic>?)
              ?.map((session) => ZikirSession.fromMap(session))
              .toList() ?? [],
      metadata: data['metadata'] as Map<String, dynamic>?,
    );
  }

  /// Map'ten UserZikirModel oluşturur
  factory UserZikirModel.fromMap(Map<String, dynamic> data) {
    return UserZikirModel(
      id: data['id'] ?? '',
      userId: data['userId'] ?? '',
      zikirId: data['zikirId'] ?? '',
      currentCount: data['currentCount'] ?? 0,
      targetCount: data['targetCount'] ?? 33,
      isCompleted: data['isCompleted'] ?? false,
      createdAt: (data['createdAt'] as Timestamp?)?.toDate() ?? DateTime.now(),
      updatedAt: (data['updatedAt'] as Timestamp?)?.toDate() ?? DateTime.now(),
      completedAt: (data['completedAt'] as Timestamp?)?.toDate(),
      timeSpent: data['timeSpentSeconds'] != null 
          ? Duration(seconds: data['timeSpentSeconds']) 
          : null,
      sessions: (data['sessions'] as List<dynamic>?)
              ?.map((session) => ZikirSession.fromMap(session))
              .toList() ?? [],
      metadata: data['metadata'] as Map<String, dynamic>?,
    );
  }

  /// JSON'dan UserZikirModel oluşturur (Firebase Functions için)
  factory UserZikirModel.fromJson(Map<String, dynamic> json) {
    return UserZikirModel(
      id: json['id'] ?? '',
      userId: json['userId'] ?? '',
      zikirId: json['zikirId'] ?? '',
      currentCount: json['currentCount'] ?? 0,
      targetCount: json['targetCount'] ?? 33,
      isCompleted: json['isCompleted'] ?? false,
      createdAt: json['createdAt'] != null 
          ? DateTime.parse(json['createdAt']) 
          : DateTime.now(),
      updatedAt: json['updatedAt'] != null 
          ? DateTime.parse(json['updatedAt']) 
          : DateTime.now(),
      completedAt: json['completedAt'] != null 
          ? DateTime.parse(json['completedAt']) 
          : null,
      timeSpent: json['timeSpentSeconds'] != null 
          ? Duration(seconds: json['timeSpentSeconds']) 
          : null,
      sessions: (json['sessions'] as List<dynamic>?)
              ?.map((session) => ZikirSession.fromMap(session))
              .toList() ?? [],
      metadata: json['metadata'] as Map<String, dynamic>?,
    );
  }

  /// UserZikirModel'i Map'e dönüştürür (Firestore için)
  Map<String, dynamic> toMap() {
    return {
      'userId': userId,
      'zikirId': zikirId,
      'currentCount': currentCount,
      'targetCount': targetCount,
      'isCompleted': isCompleted,
      'createdAt': Timestamp.fromDate(createdAt),
      'updatedAt': Timestamp.fromDate(updatedAt),
      'completedAt': completedAt != null ? Timestamp.fromDate(completedAt!) : null,
      'timeSpentSeconds': timeSpent?.inSeconds,
      'sessions': sessions.map((session) => session.toMap()).toList(),
      'metadata': metadata,
    };
  }

  /// UserZikirModel'i JSON'a dönüştürür
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'userId': userId,
      'zikirId': zikirId,
      'currentCount': currentCount,
      'targetCount': targetCount,
      'isCompleted': isCompleted,
      'createdAt': createdAt.toIso8601String(),
      'updatedAt': updatedAt.toIso8601String(),
      'completedAt': completedAt?.toIso8601String(),
      'timeSpentSeconds': timeSpent?.inSeconds,
      'sessions': sessions.map((session) => session.toMap()).toList(),
      'metadata': metadata,
    };
  }

  /// UserZikirModel'in bir kopyasını oluşturur
  UserZikirModel copyWith({
    String? id,
    String? userId,
    String? zikirId,
    int? currentCount,
    int? targetCount,
    bool? isCompleted,
    DateTime? createdAt,
    DateTime? updatedAt,
    DateTime? completedAt,
    Duration? timeSpent,
    List<ZikirSession>? sessions,
    Map<String, dynamic>? metadata,
  }) {
    return UserZikirModel(
      id: id ?? this.id,
      userId: userId ?? this.userId,
      zikirId: zikirId ?? this.zikirId,
      currentCount: currentCount ?? this.currentCount,
      targetCount: targetCount ?? this.targetCount,
      isCompleted: isCompleted ?? this.isCompleted,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      completedAt: completedAt ?? this.completedAt,
      timeSpent: timeSpent ?? this.timeSpent,
      sessions: sessions ?? this.sessions,
      metadata: metadata ?? this.metadata,
    );
  }

  /// İlerleme yüzdesini hesaplar (0.0 - 1.0 arası)
  double get progressPercentage {
    if (targetCount <= 0) return 0.0;
    return (currentCount / targetCount).clamp(0.0, 1.0);
  }

  /// Kalan sayıyı hesaplar
  int get remainingCount {
    return (targetCount - currentCount).clamp(0, targetCount);
  }

  /// Hedefi aştı mı kontrol eder
  bool get isOverTarget => currentCount > targetCount;

  /// Bugün tamamlandı mı kontrol eder
  bool get isCompletedToday {
    if (!isCompleted || completedAt == null) return false;
    final now = DateTime.now();
    final completed = completedAt!;
    return now.year == completed.year &&
           now.month == completed.month &&
           now.day == completed.day;
  }

  /// Ortalama hızı hesaplar (dakika başına zikir)
  double get averageSpeed {
    if (timeSpent == null || timeSpent!.inMinutes <= 0) return 0.0;
    return currentCount / timeSpent!.inMinutes;
  }

  /// Son oturumu alır
  ZikirSession? get lastSession {
    if (sessions.isEmpty) return null;
    return sessions.last;
  }

  /// Toplam oturum sayısını alır
  int get totalSessions => sessions.length;

  /// En uzun oturumu alır
  ZikirSession? get longestSession {
    if (sessions.isEmpty) return null;
    return sessions.reduce((a, b) => 
        a.duration.inSeconds > b.duration.inSeconds ? a : b);
  }

  @override
  String toString() {
    return 'UserZikirModel(id: $id, userId: $userId, zikirId: $zikirId, currentCount: $currentCount/$targetCount, isCompleted: $isCompleted)';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;

    return other is UserZikirModel &&
        other.id == id &&
        other.userId == userId &&
        other.zikirId == zikirId;
  }

  @override
  int get hashCode {
    return id.hashCode ^ userId.hashCode ^ zikirId.hashCode;
  }
}

/// Zikir oturumunu temsil eden model
class ZikirSession {
  final String id;
  final DateTime startTime;
  final DateTime endTime;
  final int count; // Bu oturumda çekilen zikir sayısı
  final Duration duration; // Oturum süresi
  final Map<String, dynamic>? metadata; // Ek bilgiler

  ZikirSession({
    required this.id,
    required this.startTime,
    required this.endTime,
    required this.count,
    required this.duration,
    this.metadata,
  });

  /// Map'ten ZikirSession oluşturur
  factory ZikirSession.fromMap(Map<String, dynamic> data) {
    final startTime = (data['startTime'] as Timestamp?)?.toDate() ?? DateTime.now();
    final endTime = (data['endTime'] as Timestamp?)?.toDate() ?? DateTime.now();
    
    return ZikirSession(
      id: data['id'] ?? '',
      startTime: startTime,
      endTime: endTime,
      count: data['count'] ?? 0,
      duration: Duration(seconds: data['durationSeconds'] ?? endTime.difference(startTime).inSeconds),
      metadata: data['metadata'] as Map<String, dynamic>?,
    );
  }

  /// ZikirSession'ı Map'e dönüştürür
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'startTime': Timestamp.fromDate(startTime),
      'endTime': Timestamp.fromDate(endTime),
      'count': count,
      'durationSeconds': duration.inSeconds,
      'metadata': metadata,
    };
  }

  /// Yeni bir oturum oluşturur
  static ZikirSession create({
    required DateTime startTime,
    required DateTime endTime,
    required int count,
    Map<String, dynamic>? metadata,
  }) {
    return ZikirSession(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      startTime: startTime,
      endTime: endTime,
      count: count,
      duration: endTime.difference(startTime),
      metadata: metadata,
    );
  }

  /// Oturum hızını hesaplar (dakika başına zikir)
  double get speed {
    if (duration.inMinutes <= 0) return 0.0;
    return count / duration.inMinutes;
  }

  /// Oturumun bugün olup olmadığını kontrol eder
  bool get isToday {
    final now = DateTime.now();
    return now.year == startTime.year &&
           now.month == startTime.month &&
           now.day == startTime.day;
  }

  @override
  String toString() {
    return 'ZikirSession(id: $id, startTime: $startTime, endTime: $endTime, count: $count, duration: $duration)';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;

    return other is ZikirSession &&
        other.id == id &&
        other.startTime == startTime &&
        other.endTime == endTime;
  }

  @override
  int get hashCode {
    return id.hashCode ^ startTime.hashCode ^ endTime.hashCode;
  }
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\core\models\zikir_model.dart  
====================  
  
// lib/core/models/zikir_model.dart

import 'package:cloud_firestore/cloud_firestore.dart';

class ZikirModel {
  final String id;
  final Map<String, String> title;
  final Map<String, String> description;
  final String categoryId;
  final int targetCount;
  final Map<String, String> purpose;
  final DateTime createdAt;
  final String createdBy;
  final String? arabicText;
  final String? transliteration;
  final String? audioUrlArabic;
  final String? audioUrlTranslated;
  final String? source;
  final bool isPersonal;
  final int popularity;

  ZikirModel({
    required this.id,
    required this.title,
    required this.description,
    required this.categoryId,
    required this.targetCount,
    required this.purpose,
    required this.createdAt,
    required this.createdBy,
    this.arabicText,
    this.transliteration,
    this.audioUrlArabic,
    this.audioUrlTranslated,
    this.source,
    this.isPersonal = false,
    this.popularity = 0,
  });

  factory ZikirModel.fromMap(String id, Map<String, dynamic> data) {
    return ZikirModel(
      id: id,
      title: Map<String, String>.from(data['title'] ?? {}),
      description: Map<String, String>.from(data['description'] ?? {}),
      categoryId: data['categoryId'] ?? '',
      targetCount: data['targetCount'] ?? data['requiredCount'] ?? 33, // Geriye dönük uyumluluk
      purpose: Map<String, String>.from(data['purpose'] ?? {}),
      createdAt: (data['createdAt'] as Timestamp?)?.toDate() ?? DateTime.now(),
      createdBy: data['createdBy'] ?? '',
      arabicText: data['arabicText'],
      transliteration: data['transliteration'],
      audioUrlArabic: data['audioUrlArabic'],
      audioUrlTranslated: data['audioUrlTranslated'],
      source: data['source'],
      isPersonal: data['isPersonal'] ?? false,
      popularity: data['popularity'] ?? 0,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'title': title,
      'description': description,
      'categoryId': categoryId,
      'targetCount': targetCount,
      'purpose': purpose,
      'createdAt': Timestamp.fromDate(createdAt),
      'createdBy': createdBy,
      'arabicText': arabicText,
      'transliteration': transliteration,
      'audioUrlArabic': audioUrlArabic,
      'audioUrlTranslated': audioUrlTranslated,
      'source': source,
      'isPersonal': isPersonal,
      'popularity': popularity,
    };
  }

  String getLocalizedTitle(String languageCode) {
    return title[languageCode] ?? title['en'] ?? title.values.first;
  }

  String getLocalizedDescription(String languageCode) {
    return description[languageCode] ?? description['en'] ?? description.values.first;
  }

  String getLocalizedPurpose(String languageCode) {
    return purpose[languageCode] ?? purpose['en'] ?? purpose.values.first;
  }

  ZikirModel copyWith({
    String? id,
    Map<String, String>? title,
    Map<String, String>? description,
    String? categoryId,
    int? targetCount,
    Map<String, String>? purpose,
    DateTime? createdAt,
    String? createdBy,
    String? arabicText,
    String? transliteration,
    String? audioUrlArabic,
    String? audioUrlTranslated,
    String? source,
    bool? isPersonal,
    int? popularity,
  }) {
    return ZikirModel(
      id: id ?? this.id,
      title: title ?? this.title,
      description: description ?? this.description,
      categoryId: categoryId ?? this.categoryId,
      targetCount: targetCount ?? this.targetCount,
      purpose: purpose ?? this.purpose,
      createdAt: createdAt ?? this.createdAt,
      createdBy: createdBy ?? this.createdBy,
      arabicText: arabicText ?? this.arabicText,
      transliteration: transliteration ?? this.transliteration,
      audioUrlArabic: audioUrlArabic ?? this.audioUrlArabic,
      audioUrlTranslated: audioUrlTranslated ?? this.audioUrlTranslated,
      source: source ?? this.source,
      isPersonal: isPersonal ?? this.isPersonal,
      popularity: popularity ?? this.popularity,
    );
  }
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\core\providers\providers.dart  
====================  
  
// Dosya: lib/core/providers/providers.dart
// Yol: C:\src\zikirmo_new\lib\core\providers\providers.dart
// Açıklama: Tüm provider'lar birleştirildi, çakışmalar çözüldü

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:cloud_firestore/cloud_firestore.dart'; // Timestamp için gerekli
import '../services/auth_service.dart';
import '../services/firestore_service.dart';
import '../services/analytics_service.dart';
import '../services/haptic_service.dart';
import '../services/notification_service.dart';
import '../services/purchase_service.dart';
import '../models/user_model.dart';
import '../models/zikir_model.dart';
import '../models/category_model.dart';

// ==================== SERVICE PROVIDERS ====================

/// Firestore Service Provider
final firestoreServiceProvider = Provider<FirestoreService>((ref) {
  return FirestoreService();
});

/// Analytics Service Provider
final analyticsServiceProvider = Provider<AnalyticsService>((ref) {
  return AnalyticsService();
});

/// Haptic Service Provider
final hapticServiceProvider = Provider<HapticService>((ref) {
  return HapticService();
});

/// Notification Service Provider
final notificationServiceProvider = Provider<NotificationService>((ref) {
  return NotificationService();
});

/// Auth Service Provider
final authServiceProvider = Provider<AuthService>((ref) {
  final firestoreService = ref.watch(firestoreServiceProvider);
  final analyticsService = ref.watch(analyticsServiceProvider);
  return AuthService(
    firestoreService: firestoreService,
    analyticsService: analyticsService,
  );
});

/// Purchase Service Provider
final purchaseServiceProvider = Provider<PurchaseService>((ref) {
  final authService = ref.read(authServiceProvider);
  return PurchaseService(authService);
});

// ==================== USER PROVIDERS ====================

/// Current user info - UNIFIED PROVIDER
final userProvider = FutureProvider<UserModel?>((ref) async {
  final authService = ref.watch(authServiceProvider);
  final firestoreService = ref.watch(firestoreServiceProvider);
  final userId = authService.currentUser?.uid;
  if (userId != null) {
    return await firestoreService.getUser(userId);
  }
  return null;
});

/// Premium membership status
final isPremiumProvider = FutureProvider<bool>((ref) async {
  final authService = ref.watch(authServiceProvider);
  return await authService.checkIfUserIsPremium();
});

/// Admin role status
final isAdminProvider = FutureProvider<bool>((ref) async {
  final authService = ref.watch(authServiceProvider);
  return await authService.checkIfUserIsAdmin();
});

// ==================== ZİKİR PROVIDERS ====================

/// Specific zikir by ID
final zikirProviderFamily = FutureProvider.family<ZikirModel?, String>((ref, zikirId) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return await firestoreService.getZikir(zikirId);
});

/// Popular zikirs list
final popularZikirsProvider = FutureProvider<List<ZikirModel>>((ref) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return await firestoreService.getPopularZikirs(limit: 5);
});

/// Suggested zikirs list
final suggestedZikirsProvider = FutureProvider<List<ZikirModel>>((ref) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return await firestoreService.getSuggestedZikirs();
});

// ==================== CATEGORY PROVIDERS ====================

/// Active categories list
final categoriesProvider = FutureProvider<List<CategoryModel>>((ref) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return await firestoreService.getCategories();
});

/// Specific category by ID
final categoryProviderFamily = FutureProvider.family<CategoryModel?, String>((ref, categoryId) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return await firestoreService.getCategory(categoryId);
});

/// Zikirs under a category
final categoryZikirsProviderFamily = FutureProvider.family<List<ZikirModel>, String>((ref, categoryId) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return await firestoreService.getZikirsByCategory(categoryId);
});

// ==================== FRIENDS PROVIDERS ====================

/// Friend list of current user
final friendsProvider = FutureProvider<List<UserModel>>((ref) async {
  final authService = ref.watch(authServiceProvider);
  final firestoreService = ref.watch(firestoreServiceProvider);
  final userId = authService.currentUser?.uid;
  if (userId == null) return [];
  return await firestoreService.getFriends(userId);
});

/// Pending friend requests
final friendRequestsProvider = FutureProvider<List<UserModel>>((ref) async {
  final authService = ref.watch(authServiceProvider);
  final firestoreService = ref.watch(firestoreServiceProvider);
  final userId = authService.currentUser?.uid;
  if (userId == null) return [];
  return await firestoreService.getFriendRequests(userId);
});

/// Lookup another user by ID
final otherUserProviderFamily = FutureProvider.family<UserModel?, String>((ref, userId) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return await firestoreService.getUser(userId);
});

// ==================== STATS & LEADERBOARD ====================

/// User statistics
final userStatsProvider = FutureProvider<Map<String, dynamic>>((ref) async {
  final authService = ref.watch(authServiceProvider);
  final firestoreService = ref.watch(firestoreServiceProvider);
  final userId = authService.currentUser?.uid;
  if (userId == null) return {};
  return await firestoreService.getUserStats(userId);
});

/// Leaderboard by period
final leaderboardProviderFamily = FutureProvider.family<List<UserModel>, String>((ref, period) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return await firestoreService.getLeaderboard(period);
});

// ==================== ADMIN SETTINGS ====================

/// Global admin settings
final adminSettingsProvider = FutureProvider<Map<String, dynamic>>((ref) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return await firestoreService.getSettings();
});

// ==================== NOTIFICATIONS ====================

/// Recent notifications for current user
final notificationsProvider = FutureProvider<List<Map<String, dynamic>>>((ref) async {
  final authService = ref.watch(authServiceProvider);
  final firestoreService = ref.watch(firestoreServiceProvider);
  final userId = authService.currentUser?.uid;
  if (userId == null) return [];
  final snapshot = await firestoreService.firestore
      .collection('notifications')
      .where('userId', isEqualTo: userId)
      .orderBy('createdAt', descending: true)
      .limit(50)
      .get();
  return snapshot.docs.map((doc) => {'id': doc.id, ...doc.data()}).toList();
});

// ==================== APP STATE PROVIDERS ====================

final loadingProvider = StateProvider<bool>((ref) => false);
final errorMessageProvider = StateProvider<String?>((ref) => null);
final selectedLanguageProvider = StateProvider<String>((ref) => 'tr');
final themeModeProvider = StateProvider<ThemeMode>((ref) => ThemeMode.system);

// ==================== COUNTER PROVIDERS ====================

final zikirCounterProvider = StateNotifierProvider<ZikirCounterNotifier, int>((ref) {
  return ZikirCounterNotifier();
});

class ZikirCounterNotifier extends StateNotifier<int> {
  ZikirCounterNotifier() : super(0);

  void increment() => state++;
  void reset() => state = 0;
  void setValue(int value) => state = value;
}

// ==================== SEARCH PROVIDERS ====================

/// Search results for users
final searchResultsProvider = StateProvider<List<UserModel>>((ref) => []);

/// Country filter for search
final countryFilterProvider = StateProvider<String?>((ref) => null);

// ==================== CONVERSATION PROVIDERS ====================

/// Conversations list for messages
final conversationsProvider = FutureProvider<List<Map<String, dynamic>>>((ref) async {
  final authService = ref.watch(authServiceProvider);
  final firestoreService = ref.watch(firestoreServiceProvider);
  final currentUserId = authService.currentUser?.uid;
  
  if (currentUserId == null) return [];
  
  try {
    // Kullanıcının mesajlarını getir
    final sentMessages = await firestoreService.firestore
        .collection('messages')
        .where('senderId', isEqualTo: currentUserId)
        .orderBy('timestamp', descending: true)
        .get();
    
    final receivedMessages = await firestoreService.firestore
        .collection('messages')
        .where('receiverId', isEqualTo: currentUserId)
        .orderBy('timestamp', descending: true)
        .get();
    
    // Konuşmaları grupla ve döndür
    final conversations = <String, Map<String, dynamic>>{};
    
    for (var doc in sentMessages.docs) {
      final data = doc.data();
      final otherUserId = data['receiverId'];
      conversations[otherUserId] = {
        'otherUserId': otherUserId,
        'lastMessage': data,
        'messageId': doc.id,
      };
    }
    
    for (var doc in receivedMessages.docs) {
      final data = doc.data();
      final otherUserId = data['senderId'];
      if (!conversations.containsKey(otherUserId) || 
          (conversations[otherUserId]!['lastMessage']['timestamp'] as Timestamp)
              .compareTo(data['timestamp'] as Timestamp) < 0) {
        conversations[otherUserId] = {
          'otherUserId': otherUserId,
          'lastMessage': data,
          'messageId': doc.id,
        };
      }
    }
    
    return conversations.values.toList();
  } catch (e) {
    return [];
  }
});

// ==================== HISTORY PROVIDERS ====================

/// Zikir history by period
final zikirHistoryProviderFamily = FutureProvider.family<List<Map<String, dynamic>>, String>((ref, period) async {
  final authService = ref.watch(authServiceProvider);
  final firestoreService = ref.watch(firestoreServiceProvider);
  final userId = authService.currentUser?.uid;
  
  if (userId == null) return [];
  
  try {
    DateTime startDate;
    final now = DateTime.now();
    
    switch (period) {
      case 'today':
        startDate = DateTime(now.year, now.month, now.day);
        break;
      case 'week':
        startDate = now.subtract(const Duration(days: 7));
        break;
      case 'month':
        startDate = DateTime(now.year, now.month, 1);
        break;
      case 'all':
      default:
        startDate = DateTime(2020, 1, 1);
        break;
    }
    
    final snapshot = await firestoreService.firestore
        .collection('user_zikirs')
        .where('userId', isEqualTo: userId)
        .where('createdAt', isGreaterThanOrEqualTo: startDate)
        .orderBy('createdAt', descending: true)
        .limit(100)
        .get();
    
    return snapshot.docs
        .map((doc) => {'id': doc.id, ...doc.data()})
        .toList();
  } catch (e) {
    return [];
  }
});

// ==================== REWARDS PROVIDERS ====================

/// Available rewards in store
final rewardsProvider = FutureProvider<List<Map<String, dynamic>>>((ref) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  try {
    final snapshot = await firestoreService.firestore.collection('rewards').get();
    return snapshot.docs.map((doc) => {'id': doc.id, ...doc.data()}).toList();
  } catch (e) {
    return [];
  }
});

// ==================== CHALLENGES PROVIDERS ====================

/// Available challenges
final challengesProvider = FutureProvider<List<Map<String, dynamic>>>((ref) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  try {
    final snapshot = await firestoreService.firestore.collection('challenges').get();
    return snapshot.docs.map((doc) => {'id': doc.id, ...doc.data()}).toList();
  } catch (e) {
    return [];
  }
});

/// User challenges by user ID
final userChallengesProviderFamily = FutureProvider.family<List<Map<String, dynamic>>, String>((ref, userId) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  try {
    final snapshot = await firestoreService.firestore
        .collection('user_challenges')
        .where('userId', isEqualTo: userId)
        .get();
    return snapshot.docs.map((doc) => {'id': doc.id, ...doc.data()}).toList();
  } catch (e) {
    return [];
  }
});

// ==================== SETTINGS PROVIDERS ====================

/// App settings
final settingsProvider = FutureProvider<Map<String, dynamic>>((ref) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return await firestoreService.getSettings();
});

/// User preferences
final userPreferencesProvider = StateProvider<Map<String, dynamic>>((ref) => {
  'useVibration': true,
  'useSound': true,
  'counterSize': 0.5,
  'enableDailyReminder': false,
  'reminderTime': {'hour': 8, 'minute': 0},
  'hideInAppPurchases': false,
  'showOnlyCounter': false,
  'wholeScreenTappable': false,
});

// Dosya Sonu: lib/core/providers/providers.dart
  
 
====================  
Dosya: C:\src\zikirmo_new\lib\core\services\analytics_service.dart  
====================  
  
// lib/core/services/analytics_service.dart

import 'package:firebase_analytics/firebase_analytics.dart';

class AnalyticsService {
  final FirebaseAnalytics _analytics = FirebaseAnalytics.instance;

  // Analytics servisini başlatma
  Future<void> initialize() async {
    await _analytics.setAnalyticsCollectionEnabled(true);
    print('Analytics service initialized');
  }

  // Genel bir olay kaydetme
  Future<void> logEvent(String name, Map<String, dynamic>? parameters) async {
    await _analytics.logEvent(name: name, parameters: parameters);
  }

  // Giriş olayını kaydetme
  Future<void> logSignIn(String method) async {
    await _analytics.logLogin(loginMethod: method);
  }

  // Sayfa görüntüleme olayını kaydetme
  Future<void> logScreenView(String screenName) async {
    await _analytics.logScreenView(screenName: screenName);
  }
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\core\services\auth_service.dart  
====================  
  
import 'package:firebase_auth/firebase_auth.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:sign_in_with_apple/sign_in_with_apple.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'firestore_service.dart';
import 'analytics_service.dart';

// AuthService provider'ı core/providers/providers.dart'ta tanımlanacak
// Burada sadece sınıfı tanımlıyoruz

class AuthService {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirestoreService firestoreService;
  final AnalyticsService analyticsService;

  AuthService({
    required this.firestoreService, 
    required this.analyticsService,
  });

  User? get currentUser => _auth.currentUser;
  
  // isPremium getter'ı eklendi - async işlem için metodla kontrol edilir
  bool? get isPremium => null; // Gerçek premium durumu checkIfUserIsPremium() ile kontrol edilir

  Stream<User?> get authStateChanges => _auth.authStateChanges();

  // E-posta ve şifre ile giriş
  Future<User?> signInWithEmailAndPassword(String email, String password) async {
    try {
      final userCredential = await _auth.signInWithEmailAndPassword(
        email: email,
        password: password,
      );
      
      await analyticsService.logSignIn('email');
      return userCredential.user;
    } catch (e) {
      rethrow;
    }
  }

  // E-posta ve şifre ile kayıt
  Future<User?> createUserWithEmailAndPassword(
      String email, String password, String nickname) async {
    try {
      final userCredential = await _auth.createUserWithEmailAndPassword(
        email: email,
        password: password,
      );
      final user = userCredential.user;
      
      if (user != null) {
        await firestoreService.createOrUpdateUser(user.uid, {
          'nickname': nickname,
          'email': email,
          'isEmailVerified': user.emailVerified,
          'totalZikirCount': 0,
          'createdAt': DateTime.now().toIso8601String(),
          'isPremium': false,
          'friends': [],
          'points': 0,
          'level': 'levelBeginner',
          'currentStreak': 0,
          'badges': [],
        });
        
        await user.sendEmailVerification();
        await analyticsService.logEvent('user_registration', {'method': 'email'});
      }
      return user;
    } catch (e) {
      rethrow;
    }
  }

  // Google ile giriş
  Future<User?> signInWithGoogle() async {
    try {
      final googleSignIn = GoogleSignIn();
      final googleUser = await googleSignIn.signIn();
      if (googleUser == null) return null;

      final googleAuth = await googleUser.authentication;
      final credential = GoogleAuthProvider.credential(
        accessToken: googleAuth.accessToken,
        idToken: googleAuth.idToken,
      );

      final userCredential = await _auth.signInWithCredential(credential);
      final user = userCredential.user;

      if (user != null) {
        final isNewUser = userCredential.additionalUserInfo?.isNewUser ?? false;
        
        if (isNewUser) {
          await firestoreService.createOrUpdateUser(user.uid, {
            'nickname': user.displayName ?? 'User',
            'email': user.email ?? '',
            'isEmailVerified': user.emailVerified,
            'totalZikirCount': 0,
            'createdAt': DateTime.now().toIso8601String(),
            'isPremium': false,
            'friends': [],
            'points': 0,
            'level': 'levelBeginner',
            'currentStreak': 0,
            'badges': [],
          });
          
          await analyticsService.logEvent('user_registration', {'method': 'google'});
        }
        
        await analyticsService.logSignIn('google');
      }
      return user;
    } catch (e) {
      rethrow;
    }
  }

  // Apple ile giriş
  Future<User?> signInWithApple() async {
    try {
      final appleCredential = await SignInWithApple.getAppleIDCredential(
        scopes: [
          AppleIDAuthorizationScopes.email,
          AppleIDAuthorizationScopes.fullName,
        ],
      );

      final oauthCredential = OAuthProvider("apple.com").credential(
        idToken: appleCredential.identityToken,
        accessToken: appleCredential.authorizationCode,
      );

      final userCredential = await _auth.signInWithCredential(oauthCredential);
      final user = userCredential.user;
      
      if (user != null) {
        final isNewUser = userCredential.additionalUserInfo?.isNewUser ?? false;
        
        if (isNewUser) {
          String nickname = 'User';
          if (appleCredential.givenName != null && appleCredential.familyName != null) {
            nickname = '${appleCredential.givenName} ${appleCredential.familyName}';
          } else if (appleCredential.givenName != null) {
            nickname = appleCredential.givenName!;
          }
          
          await firestoreService.createOrUpdateUser(user.uid, {
            'nickname': nickname,
            'email': user.email ?? '',
            'isEmailVerified': user.emailVerified,
            'totalZikirCount': 0,
            'createdAt': DateTime.now().toIso8601String(),
            'isPremium': false,
            'friends': [],
            'points': 0,
            'level': 'levelBeginner',
            'currentStreak': 0,
            'badges': [],
          });
          
          await analyticsService.logEvent('user_registration', {'method': 'apple'});
        }
        
        await analyticsService.logSignIn('apple');
      }
      return user;
    } catch (e) {
      rethrow;
    }
  }

  // Şifre sıfırlama e-postası gönderme
  Future<void> sendPasswordResetEmail(String email) async {
    try {
      await _auth.sendPasswordResetEmail(email: email);
      await analyticsService.logEvent('password_reset_requested', {'email': email});
    } catch (e) {
      rethrow;
    }
  }

  // E-posta doğrulama işlemi
  Future<void> sendEmailVerification() async {
    try {
      User? user = _auth.currentUser;
      if (user != null && !user.emailVerified) {
        await user.sendEmailVerification();
      }
    } catch (e) {
      rethrow;
    }
  }

  // Kullanıcı şifresini güncelleme
  Future<void> updatePassword(String newPassword) async {
    try {
      User? user = _auth.currentUser;
      if (user != null) {
        await user.updatePassword(newPassword);
      }
    } catch (e) {
      rethrow;
    }
  }

  // Kullanıcı profilini güncelleme
  Future<void> updateProfile({String? displayName, String? photoURL}) async {
    try {
      User? user = _auth.currentUser;
      if (user != null) {
        await user.updateDisplayName(displayName);
        await user.updatePhotoURL(photoURL);
      }
    } catch (e) {
      rethrow;
    }
  }

  // Kullanıcının Premium durumunu kontrol etme
  Future<bool> checkIfUserIsPremium() async {
    try {
      final user = _auth.currentUser;
      if (user == null) return false;
      
      final userData = await firestoreService.getUser(user.uid);
      return userData?.isPremium ?? false;
    } catch (e) {
      return false;
    }
  }

  // Kullanıcının admin olup olmadığını kontrol etme
  Future<bool> checkIfUserIsAdmin() async {
    try {
      final user = _auth.currentUser;
      if (user == null) return false;
      
      final userData = await firestoreService.getUser(user.uid);
      return userData?.customClaims?['admin'] ?? false;
    } catch (e) {
      return false;
    }
  }

  // Çıkış yapma
  Future<void> signOut() async {
    try {
      await analyticsService.logEvent('sign_out', null);
      await _auth.signOut();
    } catch (e) {
      rethrow;
    }
  }

  // Hesabı silme
  Future<void> deleteAccount() async {
    try {
      User? user = _auth.currentUser;
      if (user != null) {
        await firestoreService.deleteUser(user.uid);
        await user.delete();
        await analyticsService.logEvent('account_deleted', null);
      }
    } catch (e) {
      rethrow;
    }
  }
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\core\services\deeplink_service.dart  
====================  
  
// Dosya: lib/core/services/deeplink_service.dart
// Açıklama: Basit URL oluşturma ve işleme yetenekleri ile deeplink işlemlerini yönetir.
// Bu sürüm Firebase Dynamic Links'e bağımlı değildir.

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

final deeplinkServiceProvider = Provider<DeeplinkService>((ref) {
  return DeeplinkService();
});

class DeeplinkService {
  // Deeplink başlatma - sadece temel bir başlatma işlemi yapar
  // Gerçek deeplink dinleme şu anda devre dışı
  Future<void> initialize(BuildContext context) async {
    // Bu yöntem şu anda sadece bir yer tutucu işlevi görüyor
    // Gerçek deeplink dinleme fonksiyonları ileriki aşamalarda eklenebilir
    debugPrint('DeeplinkService initialized in simplified mode');
  }

  // Deeplink işleme - bir Uri alır ve işler
  void handleDeepLink(Uri? deepLink, BuildContext context) {
    if (deepLink == null) return;

    final pathSegments = deepLink.pathSegments;
    
    if (pathSegments.isEmpty) {
      // URL parametrelerine göre işlem yap
      final queryParams = deepLink.queryParameters;
      
      // Arkadaş daveti
      if (queryParams.containsKey('userId')) {
        final userId = queryParams['userId'];
        Navigator.pushNamed(context, '/add_friend', arguments: userId);
      }
      
      // Zikir paylaşımı
      else if (queryParams.containsKey('zikirId')) {
        final zikirId = queryParams['zikirId'];
        Navigator.pushNamed(context, '/zikir_counter', arguments: {'zikirId': zikirId});
      }
      
      // Premium kampanya
      else if (queryParams.containsKey('campaignId')) {
        final campaignId = queryParams['campaignId'];
        Navigator.pushNamed(context, '/premium', arguments: {'campaignId': campaignId});
      }
      
      // Doğrulama
      else if (queryParams.containsKey('code')) {
        final code = queryParams['code'];
        Navigator.pushNamed(context, '/verification', arguments: {'code': code});
      }
    } else {
      // Path segment'e göre işlem yap
      switch (pathSegments[0]) {
        case 'invite':
          if (pathSegments.length > 1) {
            Navigator.pushNamed(context, '/add_friend', arguments: pathSegments[1]);
          }
          break;
        case 'zikir':
          if (pathSegments.length > 1) {
            Navigator.pushNamed(context, '/zikir_counter', arguments: {'zikirId': pathSegments[1]});
          }
          break;
        case 'premium':
          if (pathSegments.length > 1) {
            Navigator.pushNamed(context, '/premium', arguments: {'campaignId': pathSegments[1]});
          }
          break;
        case 'verify':
          if (pathSegments.length > 1) {
            Navigator.pushNamed(context, '/verification', arguments: {'code': pathSegments[1]});
          }
          break;
      }
    }
  }

  // Arkadaş davet bağlantısı oluşturma (basitleştirilmiş)
  String createInviteLink(String userId) {
    return 'https://zikirmatik.com/invite?userId=$userId';
    // Bu URL'ler şu anda sadece formatı gösterir, gerçek deeplink fonksiyonalitesi için
    // platform-spesifik yapılandırma gerekecektir
  }

  // Zikir paylaşım bağlantısı oluşturma (basitleştirilmiş)
  String createZikirShareLink(String zikirId) {
    return 'https://zikirmatik.com/zikir?zikirId=$zikirId';
  }

  // Premium kampanya bağlantısı oluşturma (basitleştirilmiş)
  String createPremiumCampaignLink(String campaignId) {
    return 'https://zikirmatik.com/premium?campaignId=$campaignId';
  }

  // Doğrulama bağlantısı oluşturma (basitleştirilmiş)
  String createVerificationLink(String verificationCode) {
    return 'https://zikirmatik.com/verify?code=$verificationCode';
  }
}
  
 
====================  
Dosya: C:\src\zikirmo_new\lib\core\services\firestore_service-chat-gpt.dart  
====================  
  
// Dosya: lib/core/services/firestore_service.dart
// Yol: C:\src\zikirmo_new\lib\core\services\firestore_service.dart

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../models/user_model.dart';
import '../models/zikir_model.dart';
import '../models/category_model.dart';
import '../models/user_zikir_model.dart';
import '../models/friend_model.dart';

// FieldValue artık Cloud Firestore paketinden geliyor - ek import gerekmez

final firestoreServiceProvider = Provider<FirestoreService>((ref) {
  return FirestoreService();
});

class FirestoreService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  FirebaseFirestore get firestore => _firestore;

  // ==================== KULLANICI İŞLEMLERİ ====================
  
  Future<UserModel?> getUser(String userId) async {
    try {
      final doc = await _firestore.collection('users').doc(userId).get();
      return doc.exists ? UserModel.fromJson(doc.data() ?? {}, userId) : null;
    } catch (e) {
      print('getUser error: $e');
      return null;
    }
  }

  Future<bool> createOrUpdateUser(String userId, Map<String, dynamic> data) async {
    try {
      await _firestore.collection('users').doc(userId).set(data, SetOptions(merge: true));
      return true;
    } catch (e) {
      print('createOrUpdateUser error: $e');
      return false;
    }
  }

  Future<bool> updateUser(String userId, Map<String, dynamic> data) async {
    try {
      await _firestore.collection('users').doc(userId).update(data);
      return true;
    } catch (e) {
      print('updateUser error: $e');
      return false;
    }
  }

  Future<bool> deleteUser(String userId) async {
    try {
      await _deleteUserSubcollections(userId);
      await _firestore.collection('users').doc(userId).delete();
      return true;
    } catch (e) {
      print('deleteUser error: $e');
      return false;
    }
  }

  Future<void> _deleteUserSubcollections(String userId) async {
    try {
      final userZikirs = await _firestore.collection('users').doc(userId).collection('user_zikirs').get();
      for (var doc in userZikirs.docs) {
        await doc.reference.delete();
      }
    } catch (e) {
      print('_deleteUserSubcollections error: $e');
      throw e;
    }
  }

  // ==================== ZİKİR İŞLEMLERİ ====================

  Future<List<ZikirModel>> getPopularZikirs({int limit = 5}) async {
    try {
      final snapshot = await _firestore.collection('zikirler')
          .orderBy('popularity', descending: true)
          .limit(limit)
          .get();
      return snapshot.docs.map((doc) => ZikirModel.fromMap(doc.id, doc.data())).toList();
    } catch (e) {
      print('getPopularZikirs error: $e');
      return [];
    }
  }

  Future<List<ZikirModel>> getSuggestedZikirs({int limit = 10}) async {
    try {
      final now = DateTime.now();
      final weekday = now.weekday;
      final snapshot = await _firestore.collection('zikirler')
          .where('suggestedDays', arrayContains: weekday)
          .limit(limit)
          .get();
      if (snapshot.docs.length < limit) {
        final additional = await _firestore.collection('zikirler')
            .orderBy('popularity', descending: true)
            .limit(limit - snapshot.docs.length)
            .get();
        final result = snapshot.docs.map((d) => ZikirModel.fromMap(d.id, d.data())).toList();
        result.addAll(additional.docs.map((d) => ZikirModel.fromMap(d.id, d.data())));
        return result;
      }
      return snapshot.docs.map((doc) => ZikirModel.fromMap(doc.id, doc.data())).toList();
    } catch (e) {
      print('getSuggestedZikirs error: $e');
      return [];
    }
  }

  Future<ZikirModel?> getZikir(String zikirId) async {
    try {
      final doc = await _firestore.collection('zikirler').doc(zikirId).get();
      return doc.exists ? ZikirModel.fromMap(doc.id, doc.data() ?? {}) : null;
    } catch (e) {
      print('getZikir error: $e');
      return null;
    }
  }

  Future<bool> updateZikirPopularity(String zikirId) async {
    try {
      await _firestore.collection('zikirler').doc(zikirId).update({
        'popularity': FieldValue.increment(1),
      });
      return true;
    } catch (e) {
      print('updateZikirPopularity error: $e');
      return false;
    }
  }

  // ==================== KATEGORİ İŞLEMLERİ ====================

  Future<List<CategoryModel>> getCategories() async {
    try {
      final snapshot = await _firestore.collection('categories')
          .orderBy('orderIndex')
          .where('isActive', isEqualTo: true)
          .get();
      return snapshot.docs.map((doc) => CategoryModel.fromMap(doc.id, doc.data())).toList();
    } catch (e) {
      print('getCategories error: $e');
      return [];
    }
  }

  Future<CategoryModel?> getCategory(String categoryId) async {
    try {
      final doc = await _firestore.collection('categories').doc(categoryId).get();
      return doc.exists ? CategoryModel.fromMap(doc.id, doc.data() ?? {}) : null;
    } catch (e) {
      print('getCategory error: $e');
      return null;
    }
  }

  Future<List<ZikirModel>> getZikirsByCategory(String categoryId) async {
    try {
      final snapshot = await _firestore.collection('zikirler')
          .where('categoryId', isEqualTo: categoryId)
          .orderBy('popularity', descending: true)
          .get();
      return snapshot.docs.map((doc) => ZikirModel.fromMap(doc.id, doc.data())).toList();
    } catch (e) {
      print('getZikirsByCategory error: $e');
      return [];
    }
  }

  // ==================== ARKADAŞ İŞLEMLERİ ====================

  Future<List<UserModel>> getFriends(String userId) async {
    try {
      final user = await getUser(userId);
      if (user == null || user.friends.isEmpty) return [];
      final list = <UserModel>[];
      for (var fid in user.friends) {
        final f = await getUser(fid);
        if (f != null) list.add(f);
      }
      return list;
    } catch (e) {
      print('getFriends error: $e');
      return [];
    }
  }

  Future<List<UserModel>> getFriendRequests(String userId) async {
    try {
      final snap = await _firestore.collection('friend_requests')
          .where('receiverId', isEqualTo: userId)
          .where('status', isEqualTo: 'pending')
          .get();
      if (snap.docs.isEmpty) return [];
      final reqs = <UserModel>[];
      for (var doc in snap.docs) {
        final data = doc.data();
        final rid = data['requesterId'] as String;
        final u = await getUser(rid);
        if (u != null) reqs.add(u);
      }
      return reqs;
    } catch (e) {
      print('getFriendRequests error: $e');
      return [];
    }
  }

  Future<bool> addFriend(String userId, String friendId) async {
    try {
      await _firestore.collection('friend_requests').add({
        'requesterId': userId,
        'receiverId': friendId,
        'status': 'pending',
        'createdAt': FieldValue.serverTimestamp(),
      });
      return true;
    } catch (e) {
      print('addFriend error: $e');
      return false;
    }
  }

  Future<bool> acceptFriendRequest(String userId, String friendId) async {
    try {
      final snap = await _firestore.collection('friend_requests')
          .where('requesterId', isEqualTo: friendId)
          .where('receiverId', isEqualTo: userId)
          .where('status', isEqualTo: 'pending')
          .get();
      if (snap.docs.isEmpty) return false;
      await snap.docs.first.reference.update({
        'status': 'accepted',
        'updatedAt': FieldValue.serverTimestamp(),
      });
      await _firestore.collection('users').doc(userId).update({
        'friends': FieldValue.arrayUnion([friendId]),
      });
      await _firestore.collection('users').doc(friendId).update({
        'friends': FieldValue.arrayUnion([userId]),
      });
      return true;
    } catch (e) {
      print('acceptFriendRequest error: $e');
      return false;
    }
  }

  Future<bool> rejectFriendRequest(String userId, String friendId) async {
    try {
      final snap = await _firestore.collection('friend_requests')
          .where('requesterId', isEqualTo: friendId)
          .where('receiverId', isEqualTo: userId)
          .where('status', isEqualTo: 'pending')
          .get();
      if (snap.docs.isEmpty) return false;
      await snap.docs.first.reference.update({
        'status': 'rejected',
        'updatedAt': FieldValue.serverTimestamp(),
      });
      return true;
    } catch (e) {
      print('rejectFriendRequest error: $e');
      return false;
    }
  }

  Future<bool> removeFriend(String userId, String friendId) async {
    try {
      await _firestore.collection('users').doc(userId).update({
        'friends': FieldValue.arrayRemove([friendId]),
      });
      await _firestore.collection('users').doc(friendId).update({
        'friends': FieldValue.arrayRemove([userId]),
      });
      return true;
    } catch (e) {
      print('removeFriend error: $e');
      return false;
    }
  }

  Future<List<UserModel>> searchUsers(String query, {String? countryFilter}) async {
    try {
      QuerySnapshot snap;
      if (countryFilter != null) {
        snap = await _firestore.collection('users')
            .where('nickname', isGreaterThanOrEqualTo: query)
            .where('nickname', isLessThanOrEqualTo: query + '\uf8ff')
            .where('country', isEqualTo: countryFilter)
            .limit(10)
            .get();
      } else {
        snap = await _firestore.collection('users')
            .where('nickname', isGreaterThanOrEqualTo: query)
            .where('nickname', isLessThanOrEqualTo: query + '\uf8ff')
            .limit(10)
            .get();
      }
      return snap.docs.map((d) => UserModel.fromJson(d.data() as Map<String,dynamic>, d.id)).toList();
    } catch (e) {
      print('searchUsers error: $e');
      return [];
    }
  }

  // ==================== MESAJLAŞMA İŞLEMLERİ ====================

  Future<bool> sendMessage({required String senderId, required String receiverId, required String messageText}) async {
    try {
      await _firestore.collection('messages').add({
        'senderId': senderId,
        'receiverId': receiverId,
        'text': messageText,
        'timestamp': FieldValue.serverTimestamp(),
        'isRead': false,
      });
      return true;
    } catch (e) {
      print('sendMessage error: $e');
      return false;
    }
  }

  // ==================== HEDİYE İŞLEMLERİ ====================

  Future<bool> sendGift({required String senderId, required String receiverId,	required String giftId, required String giftType, required int giftPrice}) async {
    try {
      await _firestore.collection('users').doc(senderId).update({'points': FieldValue.increment(-giftPrice)});
      await _firestore.collection('gifts').add({'senderId': senderId,'receiverId': receiverId,'giftId': giftId,'giftType': giftType,'giftPrice': giftPrice,'timestamp': FieldValue.serverTimestamp(),});
      return true;
    } catch (e) {
      print('sendGift error: $e');
      return false;
    }
  }

  // ==================== PUAN VE LİDERLİK ====================

  Future<int> getUserPoints(String userId) async { ... } // (Devamı yukarıdaki pattern ile)
  
  /// Admin ayarları için settings koleksiyonuna erişim
  Future<bool> setSettings(Map<String, dynamic> settings) async { ... }
  Future<Map<String, dynamic>> getSettings() async { ... }

  /// Kullanıcının zikir ilerlemesini güncelle
  Future<bool> updateUserZikir({ required String userId, required String zikirId, required int currentCount, required int targetCount, bool? isCompleted, Duration? timeSpent, }) async { ... }

  Future<Map<String, dynamic>> getUserStats(String userId) async { ... }

  Future<List<UserZikirModel>> getUserZikirHistory(String userId, {int limit = 50, DateTime? startDate, DateTime? endDate,}) async { ... }

  /// Bildirim oluştur
  Future<bool> createNotification({required String userId, required String title, required String message, required String type, Map<String, dynamic>? data,}) async { ... }

  /// Batch işlemler için helper
  WriteBatch batch() => _firestore.batch();

  /// Transaction işlemler için helper
  Future<T> runTransaction<T>(Future<T> Function(Transaction) updateFunction) async => _firestore.runTransaction(updateFunction);   
}

// Dosya Sonu: lib/core/services/firestore_service.dart
// Yol: C:\src\zikirmo_new\lib\core\services\firestore_service.dart
  
 
====================  
Dosya: C:\src\zikirmo_new\lib\core\services\firestore_service.dart  
====================  
  
// Dosya: lib/core/services/firestore_service.dart
// Yol: C:\src\zikirmo_new\lib\core\services\firestore_service.dart
// Açıklama: Tüm eksik methodlar eklendi ve FieldValue import sorunu çözüldü

import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/user_model.dart';
import '../models/zikir_model.dart';
import '../models/category_model.dart';
import '../models/user_zikir_model.dart';
import '../models/friend_model.dart';

class FirestoreService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  FirebaseFirestore get firestore => _firestore;

  // ==================== KULLANICI İŞLEMLERİ ====================
  
  Future<UserModel?> getUser(String userId) async {
    try {
      final doc = await _firestore.collection('users').doc(userId).get();
      return doc.exists ? UserModel.fromJson(doc.data() ?? {}, userId) : null;
    } catch (e) {
      print('getUser error: $e');
      return null;
    }
  }

  Future<bool> createOrUpdateUser(String userId, Map<String, dynamic> data) async {
    try {
      await _firestore.collection('users').doc(userId).set(data, SetOptions(merge: true));
      return true;
    } catch (e) {
      print('createOrUpdateUser error: $e');
      return false;
    }
  }

  Future<bool> updateUser(String userId, Map<String, dynamic> data) async {
    try {
      await _firestore.collection('users').doc(userId).update(data);
      return true;
    } catch (e) {
      print('updateUser error: $e');
      return false;
    }
  }

  Future<bool> deleteUser(String userId) async {
    try {
      await _deleteUserSubcollections(userId);
      await _firestore.collection('users').doc(userId).delete();
      return true;
    } catch (e) {
      print('deleteUser error: $e');
      return false;
    }
  }

  Future<void> _deleteUserSubcollections(String userId) async {
    try {
      final userZikirs = await _firestore.collection('users').doc(userId).collection('user_zikirs').get();
      for (var doc in userZikirs.docs) {
        await doc.reference.delete();
      }
    } catch (e) {
      print('_deleteUserSubcollections error: $e');
      throw e;
    }
  }

  // ==================== ZİKİR İŞLEMLERİ ====================

  Future<List<ZikirModel>> getPopularZikirs({int limit = 5}) async {
    try {
      final snapshot = await _firestore.collection('zikirler')
          .orderBy('popularity', descending: true)
          .limit(limit)
          .get();
      
      return snapshot.docs.map((doc) => ZikirModel.fromMap(doc.id, doc.data())).toList();
    } catch (e) {
      print('getPopularZikirs error: $e');
      return [];
    }
  }

  Future<List<ZikirModel>> getSuggestedZikirs({int limit = 10}) async {
    try {
      final now = DateTime.now();
      final weekday = now.weekday;
      
      final snapshot = await _firestore.collection('zikirler')
          .where('suggestedDays', arrayContains: weekday)
          .limit(limit)
          .get();
      
      if (snapshot.docs.length < limit) {
        final additionalSnapshot = await _firestore.collection('zikirler')
            .orderBy('popularity', descending: true)
            .limit(limit - snapshot.docs.length)
            .get();
        
        final result = snapshot.docs.map((doc) => ZikirModel.fromMap(doc.id, doc.data())).toList();
        result.addAll(additionalSnapshot.docs.map((doc) => ZikirModel.fromMap(doc.id, doc.data())));
        return result;
      }
      
      return snapshot.docs.map((doc) => ZikirModel.fromMap(doc.id, doc.data())).toList();
    } catch (e) {
      print('getSuggestedZikirs error: $e');
      return [];
    }
  }

  Future<ZikirModel?> getZikir(String zikirId) async {
    try {
      final doc = await _firestore.collection('zikirler').doc(zikirId).get();
      return doc.exists ? ZikirModel.fromMap(doc.id, doc.data() ?? {}) : null;
    } catch (e) {
      print('getZikir error: $e');
      return null;
    }
  }

  Future<bool> updateZikirPopularity(String zikirId) async {
    try {
      await _firestore.collection('zikirler').doc(zikirId).update({
        'popularity': FieldValue.increment(1),
      });
      return true;
    } catch (e) {
      print('updateZikirPopularity error: $e');
      return false;
    }
  }

  // ==================== KATEGORİ İŞLEMLERİ ====================

  Future<List<CategoryModel>> getCategories() async {
    try {
      final snapshot = await _firestore.collection('categories')
          .orderBy('orderIndex')
          .where('isActive', isEqualTo: true)
          .get();
      
      return snapshot.docs.map((doc) => CategoryModel.fromMap(doc.id, doc.data())).toList();
    } catch (e) {
      print('getCategories error: $e');
      return [];
    }
  }

  Future<CategoryModel?> getCategory(String categoryId) async {
    try {
      final doc = await _firestore.collection('categories').doc(categoryId).get();
      return doc.exists ? CategoryModel.fromMap(doc.id, doc.data() ?? {}) : null;
    } catch (e) {
      print('getCategory error: $e');
      return null;
    }
  }

  Future<List<ZikirModel>> getZikirsByCategory(String categoryId) async {
    try {
      final snapshot = await _firestore.collection('zikirler')
          .where('categoryId', isEqualTo: categoryId)
          .orderBy('popularity', descending: true)
          .get();
      
      return snapshot.docs.map((doc) => ZikirModel.fromMap(doc.id, doc.data())).toList();
    } catch (e) {
      print('getZikirsByCategory error: $e');
      return [];
    }
  }

  // ==================== ARKADAŞ İŞLEMLERİ ====================

  Future<List<UserModel>> getFriends(String userId) async {
    try {
      final user = await getUser(userId);
      if (user == null || user.friends.isEmpty) return [];

      final friends = <UserModel>[];
      for (var friendId in user.friends) {
        final friend = await getUser(friendId);
        if (friend != null) friends.add(friend);
      }
      return friends;
    } catch (e) {
      print('getFriends error: $e');
      return [];
    }
  }

  Future<List<UserModel>> getFriendRequests(String userId) async {
    try {
      final snapshot = await _firestore.collection('friend_requests')
          .where('receiverId', isEqualTo: userId)
          .where('status', isEqualTo: 'pending')
          .get();
      
      if (snapshot.docs.isEmpty) return [];
      
      final requests = <UserModel>[];
      for (var doc in snapshot.docs) {
        final data = doc.data();
        final requesterId = data['requesterId'] as String;
        final requester = await getUser(requesterId);
        if (requester != null) requests.add(requester);
      }
      
      return requests;
    } catch (e) {
      print('getFriendRequests error: $e');
      return [];
    }
  }

  Future<bool> addFriend(String userId, String friendId) async {
    try {
      await _firestore.collection('friend_requests').add({
        'requesterId': userId,
        'receiverId': friendId,
        'status': 'pending',
        'createdAt': FieldValue.serverTimestamp(),
      });
      
      return true;
    } catch (e) {
      print('addFriend error: $e');
      return false;
    }
  }

  Future<bool> acceptFriendRequest(String userId, String friendId) async {
    try {
      final requestsSnapshot = await _firestore.collection('friend_requests')
          .where('requesterId', isEqualTo: friendId)
          .where('receiverId', isEqualTo: userId)
          .where('status', isEqualTo: 'pending')
          .get();
      
      if (requestsSnapshot.docs.isEmpty) return false;
      
      await requestsSnapshot.docs.first.reference.update({
        'status': 'accepted',
        'updatedAt': FieldValue.serverTimestamp(),
      });
      
      await _firestore.collection('users').doc(userId).update({
        'friends': FieldValue.arrayUnion([friendId]),
      });
      
      await _firestore.collection('users').doc(friendId).update({
        'friends': FieldValue.arrayUnion([userId]),
      });
      
      return true;
    } catch (e) {
      print('acceptFriendRequest error: $e');
      return false;
    }
  }

  Future<bool> rejectFriendRequest(String userId, String friendId) async {
    try {
      final requestsSnapshot = await _firestore.collection('friend_requests')
          .where('requesterId', isEqualTo: friendId)
          .where('receiverId', isEqualTo: userId)
          .where('status', isEqualTo: 'pending')
          .get();
      
      if (requestsSnapshot.docs.isEmpty) return false;
      
      await requestsSnapshot.docs.first.reference.update({
        'status': 'rejected',
        'updatedAt': FieldValue.serverTimestamp(),
      });
      
      return true;
    } catch (e) {
      print('rejectFriendRequest error: $e');
      return false;
    }
  }

  Future<bool> removeFriend(String userId, String friendId) async {
    try {
      await _firestore.collection('users').doc(userId).update({
        'friends': FieldValue.arrayRemove([friendId]),
      });
      
      await _firestore.collection('users').doc(friendId).update({
        'friends': FieldValue.arrayRemove([userId]),
      });
      
      return true;
    } catch (e) {
      print('removeFriend error: $e');
      return false;
    }
  }

  Future<List<UserModel>> searchUsers(String query, {String? countryFilter}) async {
    try {
      QuerySnapshot snapshot;
      
      if (countryFilter != null) {
        snapshot = await _firestore.collection('users')
            .where('nickname', isGreaterThanOrEqualTo: query)
            .where('nickname', isLessThanOrEqualTo: query + '\uf8ff')
            .where('country', isEqualTo: countryFilter)
            .limit(10)
            .get();
      } else {
        snapshot = await _firestore.collection('users')
            .where('nickname', isGreaterThanOrEqualTo: query)
            .where('nickname', isLessThanOrEqualTo: query + '\uf8ff')
            .limit(10)
            .get();
      }
      
      return snapshot.docs.map((doc) => UserModel.fromJson(doc.data() as Map<String, dynamic>, doc.id)).toList();
    } catch (e) {
      print('searchUsers error: $e');
      return [];
    }
  }

  // ==================== MESAJLAŞMA İŞLEMLERİ ====================

  Future<bool> sendMessage({
    required String senderId, 
    required String receiverId, 
    required String messageText
  }) async {
    try {
      await _firestore.collection('messages').add({
        'senderId': senderId,
        'receiverId': receiverId,
        'text': messageText,
        'timestamp': FieldValue.serverTimestamp(),
        'isRead': false,
      });
      
      return true;
    } catch (e) {
      print('sendMessage error: $e');
      return false;
    }
  }

  // ==================== HEDİYE İŞLEMLERİ ====================

  Future<bool> sendGift({
    required String senderId,
    required String receiverId,
    required String giftId,
    required String giftType,
    required int giftPrice
  }) async {
    try {
      await _firestore.collection('users').doc(senderId).update({
        'points': FieldValue.increment(-giftPrice),
      });
      
      await _firestore.collection('gifts').add({
        'senderId': senderId,
        'receiverId': receiverId,
        'giftId': giftId,
        'giftType': giftType,
        'giftPrice': giftPrice,
        'timestamp': FieldValue.serverTimestamp(),
      });
      
      return true;
    } catch (e) {
      print('sendGift error: $e');
      return false;
    }
  }

  // ==================== PUAN VE LİDERLİK ====================

  Future<int> getUserPoints(String userId) async {
    try {
      final user = await getUser(userId);
      return user?.points ?? 0;
    } catch (e) {
      print('getUserPoints error: $e');
      return 0;
    }
  }

  Future<List<UserModel>> getLeaderboard(String period, {int limit = 20}) async {
    try {
      final usersSnapshot = await _firestore.collection('users')
          .orderBy('points', descending: true)
          .limit(limit)
          .get();
      
      return usersSnapshot.docs
          .map((doc) => UserModel.fromJson(doc.data() as Map<String, dynamic>, doc.id))
          .toList();
    } catch (e) {
      print('getLeaderboard error: $e');
      return [];
    }
  }

  // ==================== CHALLENGE İŞLEMLERİ ====================

  Future<bool> startChallenge(String userId, String challengeId) async {
    try {
      await _firestore.collection('user_challenges').add({
        'userId': userId,
        'challengeId': challengeId,
        'progress': 0,
        'completed': false,
        'startedAt': FieldValue.serverTimestamp(),
      });
      return true;
    } catch (e) {
      print('startChallenge error: $e');
      return false;
    }
  }

  // ==================== ADMİN AYARLARI (EKSİK METHODLAR) ====================

  /// Admin ayarları için settings koleksiyonuna erişim
  Future<bool> setSettings(Map<String, dynamic> settings) async {
    try {
      await _firestore.collection('settings').doc('app_settings').set(settings, SetOptions(merge: true));
      return true;
    } catch (e) {
      print('setSettings error: $e');
      return false;
    }
  }

  /// Admin ayarlarını getir
  Future<Map<String, dynamic>> getSettings() async {
    try {
      final doc = await _firestore.collection('settings').doc('app_settings').get();
      return doc.exists ? doc.data() ?? {} : {};
    } catch (e) {
      print('getSettings error: $e');
      return {};
    }
  }

  // ==================== KULLANICI ZİKİR İŞLEMLERİ ====================

  /// Kullanıcının zikir ilerlemesini güncelle
  Future<bool> updateUserZikir({
    required String userId,
    required String zikirId,
    required int currentCount,
    required int targetCount,
    bool? isCompleted,
    Duration? timeSpent,
  }) async {
    try {
      final userZikirData = {
        'userId': userId,
        'zikirId': zikirId,
        'currentCount': currentCount,
        'targetCount': targetCount,
        'updatedAt': FieldValue.serverTimestamp(),
      };

      if (isCompleted != null) {
        userZikirData['isCompleted'] = isCompleted;
        if (isCompleted) {
          userZikirData['completedAt'] = FieldValue.serverTimestamp();
        }
      }

      if (timeSpent != null) {
        userZikirData['timeSpentSeconds'] = timeSpent.inSeconds;
      }

      // Kullanıcının bu zikir için mevcut kaydını kontrol et
      final existingQuery = await _firestore
          .collection('user_zikirs')
          .where('userId', isEqualTo: userId)
          .where('zikirId', isEqualTo: zikirId)
          .limit(1)
          .get();

      if (existingQuery.docs.isNotEmpty) {
        // Mevcut kayıt varsa güncelle
        await existingQuery.docs.first.reference.update(userZikirData);
      } else {
        // Yeni kayıt oluştur
        userZikirData['createdAt'] = FieldValue.serverTimestamp();
        await _firestore.collection('user_zikirs').add(userZikirData);
      }

      // Kullanıcının toplam zikir sayısını güncelle
      await updateUser(userId, {
        'totalZikirCount': FieldValue.increment(1),
        'lastActivity': FieldValue.serverTimestamp(),
      });

      return true;
    } catch (e) {
      print('updateUserZikir error: $e');
      return false;
    }
  }

  /// Kullanıcının zikir istatistiklerini getir
  Future<Map<String, dynamic>> getUserStats(String userId) async {
    try {
      final user = await getUser(userId);
      if (user == null) return {};

      // Kullanıcının zikir geçmişini getir
      final userZikirsSnapshot = await _firestore
          .collection('user_zikirs')
          .where('userId', isEqualTo: userId)
          .get();

      final totalZikirs = userZikirsSnapshot.docs.length;
      final completedZikirs = userZikirsSnapshot.docs
          .where((doc) => doc.data()['isCompleted'] == true)
          .length;

      // Bu ayın zikirleri
      final now = DateTime.now();
      final monthStart = DateTime(now.year, now.month, 1);
      final thisMonthZikirs = userZikirsSnapshot.docs
          .where((doc) {
            final createdAt = (doc.data()['createdAt'] as Timestamp?)?.toDate();
            return createdAt != null && createdAt.isAfter(monthStart);
          })
          .length;

      return {
        'totalZikirs': totalZikirs,
        'completedZikirs': completedZikirs,
        'thisMonthZikirs': thisMonthZikirs,
        'currentStreak': user.currentStreak,
        'longestStreak': user.longestStreak ?? 0,
        'points': user.points,
        'level': user.level,
        'badges': user.badges.length,
      };
    } catch (e) {
      print('getUserStats error: $e');
      return {};
    }
  }

  /// Kullanıcının zikir geçmişini getir
  Future<List<UserZikirModel>> getUserZikirHistory(
    String userId, {
    int limit = 50,
    DateTime? startDate,
    DateTime? endDate,
  }) async {
    try {
      Query query = _firestore
          .collection('user_zikirs')
          .where('userId', isEqualTo: userId)
          .orderBy('createdAt', descending: true);

      if (startDate != null) {
        query = query.where('createdAt', isGreaterThanOrEqualTo: Timestamp.fromDate(startDate));
      }

      if (endDate != null) {
        query = query.where('createdAt', isLessThanOrEqualTo: Timestamp.fromDate(endDate));
      }

      final snapshot = await query.limit(limit).get();

      return snapshot.docs
          .map((doc) => UserZikirModel.fromFirestore(doc))
          .toList();
    } catch (e) {
      print('getUserZikirHistory error: $e');
      return [];
    }
  }

  /// Bildirim oluştur
  Future<bool> createNotification({
    required String userId,
    required String title,
    required String message,
    required String type,
    Map<String, dynamic>? data,
  }) async {
    try {
      await _firestore.collection('notifications').add({
        'userId': userId,
        'title': title,
        'message': message,
        'type': type,
        'data': data,
        'isRead': false,
        'createdAt': FieldValue.serverTimestamp(),
      });
      return true;
    } catch (e) {
      print('createNotification error: $e');
      return false;
    }
  }

  /// Batch işlemler için helper
  WriteBatch batch() {
    return _firestore.batch();
  }

  /// Transaction işlemler için helper
  Future<T> runTransaction<T>(
    Future<T> Function(Transaction transaction) updateFunction,
  ) async {
    return await _firestore.runTransaction(updateFunction);
  }
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\core\services\haptic_service.dart  
====================  
  
// lib/core/services/haptic_service.dart

import 'package:flutter/services.dart';

class HapticService {
  // Hafif titreşim (zikir sayarken)
  Future<void> lightImpact() async {
    await HapticFeedback.lightImpact();
  }
  
  // Orta şiddetli titreşim
  Future<void> mediumImpact() async {
    await HapticFeedback.mediumImpact();
  }
  
  // Güçlü titreşim (hedef tamamlama)
  Future<void> heavyImpact() async {
    await HapticFeedback.heavyImpact();
  }
  
  // Titreşim (temel)
  Future<void> vibrate() async {
    await HapticFeedback.vibrate();
  }
  
  // Seçim tıklaması
  Future<void> selectionClick() async {
    await HapticFeedback.selectionClick();
  }
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\core\services\messaging_service.dart  
====================  
  
// lib/core/services/messaging_service.dart

import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'notification_service.dart';

final messagingServiceProvider = Provider<MessagingService>((ref) {
  final notificationService = ref.watch(notificationServiceProvider);
  return MessagingService(notificationService);
});

class MessagingService {
  final NotificationService _notificationService;
  final FirebaseMessaging _messaging = FirebaseMessaging.instance;

  MessagingService(this._notificationService);

  Future<void> initialize() async {
    try {
      // İzinleri iste
      final settings = await _messaging.requestPermission(
        alert: true,
        badge: true,
        sound: true,
        provisional: false,
      );
      
      debugPrint('Firebase Messaging permission status: ${settings.authorizationStatus}');

      // FCM token al
      final token = await _messaging.getToken();
      debugPrint('Firebase Messaging token: $token');

      // Mesaj geldiğinde
      FirebaseMessaging.onMessage.listen((RemoteMessage message) {
        final notification = message.notification;
        if (notification != null) {
          _notificationService.showNotification(
            notification.title ?? 'Yeni Bildirim',
            notification.body ?? '',
          );
        }
      });

      debugPrint('Messaging service initialized successfully');
    } catch (e) {
      debugPrint('Error initializing messaging service: $e');
    }
  }
}
  
 
====================  
Dosya: C:\src\zikirmo_new\lib\core\services\notification_service.dart  
====================  
  
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

final notificationServiceProvider = Provider<NotificationService>((ref) {
  return NotificationService();
});

class NotificationService {
  Future<void> initialize() async {
    // Notification service başlatma işlemleri
    // flutter_local_notifications kaldırıldığı için basit implementasyon
    print('Notification service initialized (simplified mode)');
  }

  Future<void> showNotification(String title, String body, {int id = 0}) async {
    // Basit notification gösterimi
    print('Notification: $title - $body');
    // TODO: Platform-specific notification implementation
  }
  
  Future<void> scheduleDailyNotification(String title, String body, int hour, int minute) async {
    // Günlük hatırlatıcı programlama
    print('Daily notification scheduled: $title at $hour:$minute');
    // TODO: Platform-specific daily notification scheduling
  }

  Future<void> cancelAllNotifications() async {
    // Tüm bildirimleri iptal etme
    print('All notifications cancelled');
    // TODO: Platform-specific notification cancellation
  }
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\core\services\purchase_service.dart  
====================  
  
// lib/core/services/purchase_service.dart

import 'dart:async';
import 'package:in_app_purchase/in_app_purchase.dart';
import 'auth_service.dart';

class SubscriptionDetails {
  final String planType; // 'monthly', 'yearly', 'lifetime'
  final DateTime? expiryDate;
  
  SubscriptionDetails({required this.planType, this.expiryDate});
}

class PurchaseService {
  final AuthService _authService;
  
  PurchaseService(this._authService);
  
  // Ürünleri yükle
  Future<List<ProductDetails>> loadProducts() async {
    final bool isAvailable = await InAppPurchase.instance.isAvailable();
    if (!isAvailable) {
      return [];
    }
    
    const Set<String> productIds = {
      'com.zikirmo.monthly_subscription',
      'com.zikirmo.yearly_subscription',
      'com.zikirmo.lifetime_subscription',
    };
    
    final ProductDetailsResponse response = 
        await InAppPurchase.instance.queryProductDetails(productIds);
        
    return response.productDetails;
  }
  
  // Satın alma işlemi
  Future<bool> purchase(String planType) async {
    final products = await loadProducts();
    
    String targetId;
    switch (planType) {
      case 'monthly':
        targetId = 'com.zikirmo.monthly_subscription';
        break;
      case 'yearly':
        targetId = 'com.zikirmo.yearly_subscription';
        break;
      case 'lifetime':
        targetId = 'com.zikirmo.lifetime_subscription';
        break;
      default:
        return false;
    }
    
    final product = products.firstWhere(
      (p) => p.id == targetId,
      orElse: () => throw Exception('Ürün bulunamadı'),
    );
    
    final purchaseParam = PurchaseParam(productDetails: product);
    
    // Abonelik veya tek seferlik satın alma
    if (planType == 'lifetime') {
      await InAppPurchase.instance.buyNonConsumable(purchaseParam: purchaseParam);
    } else {
      await InAppPurchase.instance.buyConsumable(purchaseParam: purchaseParam);
    }
    
    return true;
  }
  
  // Mevcut abonelik detaylarını getir
  Future<SubscriptionDetails?> getSubscriptionDetails() async {
    final user = _authService.currentUser;
    if (user == null) return null;
    
    return SubscriptionDetails(
      planType: 'yearly', 
      expiryDate: DateTime.now().add(const Duration(days: 365))
    );
  }
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\core\services\sound_service.dart  
====================  
  
// lib/core/services/sound_service.dart

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:audioplayers/audioplayers.dart';

// Sound service provider
final soundServiceProvider = Provider<SoundService>((ref) {
  return SoundService();
});

class SoundService {
  final AudioPlayer _audioPlayer = AudioPlayer();
  bool _isInitialized = false;
  
  // Ses servisini başlat
  Future<void> initialize() async {
    try {
      await _audioPlayer.setReleaseMode(ReleaseMode.stop);
      _isInitialized = true;
    } catch (e) {
      debugPrint('Ses servisi başlatılamadı: $e');
    }
  }
  
  // Zikir sayma sesi çal
  Future<void> playZikirSound() async {
    if (!_isInitialized) await initialize();
    
    try {
      await _audioPlayer.play(AssetSource('sounds/click.mp3'));
    } catch (e) {
      debugPrint('Zikir sesi çalınamadı: $e');
    }
  }
  
  // Hedef tamamlama sesi çal
  Future<void> playCompletionSound() async {
    if (!_isInitialized) await initialize();
    
    try {
      await _audioPlayer.play(AssetSource('sounds/completion.mp3'));
    } catch (e) {
      debugPrint('Tamamlama sesi çalınamadı: $e');
    }
  }
  
  // Arapça ses oynat
  Future<void> playArabicAudio(String audioUrl) async {
    if (!_isInitialized) await initialize();
    
    try {
      await _audioPlayer.play(UrlSource(audioUrl));
    } catch (e) {
      debugPrint('Arapça ses çalınamadı: $e');
    }
  }
  
  // Sesli okunuş oynat
  Future<void> playTranslatedAudio(String audioUrl) async {
    if (!_isInitialized) await initialize();
    
    try {
      await _audioPlayer.play(UrlSource(audioUrl));
    } catch (e) {
      debugPrint('Sesli okunuş çalınamadı: $e');
    }
  }
  
  // Sesi durdur
  Future<void> stopAudio() async {
    if (!_isInitialized) return;
    
    try {
      await _audioPlayer.stop();
    } catch (e) {
      debugPrint('Ses durdurulamadı: $e');
    }
  }
  
  // Kaynakları temizle
  Future<void> dispose() async {
    if (!_isInitialized) return;
    
    try {
      await _audioPlayer.dispose();
      _isInitialized = false;
    } catch (e) {
      debugPrint('Ses kaynakları temizlenemedi: $e');
    }
  }
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\core\theme\app_colors.dart  
====================  
  
// lib/core/theme/app_colors.dart

import 'package:flutter/material.dart';

class AppColors {
  // Ana renkler
  static const Color primary = Color(0xFF2E7D32); // Yeşil
  static const Color primaryLight = Color(0xFF4CAF50);
  static const Color primaryDark = Color(0xFF1B5E20);
  
  // İkincil renkler
  static const Color secondary = Color(0xFF4A90E2); // Mavi
  static const Color secondaryLight = Color(0xFF7BB3F0);
  static const Color secondaryDark = Color(0xFF2E5984);
  
  // Accent renkler
  static const Color accent = Color(0xFFFF9800); // Turuncu
  static const Color accentLight = Color(0xFFFFB74D);
  static const Color accentDark = Color(0xFFEF6C00);
  
  // Başarı ve hata renkleri
  static const Color success = Color(0xFF4CAF50);
  static const Color warning = Color(0xFFFF9800);
  static const Color error = Color(0xFFF44336);
  static const Color info = Color(0xFF2196F3);
  
  // Arka plan renkleri
  static const Color background = Color(0xFFF5F5F5);
  static const Color surface = Colors.white;
  static const Color surfaceDark = Color(0xFF424242);
  
  // Metin renkleri
  static const Color textPrimary = Color(0xFF212121);
  static const Color textSecondary = Color(0xFF757575);
  static const Color textLight = Colors.white;
  
  // Gri tonları
  static const Color grey50 = Color(0xFFFAFAFA);
  static const Color grey100 = Color(0xFFF5F5F5);
  static const Color grey200 = Color(0xFFEEEEEE);
  static const Color grey300 = Color(0xFFE0E0E0);
  static const Color grey400 = Color(0xFFBDBDBD);
  static const Color grey500 = Color(0xFF9E9E9E);
  static const Color grey600 = Color(0xFF757575);
  static const Color grey700 = Color(0xFF616161);
  static const Color grey800 = Color(0xFF424242);
  static const Color grey900 = Color(0xFF212121);
  
  // Özel zikir renkleri
  static const Color zikirCounter = Color(0xFF4CAF50);
  static const Color zikirCompleted = Color(0xFF8BC34A);
  static const Color zikirInProgress = Color(0xFF2196F3);
  
  // Premium renkleri
  static const Color premium = Color(0xFFFFD700); // Altın
  static const Color premiumDark = Color(0xFFB8860B);
  
  // Şeffaf renkler
  static const Color overlay = Color(0x80000000);
  static const Color overlayLight = Color(0x40000000);
  
  AppColors._(); // Private constructor
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\admin\admin_settings_screen.dart  
====================  
  
﻿// Dosya: lib/features/admin/admin_settings_screen.dart
// Açıklama: Admin’in puanlama sistemi değerlerini düzenleyebileceği ekran.
// Klasör: lib/features/admin

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/providers/providers.dart';
import 'package:zikirmo_new/core/services/auth_service.dart';
import 'package:zikirmo_new/core/services/firestore_service.dart';

final settingsProvider = FutureProvider<Map<String, dynamic>>((ref) async {
  final firestoreService = FirestoreService();
  final doc = await firestoreService.firestore.collection('settings').doc('points').get();
  return doc.data() ?? {};
});

class AdminSettingsScreen extends ConsumerStatefulWidget {
  const AdminSettingsScreen({super.key});

  @override
  ConsumerState<AdminSettingsScreen> createState() => _AdminSettingsScreenState();
}

class _AdminSettingsScreenState extends ConsumerState<AdminSettingsScreen> {
  final _formKey = GlobalKey<FormState>();
  final Map<String, TextEditingController> _controllers = {
    'clickPoints': TextEditingController(),
    'dailyGoalPoints': TextEditingController(),
    'streak5DaysPoints': TextEditingController(),
    'streak7DaysPoints': TextEditingController(),
    'streak30DaysPoints': TextEditingController(),
    'customZikirPoints': TextEditingController(),
    'profileCompletePoints': TextEditingController(),
    'friendInvitePoints': TextEditingController(),
    'perfectWeekPoints': TextEditingController(),
    'levelUpBonusPoints': TextEditingController(),
  };

  @override
  void dispose() {
    _controllers.forEach((_, controller) => controller.dispose());
    super.dispose();
  }

  Future<void> _saveSettings() async {
    if (_formKey.currentState!.validate()) {
      final firestoreService = FirestoreService();
      final settings = _controllers.map((key, controller) => MapEntry(key, double.parse(controller.text)));
      await firestoreService.setSettings(settings);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('settingsSaved'.tr())),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final settingsAsync = ref.watch(settingsProvider);
    final authService = ref.watch(authServiceProvider);
    final user = authService.currentUser;

    if (user == null || !(user.customClaims?['admin'] ?? false)) {
      return Scaffold(
        body: Center(child: Text('adminAccessRequired'.tr())),
      );
    }

    return Scaffold(
      appBar: AppBar(
        title: Text('adminSettingsTitle'.tr()),
      ),
      body: settingsAsync.when(
        data: (settings) {
          _controllers.forEach((key, controller) {
            controller.text = (settings[key] ?? _getDefaultValue(key)).toString();
          });
          return Padding(
            padding: const EdgeInsets.all(16.0),
            child: Form(
              key: _formKey,
              child: SingleChildScrollView(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text('pointsSettings'.tr(), style: Theme.of(context).textTheme.titleLarge),
                    const SizedBox(height: 20),
                    ..._controllers.entries.map((entry) => Padding(
                          padding: const EdgeInsets.only(bottom: 10),
                          child: TextFormField(
                            controller: entry.value,
                            decoration: InputDecoration(
                              labelText: entry.key.tr(),
                              border: const OutlineInputBorder(),
                            ),
                            keyboardType: TextInputType.number,
                            validator: (value) {
                              if (value == null || value.isEmpty) {
                                return 'valueRequired'.tr();
                              }
                              if (double.tryParse(value) == null) {
                                return 'invalidNumber'.tr();
                              }
                              return null;
                            },
                          ),
                        )),
                    const SizedBox(height: 20),
                    Center(
                      child: ElevatedButton(
                        onPressed: _saveSettings,
                        child: Text('save'.tr()),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          );
        },
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stack) => Center(child: Text('errorLoadingSettings'.tr())),
      ),
    );
  }

  double _getDefaultValue(String key) {
    switch (key) {
      case 'clickPoints':
        return 1;
      case 'dailyGoalPoints':
        return 10;
      case 'streak5DaysPoints':
        return 20;
      case 'streak7DaysPoints':
        return 40;
      case 'streak30DaysPoints':
        return 200;
      case 'customZikirPoints':
        return 5;
      case 'profileCompletePoints':
        return 10;
      case 'friendInvitePoints':
        return 15;
      case 'perfectWeekPoints':
        return 50;
      case 'levelUpBonusPoints':
        return 30;
      default:
        return 0;
    }
  }
}

// Dosya Sonu: lib/features/admin/admin_settings_screen.dart
  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\auth\forgot_password_screen.dart  
====================  
  
import 'package:flutter_riverpod/flutter_riverpod.dart';
// Dosya: lib/features/auth/forgot_password_screen.dart
// Açıklama: Kullanıcıların şifrelerini sıfırlamak için e-posta adreslerine sıfırlama bağlantısı gönderen ekranı tanımlar.

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:zikirmo_new/routes.dart';

class ForgotPasswordScreen extends ConsumerStatefulWidget {
  const ForgotPasswordScreen({Key? key}) : super(key: key);

  @override
  ConsumerState<ForgotPasswordScreen> createState() => _ForgotPasswordScreenState();
}

class _ForgotPasswordScreenState extends ConsumerState<ForgotPasswordScreen> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  bool _isLoading = false;
  String? _errorMessage;
  String? _successMessage;

  @override
  void dispose() {
    _emailController.dispose();
    super.dispose();
  }

  Future<void> _resetPassword() async {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isLoading = true;
        _errorMessage = null;
        _successMessage = null;
      });

      try {
        // TODO: AuthService ile şifre sıfırlama işlemi
        await Future.delayed(const Duration(seconds: 2)); // Simüle edilmiş işlem
        
        setState(() {
          _successMessage = 'resetPasswordSuccess'.tr();
        });
      } catch (e) {
        setState(() {
          _errorMessage = 'errorResetPassword'.tr();
        });
      } finally {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('resetPassword'.tr()),
      ),
      body: Padding(
        padding: const EdgeInsets.all(24.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              // Açıklama metni
              Text(
                'resetPasswordMessage'.tr(),
                style: Theme.of(context).textTheme.bodyLarge,
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 32),
              
              // Email alanı
              TextFormField(
                controller: _emailController,
                decoration: InputDecoration(
                  labelText: 'email'.tr(),
                  prefixIcon: const Icon(Icons.email),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                keyboardType: TextInputType.emailAddress,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'emailRequired'.tr();
                  }
                  if (!RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(value)) {
                    return 'invalidEmail'.tr();
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              
              // Hata ve başarı mesajları
              if (_errorMessage != null) ...[
                Text(
                  _errorMessage!,
                  style: const TextStyle(color: Colors.red),
                  textAlign: TextAlign.center,
                ),
                const SizedBox(height: 16),
              ],
              
              if (_successMessage != null) ...[
                Text(
                  _successMessage!,
                  style: const TextStyle(color: Colors.green),
                  textAlign: TextAlign.center,
                ),
                const SizedBox(height: 16),
              ],
              
              // Sıfırlama butonu
              SizedBox(
                height: 50,
                child: _isLoading
                    ? const Center(child: CircularProgressIndicator())
                    : ElevatedButton(
                        onPressed: _resetPassword,
                        style: ElevatedButton.styleFrom(
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                        child: Text(
                          'resetPassword'.tr(),
                          style: const TextStyle(fontSize: 16),
                        ),
                      ),
              ),
              const SizedBox(height: 16),
              
              // Giriş ekranına dönüş
              TextButton(
                onPressed: () {
                  Navigator.pop(context);
                },
                child: Text('buttonSignIn'.tr()),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
// forgot_password_screen.dart - v1.0.0
  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\auth\friend_profile_screen.dart  
====================  
  
﻿// friend_profile_screen.dart - v1.0.0
// Başka kullanıcıların profil ekranı
// Klasör: lib/features/profile/friend_profile_screen.dart

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:zikirmo_new/core/models/user_model.dart';
import 'package:zikirmo_new/core/services/auth_service.dart';
import 'package:zikirmo_new/core/services/firestore_service.dart';
import 'package:zikirmo_new/routes.dart';
import 'package:zikirmo_new/features/profile/components/badge_list.dart';

// Kullanıcı bilgilerini getiren provider
final otherUserProvider = FutureProvider.family<UserModel?, String>((ref, userId) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return await firestoreService.getUser(userId);
});

// Arkadaş durumunu kontrol eden provider
final isFriendProvider = FutureProvider.family<bool, String>((ref, userId) async {
  final authService = ref.watch(authServiceProvider);
  final firestoreService = ref.watch(firestoreServiceProvider);
  final currentUserId = authService.currentUser?.uid;
  
  if (currentUserId == null) return false;
  
  final currentUser = await firestoreService.getUser(currentUserId);
  if (currentUser == null) return false;
  
  return currentUser.friends.contains(userId);
});

class FriendProfileScreen extends ConsumerWidget {
  final String userId;
  
  const FriendProfileScreen({
    Key? key,
    required this.userId,
  }) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final userAsync = ref.watch(otherUserProvider(userId));
    final isFriendAsync = ref.watch(isFriendProvider(userId));
    
    return Scaffold(
      appBar: AppBar(
        title: Text('Profil'.tr()),
      ),
      body: userAsync.when(
        data: (user) {
          if (user == null) {
            return Center(child: Text('noUser'.tr()));
          }
          
          return SingleChildScrollView(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Profil başlığı
                  _buildProfileHeader(context, user),
                  const SizedBox(height: 24),
                  
                  // İstatistikler
                  _buildStatsCard(context, user),
                  const SizedBox(height: 24),
                  
                  // Rozetler
                  BadgeList(badges: user.badges),
                  const SizedBox(height: 24),
                  
                  // Kişisel bilgi
                  if (user.aboutMe != null && user.aboutMe!.isNotEmpty)
                    _buildAboutMeCard(context, user),
                    const SizedBox(height: 24),
                  
                  // Sosyal medya bağlantıları
                  if (user.socialLinks != null && user.socialLinks!.isNotEmpty)
                    _buildSocialLinksCard(context, user),
                    const SizedBox(height: 24),
                  
                  // Arkadaşlık butonu
                  isFriendAsync.when(
                    data: (isFriend) => _buildFriendshipButton(context, ref, isFriend),
                    loading: () => const Center(child: CircularProgressIndicator()),
                    error: (_, __) => const SizedBox(),
                  ),
                  
                  // İletişim butonları
                  _buildCommunicationButtons(context),
                ],
              ),
            ),
          );
        },
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stackTrace) => Center(
          child: Text('errorLoadingProfile'.tr()),
        ),
      ),
    );
  }
  
  // Profil başlığı
  Widget _buildProfileHeader(BuildContext context, UserModel user) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            // Kullanıcı avatarı
            CircleAvatar(
              radius: 50,
              backgroundColor: Theme.of(context).primaryColor.withOpacity(0.2),
              backgroundImage: user.profileImageUrl != null
                  ? NetworkImage(user.profileImageUrl!)
                  : null,
              child: user.profileImageUrl == null
                  ? Text(
                      _getInitials(user.nickname),
                      style: const TextStyle(
                        fontSize: 36,
                        fontWeight: FontWeight.bold,
                      ),
                    )
                  : null,
            ),
            const SizedBox(height: 16),
            
            // Kullanıcı adı ve Premium rozeti
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  user.nickname,
                  style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
                if (user.isPremium) 
                  Padding(
                    padding: const EdgeInsets.only(left: 8.0),
                    child: Icon(
                      Icons.verified,
                      color: Colors.amber[700],
                      size: 24,
                    ),
                  ),
              ],
            ),
            const SizedBox(height: 8),
            
            // Seviye bilgisi
            Text(
              'level'.tr(args: [user.level.tr()]),
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 8),
            
            // Puan bilgisi
            Text(
              'points'.tr(args: [user.points.toString()]),
              style: Theme.of(context).textTheme.bodyMedium,
            ),
          ],
        ),
      ),
    );
  }
  
  // İstatistikler kartı
  Widget _buildStatsCard(BuildContext context, UserModel user) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'statistics'.tr(),
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 16),
            
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                _buildStatItem(
                  context,
                  Icons.touch_app,
                  'totalZikirs'.tr(args: [user.totalZikirCount.toString()]),
                ),
                _buildStatItem(
                  context,
                  Icons.whatshot,
                  'currentStreak'.tr(args: [user.currentStreak.toString()]),
                ),
                _buildStatItem(
                  context,
                  Icons.emoji_events,
                  'badges'.tr(),
                  subtitle: user.badges.length.toString(),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
  
  // İstatistik öğesi
  Widget _buildStatItem(BuildContext context, IconData icon, String title, {String? subtitle}) {
    return Column(
      children: [
        Icon(icon, size: 28, color: Theme.of(context).primaryColor),
        const SizedBox(height: 8),
        Text(
          title,
          style: Theme.of(context).textTheme.bodyMedium,
          textAlign: TextAlign.center,
        ),
        if (subtitle != null) ...[
          const SizedBox(height: 4),
          Text(
            subtitle,
            style: Theme.of(context).textTheme.bodySmall,
          ),
        ],
      ],
    );
  }
  
  // Hakkında kartı
  Widget _buildAboutMeCard(BuildContext context, UserModel user) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Hakkında'.tr(),
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 8),
            Text(user.aboutMe ?? ''),
          ],
        ),
      ),
    );
  }
  
  // Sosyal medya bağlantıları kartı
  Widget _buildSocialLinksCard(BuildContext context, UserModel user) {
    final socialLinks = user.socialLinks!;
    
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Sosyal Medya'.tr(),
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 16),
            
            if (socialLinks.containsKey('instagram'))
              _buildSocialLinkTile(
                'Instagram',
                socialLinks['instagram']!,
                Icons.camera_alt,
                Colors.pink,
              ),
            if (socialLinks.containsKey('twitter'))
              _buildSocialLinkTile(
                'Twitter',
                socialLinks['twitter']!,
                Icons.mode_comment,
                Colors.blue,
              ),
            if (socialLinks.containsKey('facebook'))
              _buildSocialLinkTile(
                'Facebook',
                socialLinks['facebook']!,
                Icons.facebook,
                Colors.indigo,
              ),
            if (socialLinks.containsKey('spotify'))
              _buildSocialLinkTile(
                'Spotify',
                socialLinks['spotify']!,
                Icons.music_note,
                Colors.green,
              ),
            if (socialLinks.containsKey('bluesky'))
              _buildSocialLinkTile(
                'Bluesky',
                socialLinks['bluesky']!,
                Icons.cloud,
                Colors.lightBlue,
              ),
          ],
        ),
      ),
    );
  }
  
  // Sosyal medya bağlantı öğesi
  Widget _buildSocialLinkTile(String name, String username, IconData icon, Color color) {
    return ListTile(
      leading: CircleAvatar(
        backgroundColor: color.withOpacity(0.2),
        child: Icon(icon, color: color),
      ),
      title: Text(name),
      subtitle: Text(username),
      trailing: const Icon(Icons.open_in_new),
      onTap: () {
        // TODO: Sosyal medya bağlantısını aç
      },
    );
  }
  
  // Arkadaşlık butonu
  Widget _buildFriendshipButton(BuildContext context, WidgetRef ref, bool isFriend) {
    return SizedBox(
      width: double.infinity,
      height: 50,
      child: ElevatedButton.icon(
        onPressed: () async {
          final authService = ref.read(authServiceProvider);
          final firestoreService = ref.read(firestoreServiceProvider);
          final currentUserId = authService.currentUser?.uid;
          
          if (currentUserId == null) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text('pleaseLogin'.tr())),
            );
            return;
          }
          
          try {
            if (isFriend) {
              // Arkadaşlıktan çıkar
              await firestoreService.removeFriend(currentUserId, userId);
              
              if (context.mounted) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('Arkadaşlıktan çıkarıldı'.tr())),
                );
              }
            } else {
              // Arkadaş ekle
              await firestoreService.addFriend(currentUserId, userId);
              
              if (context.mounted) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('Arkadaş olarak eklendi'.tr())),
                );
              }
            }
            
            // Arkadaşlık durumunu yenile
            ref.refresh(isFriendProvider(userId));
          } catch (e) {
            if (context.mounted) {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(content: Text('Bir hata oluştu'.tr())),
              );
            }
          }
        },
        icon: Icon(isFriend ? Icons.person_remove : Icons.person_add),
        label: Text(isFriend ? 'Arkadaşlıktan Çıkar'.tr() : 'Arkadaş Ekle'.tr()),
        style: ElevatedButton.styleFrom(
          backgroundColor: isFriend ? Colors.red : Theme.of(context).primaryColor,
          foregroundColor: Colors.white,
        ),
      ),
    );
  }
  
  // İletişim butonları
  Widget _buildCommunicationButtons(BuildContext context) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'İletişim'.tr(),
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 16),
            
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                _buildActionButton(
                  context, 
                  Icons.message,
                  'Mesaj Gönder'.tr(),
                  () {
                    // TODO: Mesaj gönderme sayfasına git
                  },
                ),
                _buildActionButton(
                  context, 
                  Icons.card_giftcard,
                  'Hediye Gönder'.tr(),
                  () {
                    // TODO: Hediye gönderme sayfasına git
                  },
                ),
                _buildActionButton(
                  context, 
                  Icons.share,
                  'Profili Paylaş'.tr(),
                  () {
                    // TODO: Profil paylaşma işlemi
                  },
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
  
  // Aksiyon butonu
  Widget _buildActionButton(
    BuildContext context,
    IconData icon,
    String label,
    VoidCallback onPressed,
  ) {
    return Column(
      children: [
        IconButton(
          onPressed: onPressed,
          icon: Icon(icon, size: 28),
          color: Theme.of(context).primaryColor,
        ),
        Text(
          label,
          style: Theme.of(context).textTheme.bodySmall,
          textAlign: TextAlign.center,
        ),
      ],
    );
  }
  
  // İsmin baş harflerini al
  String _getInitials(String name) {
    if (name.isEmpty) return '';
    
    final nameParts = name.split(' ');
    String initials = '';
    
    for (var part in nameParts) {
      if (part.isNotEmpty) {
        initials += part[0].toUpperCase();
        if (initials.length >= 2) break;
      }
    }
    
    return initials;
  }
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\auth\login_screen.dart  
====================  
  
// Dosya: lib/features/auth/login_screen.dart
// Yol: C:\src\zikirmo_new\lib\features\auth\login_screen.dart
// Açıklama: Giriş ekranı - i18n hardcoded string'ler düzeltildi

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../routes.dart';
import '../../core/services/auth_service.dart';
import '../../core/providers/providers.dart';

class LoginScreen extends ConsumerStatefulWidget {
  const LoginScreen({Key? key}) : super(key: key);

  @override
  ConsumerState<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends ConsumerState<LoginScreen> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  bool _isLoading = false;
  String? _errorMessage;
  bool _obscurePassword = true;

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  Future<void> _signIn() async {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isLoading = true;
        _errorMessage = null;
      });

      try {
        final authService = ref.read(authServiceProvider);
        final user = await authService.signInWithEmailAndPassword(
          _emailController.text.trim(),
          _passwordController.text,
        );
        
        if (user != null && mounted) {
          Navigator.pushReplacementNamed(context, AppRoutes.home);
        }
      } catch (e) {
        if (mounted) {
          setState(() {
            _errorMessage = 'errorSignIn'.tr();
          });
        }
      } finally {
        if (mounted) {
          setState(() {
            _isLoading = false;
          });
        }
      }
    }
  }

  Future<void> _signInWithGoogle() async {
    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });

    try {
      final authService = ref.read(authServiceProvider);
      final user = await authService.signInWithGoogle();
      
      if (user != null && mounted) {
        Navigator.pushReplacementNamed(context, AppRoutes.home);
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _errorMessage = 'errorSignInGoogle'.tr();
        });
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  Future<void> _signInWithApple() async {
    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });

    try {
      final authService = ref.read(authServiceProvider);
      final user = await authService.signInWithApple();
      
      if (user != null && mounted) {
        Navigator.pushReplacementNamed(context, AppRoutes.home);
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _errorMessage = 'errorSignInApple'.tr();
        });
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('buttonSignIn'.tr()),
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(24.0),
          child: Form(
            key: _formKey,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                // Başlık ve açıklama
                Text(
                  'welcomeMessage'.tr(),
                  style: Theme.of(context).textTheme.headlineSmall,
                  textAlign: TextAlign.center,
                ),
                const SizedBox(height: 32),
                
                // Email alanı
                TextFormField(
                  controller: _emailController,
                  decoration: InputDecoration(
                    labelText: 'email'.tr(),
                    prefixIcon: const Icon(Icons.email),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  keyboardType: TextInputType.emailAddress,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'emailRequired'.tr();
                    }
                    if (!RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(value)) {
                      return 'invalidEmail'.tr();
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16),
                
                // Şifre alanı
                TextFormField(
                  controller: _passwordController,
                  decoration: InputDecoration(
                    labelText: 'password'.tr(),
                    prefixIcon: const Icon(Icons.lock),
                    suffixIcon: IconButton(
                      icon: Icon(
                        _obscurePassword ? Icons.visibility : Icons.visibility_off,
                      ),
                      onPressed: () {
                        setState(() {
                          _obscurePassword = !_obscurePassword;
                        });
                      },
                    ),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  obscureText: _obscurePassword,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'passwordRequired'.tr();
                    }
                    return null;
                  },
                ),
                
                // Şifremi unuttum bağlantısı
                Align(
                  alignment: Alignment.centerRight,
                  child: TextButton(
                    onPressed: () {
                      Navigator.pushNamed(context, AppRoutes.forgotPassword);
                    },
                    child: Text('forgotPassword'.tr()),
                  ),
                ),
                
                // Hata mesajı
                if (_errorMessage != null) ...[
                  Text(
                    _errorMessage!,
                    style: const TextStyle(color: Colors.red),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 16),
                ],
                
                // Giriş butonu
                SizedBox(
                  height: 50,
                  child: _isLoading
                      ? const Center(child: CircularProgressIndicator())
                      : ElevatedButton(
                          onPressed: _signIn,
                          style: ElevatedButton.styleFrom(
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                          ),
                          child: Text(
                            'buttonSignIn'.tr(),
                            style: const TextStyle(fontSize: 16),
                          ),
                        ),
                ),
                const SizedBox(height: 24),
                
                // Veya ile ayrılma çizgisi
                Row(
                  children: [
                    const Expanded(child: Divider()),
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 16),
                      child: Text('or'.tr(), style: const TextStyle(color: Colors.grey)),
                    ),
                    const Expanded(child: Divider()),
                  ],
                ),
                const SizedBox(height: 24),
                
                // Sosyal medya butonları
                Row(
                  children: [
                    // Google ile giriş
                    Expanded(
                      child: ElevatedButton.icon(
                        onPressed: _isLoading ? null : _signInWithGoogle,
                        icon: const Icon(Icons.g_mobiledata, size: 24),
                        label: Text('Google'),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.white,
                          foregroundColor: Colors.black,
                          elevation: 1,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                            side: BorderSide(color: Colors.grey.shade300),
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(width: 16),
                    // Apple ile giriş
                    Expanded(
                      child: ElevatedButton.icon(
                        onPressed: _isLoading ? null : _signInWithApple,
                        icon: const Icon(Icons.apple, size: 24),
                        label: Text('Apple'),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.black,
                          foregroundColor: Colors.white,
                          elevation: 1,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 24),
                
                // Kayıt ol bağlantısı
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Text('alreadyHaveAccount'.tr()),
                    TextButton(
                      onPressed: () {
                        Navigator.pushNamed(context, AppRoutes.register);
                      },
                      child: Text('buttonSignUp'.tr()),
                    ),
                  ],
                ),
                
                // Üyelik bilgileri bağlantısı
                TextButton(
                  onPressed: () {
                    Navigator.pushNamed(context, AppRoutes.membershipInfo);
                  },
                  child: Text('learnMembership'.tr()),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\auth\register_screen.dart  
====================  
  
// Dosya: lib/features/auth/register_screen.dart
// Yol: C:\src\zikirmo_new\lib\features\auth\register_screen.dart
// Açıklama: Kayıt ekranı - i18n hardcoded string'ler düzeltildi

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../routes.dart';
import '../../core/services/auth_service.dart';
import '../../core/providers/providers.dart';

class RegisterScreen extends ConsumerStatefulWidget {
  const RegisterScreen({Key? key}) : super(key: key);

  @override
  ConsumerState<RegisterScreen> createState() => _RegisterScreenState();
}

class _RegisterScreenState extends ConsumerState<RegisterScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nicknameController = TextEditingController();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _confirmPasswordController = TextEditingController();
  
  bool _isLoading = false;
  String? _errorMessage;
  bool _obscurePassword = true;
  bool _obscureConfirmPassword = true;
  bool _acceptTerms = false;

  @override
  void dispose() {
    _nicknameController.dispose();
    _emailController.dispose();
    _passwordController.dispose();
    _confirmPasswordController.dispose();
    super.dispose();
  }

  Future<void> _register() async {
    if (!_acceptTerms) {
      setState(() {
        _errorMessage = 'acceptTermsRequired'.tr();
      });
      return;
    }
    
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isLoading = true;
        _errorMessage = null;
      });

      try {
        final authService = ref.read(authServiceProvider);
        final user = await authService.createUserWithEmailAndPassword(
          _emailController.text.trim(),
          _passwordController.text,
          _nicknameController.text.trim(),
        );
        
        if (user != null && mounted) {
          Navigator.pushReplacementNamed(context, AppRoutes.home);
        }
      } catch (e) {
        if (mounted) {
          setState(() {
            _errorMessage = 'errorSignUp'.tr();
          });
        }
      } finally {
        if (mounted) {
          setState(() {
            _isLoading = false;
          });
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('registerMessage'.tr()),
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(24.0),
          child: Form(
            key: _formKey,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                // Başlık
                Text(
                  'createAccount'.tr(),
                  style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                  textAlign: TextAlign.center,
                ),
                const SizedBox(height: 24),
                
                // Takma ad alanı
                TextFormField(
                  controller: _nicknameController,
                  decoration: InputDecoration(
                    labelText: 'nickname'.tr(),
                    prefixIcon: const Icon(Icons.person),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'nicknameRequired'.tr();
                    }
                    if (value.length < 3) {
                      return 'nicknameTooShort'.tr();
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16),
                
                // Email alanı
                TextFormField(
                  controller: _emailController,
                  decoration: InputDecoration(
                    labelText: 'email'.tr(),
                    prefixIcon: const Icon(Icons.email),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  keyboardType: TextInputType.emailAddress,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'emailRequired'.tr();
                    }
                    if (!RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(value)) {
                      return 'invalidEmail'.tr();
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16),
                
                // Şifre alanı
                TextFormField(
                  controller: _passwordController,
                  decoration: InputDecoration(
                    labelText: 'password'.tr(),
                    prefixIcon: const Icon(Icons.lock),
                    suffixIcon: IconButton(
                      icon: Icon(
                        _obscurePassword ? Icons.visibility : Icons.visibility_off,
                      ),
                      onPressed: () {
                        setState(() {
                          _obscurePassword = !_obscurePassword;
                        });
                      },
                    ),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  obscureText: _obscurePassword,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'passwordRequired'.tr();
                    }
                    if (value.length < 6) {
                      return 'passwordTooShort'.tr();
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16),
                
                // Şifre onay alanı
                TextFormField(
                  controller: _confirmPasswordController,
                  decoration: InputDecoration(
                    labelText: 'confirmPassword'.tr(),
                    prefixIcon: const Icon(Icons.lock_outline),
                    suffixIcon: IconButton(
                      icon: Icon(
                        _obscureConfirmPassword ? Icons.visibility : Icons.visibility_off,
                      ),
                      onPressed: () {
                        setState(() {
                          _obscureConfirmPassword = !_obscureConfirmPassword;
                        });
                      },
                    ),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  obscureText: _obscureConfirmPassword,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'confirmPasswordRequired'.tr();
                    }
                    if (value != _passwordController.text) {
                      return 'passwordsDoNotMatch'.tr();
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16),
                
                // Kullanım şartları onay kutusu
                CheckboxListTile(
                  title: Text('acceptTerms'.tr()),
                  value: _acceptTerms,
                  onChanged: (value) {
                    setState(() {
                      _acceptTerms = value ?? false;
                    });
                  },
                  contentPadding: EdgeInsets.zero,
                  controlAffinity: ListTileControlAffinity.leading,
                ),
                
                // Şartları görüntüle bağlantısı
                Align(
                  alignment: Alignment.centerLeft,
                  child: TextButton(
                    onPressed: () {
                      Navigator.pushNamed(context, AppRoutes.termsOfService);
                    },
                    child: Text('readTerms'.tr()),
                  ),
                ),
                
                // Hata mesajı
                if (_errorMessage != null) ...[
                  Text(
                    _errorMessage!,
                    style: const TextStyle(color: Colors.red),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 16),
                ],
                
                // Kayıt ol butonu
                SizedBox(
                  height: 50,
                  child: _isLoading
                      ? const Center(child: CircularProgressIndicator())
                      : ElevatedButton(
                          onPressed: _register,
                          style: ElevatedButton.styleFrom(
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                          ),
                          child: Text(
                            'buttonSignUp'.tr(),
                            style: const TextStyle(fontSize: 16),
                          ),
                        ),
                ),
                const SizedBox(height: 24),
                
                // Giriş ekranına dönüş
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Text('alreadyHaveAccountQuestion'.tr()),
                    TextButton(
                      onPressed: () {
                        Navigator.pushReplacementNamed(context, AppRoutes.login);
                      },
                      child: Text('buttonSignIn'.tr()),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\categories\category_detail_screen.dart  
====================  
  
﻿// lib/features/categories/category_detail_screen.dart

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/providers/providers.dart';
import 'package:zikirmo_new/core/models/category_model.dart';
import 'package:zikirmo_new/core/models/zikir_model.dart';
import 'package:zikirmo_new/core/services/firestore_service.dart';
import 'package:zikirmo_new/routes.dart';

// Kategori detayı provider'ı
final categoryProvider = FutureProvider.family<CategoryModel?, String>((ref, categoryId) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return await firestoreService.getCategory(categoryId);
});

// Kategoriye ait zikirler provider'ı
final categoryZikirsProvider = FutureProvider.family<List<ZikirModel>, String>((ref, categoryId) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return await firestoreService.getZikirsByCategory(categoryId);
});

class CategoryDetailScreen extends ConsumerWidget {
  final String categoryId;
  
  const CategoryDetailScreen({
    Key? key,
    required this.categoryId,
  }) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final categoryAsync = ref.watch(categoryProvider(categoryId));
    final zikirsAsync = ref.watch(categoryZikirsProvider(categoryId));
    
    return Scaffold(
      appBar: AppBar(
        title: categoryAsync.when(
          data: (category) => Text(
            category?.getLocalizedName(context.locale.languageCode) ?? 'category'.tr(),
          ),
          loading: () => Text('loading'.tr()),
          error: (_, __) => Text('category'.tr()),
        ),
      ),
      body: zikirsAsync.when(
        data: (zikirs) {
          if (zikirs.isEmpty) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(
                    Icons.sentiment_dissatisfied,
                    size: 64,
                    color: Colors.grey[400],
                  ),
                  const SizedBox(height: 16),
                  Text(
                    'Bu kategoride henüz zikir yok'.tr(),
                    style: const TextStyle(fontSize: 16, color: Colors.grey),
                  ),
                ],
              ),
            );
          }
          
          return ListView.builder(
            padding: const EdgeInsets.all(16),
            itemCount: zikirs.length,
            itemBuilder: (context, index) {
              final zikir = zikirs[index];
              return _buildZikirCard(context, zikir);
            },
          );
        },
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stack) => Center(
          child: Text('errorLoadingZikirs'.tr()),
        ),
      ),
    );
  }
  
  Widget _buildZikirCard(BuildContext context, ZikirModel zikir) {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      margin: const EdgeInsets.only(bottom: 12),
      child: InkWell(
        onTap: () {
          Navigator.pushNamed(
            context,
            AppRoutes.zikirDetail,
            arguments: zikir.id,
          );
        },
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Başlık satırı
              Row(
                children: [
                  Expanded(
                    child: Text(
                      zikir.getLocalizedTitle(context.locale.languageCode),
                      style: const TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 18,
                      ),
                    ),
                  ),
                  
                  // Hedef sayısı
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
                    decoration: BoxDecoration(
                      color: Theme.of(context).primaryColor.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(16),
                    ),
                    child: Text(
                      zikir.targetCount.toString(),
                      style: TextStyle(
                        color: Theme.of(context).primaryColor,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ],
              ),
              
              // Açıklama (varsa)
              if (zikir.description.isNotEmpty) ...[
                const SizedBox(height: 8),
                Text(
                  zikir.getLocalizedDescription(context.locale.languageCode),
                  style: TextStyle(color: Colors.grey[600]),
                  maxLines: 2,
                  overflow: TextOverflow.ellipsis,
                ),
              ],
              
              // Arapça yazılış (varsa)
              if (zikir.arabicText != null && zikir.arabicText!.isNotEmpty) ...[
                const SizedBox(height: 12),
                Container(
                  width: double.infinity,
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.grey[100],
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Text(
                    zikir.arabicText!,
                    style: const TextStyle(
                      fontSize: 18,
                      fontFamily: 'Amiri', // Arapça yazı tipi
                    ),
                    textAlign: TextAlign.center,
                  ),
                ),
              ],
              
              // Alt butonlar
              const SizedBox(height: 12),
              Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  // Dinleme butonu (ses varsa)
                  if (zikir.audioUrlArabic != null || zikir.audioUrlTranslated != null)
                    TextButton.icon(
                      onPressed: () {
                        // TODO: Ses oynatma işlevi
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(content: Text('Ses özelliği yakında eklenecek')),
                        );
                      },
                      icon: const Icon(Icons.volume_up),
                      label: Text('Dinle'.tr()),
                    ),
                  
                  // Zikir çekme butonu
                  ElevatedButton.icon(
                    onPressed: () {
                      Navigator.pushNamed(
                        context,
                        AppRoutes.zikirCounter,
                        arguments: zikir.id,
                      );
                    },
                    icon: const Icon(Icons.touch_app),
                    label: Text('Başla'.tr()),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Theme.of(context).primaryColor,
                      foregroundColor: Colors.white,
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}
  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\categories\category_screen.dart  
====================  
  
﻿// Dosya: lib/features/categories/category_screen.dart
// Açıklama: Zikir kategorilerini listeleyen ekranı tanımlar, Firestore’dan dinamik veri çeker.

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:zikirmo_new/core/models/category_model.dart';
import 'package:zikirmo_new/core/services/firestore_service.dart';

final categoriesProvider = FutureProvider<List<CategoryModel>>((ref) async {
  final firestoreService = FirestoreService();
  return firestoreService.getCategories();
});

class CategoryScreen extends ConsumerWidget {
  const CategoryScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final categoriesAsync = ref.watch(categoriesProvider);

    return Scaffold(
      appBar: AppBar(
        title: Text('categories'.tr()),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'zikirCategories'.tr(),
              style: Theme.of(context).textTheme.headlineSmall,
            ),
            const SizedBox(height: 20),
            Expanded(
              child: categoriesAsync.when(
                data: (categories) => categories.isEmpty
                    ? Center(child: Text('noCategories'.tr()))
                    : ListView.builder(
                        itemCount: categories.length,
                        itemBuilder: (context, index) {
                          final category = categories[index];
                          return ListTile(
                            title: Text(category.name['tr'] ?? category.name['en'] ?? 'Category'),
                            onTap: () {
                              // TODO: Kategoriye özel zikir listesi ekranına yönlendirme
                            },
                          );
                        },
                      ),
                loading: () => const Center(child: CircularProgressIndicator()),
                error: (error, stack) => Center(
                  child: Text('errorLoadingCategories'.tr()),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\challenges\challenge_screen.dart  
====================  
  
﻿// Dosya: lib/features/challenges/challenge_screen.dart
// Açıklama: Zorlukları listeler ve başlatmayı sağlar.
// Klasör: lib/features/challenges

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/providers/providers.dart';
import '../../core/services/firestore_service.dart';
import '../../core/services/auth_service.dart';

final challengesProvider = FutureProvider<List<Map<String, dynamic>>>((ref) async {
  final firestoreService = FirestoreService();
  final snapshot = await firestoreService.firestore.collection('challenges').get();
  return snapshot.docs.map((doc) => {...doc.data(), 'id': doc.id}).toList();
});

final userChallengesProvider = FutureProvider.family<List<Map<String, dynamic>>, String>((ref, userId) async {
  final firestoreService = FirestoreService();
  final snapshot = await firestoreService.firestore
      .collection('user_challenges')
      .where('userId', isEqualTo: userId)
      .get();
  return snapshot.docs.map((doc) => {...doc.data(), 'id': doc.id}).toList();
});

class ChallengeScreen extends ConsumerWidget {
  const ChallengeScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final challengesAsync = ref.watch(challengesProvider);
    final authService = ref.watch(authServiceProvider);
    final userId = authService.currentUser?.uid ?? '';
    final userChallengesAsync = ref.watch(userChallengesProvider(userId));

    return Scaffold(
      appBar: AppBar(
        title: Text('challenges'.tr()),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: challengesAsync.when(
          data: (challenges) => userChallengesAsync.when(
            data: (userChallenges) => challenges.isEmpty
                ? Center(child: Text('noChallenges'.tr()))
                : ListView.builder(
                    itemCount: challenges.length,
                    itemBuilder: (context, index) {
                      final challenge = challenges[index];
                      final userChallenge = userChallenges.firstWhere(
                        (uc) => uc['challengeId'] == challenge['id'],
                        orElse: () => {},
                      );
                      final isActive = userChallenge.isNotEmpty;
                      final isCompleted = isActive && userChallenge['completed'] == true;
                      final progress = isActive ? userChallenge['progress'] ?? 0 : 0;
                      return Card(
                        elevation: 4,
                        child: ListTile(
                          title: Text(challenge['name']),
                          subtitle: Text(isActive
                              ? 'progress'.tr(args: ['$progress/${challenge['targetZikirCount']}'])
                              : challenge['description']),
                          trailing: isCompleted
                              ? Text('completed'.tr())
                              : isActive
                                  ? Text('active'.tr())
                                  : ElevatedButton(
                                      onPressed: () async {
                                        final firestoreService = FirestoreService();
                                        await firestoreService.startChallenge(userId, challenge['id']);
                                        ref.invalidate(userChallengesProvider);
                                        ScaffoldMessenger.of(context).showSnackBar(
                                          SnackBar(content: Text('challengeStarted'.tr())),
                                        );
                                      },
                                      child: Text('startChallenge'.tr()),
                                    ),
                        ),
                      );
                    },
                  ),
            loading: () => const Center(child: CircularProgressIndicator()),
            error: (error, stack) => Center(child: Text('errorLoadingChallenges'.tr())),
          ),
          loading: () => const Center(child: CircularProgressIndicator()),
          error: (error, stack) => Center(child: Text('errorLoadingChallenges'.tr())),
        ),
      ),
    );
  }
}

// Dosya Sonu: lib/features/challenges/challenge_screen.dart
  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\friends\add_friend_screen.dart  
====================  
  
﻿import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/providers/providers.dart';
import '../../core/services/firestore_service.dart';
import '../../core/services/auth_service.dart';

class AddFriendScreen extends ConsumerStatefulWidget {
  const AddFriendScreen({super.key});

  @override
  ConsumerState<AddFriendScreen> createState() => _AddFriendScreenState();
}

class _AddFriendScreenState extends ConsumerState<AddFriendScreen> {
  final _searchController = TextEditingController();
  List<Map<String, dynamic>> _searchResults = [];
  bool _isLoading = false;

  Future<void> _searchUsers(String query) async {
    if (query.isEmpty) {
      setState(() {
        _searchResults = [];
      });
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      final firestoreService = ref.read(firestoreServiceProvider);
      final users = await firestoreService.searchUsers(query);
      
      setState(() {
        _searchResults = users.map((user) => {
          'id': user.id,
          'nickname': user.nickname,
          'email': user.email,
          'isPremium': user.isPremium,
        }).toList();
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _searchResults = [];
        _isLoading = false;
      });
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Arama sırasında hata oluştu')),
        );
      }
    }
  }

  Future<void> _addFriend(String friendId) async {
    try {
      final authService = ref.read(authServiceProvider);
      final firestoreService = ref.read(firestoreServiceProvider);
      final currentUserId = authService.currentUser?.uid;
      
      if (currentUserId == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Lütfen giriş yapın')),
        );
        return;
      }

      await firestoreService.addFriend(currentUserId, friendId);
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Arkadaşlık isteği gönderildi')),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Arkadaş eklenirken hata oluştu')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Arkadaş Ekle'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _searchController,
              decoration: InputDecoration(
                labelText: 'Arkadaş Ara',
                hintText: 'Kullanıcı adı veya e-posta',
                border: const OutlineInputBorder(),
                prefixIcon: const Icon(Icons.search),
              ),
              onChanged: _searchUsers,
            ),
            const SizedBox(height: 20),
            
            if (_isLoading)
              const Center(child: CircularProgressIndicator())
            else if (_searchResults.isEmpty && _searchController.text.isNotEmpty)
              const Center(
                child: Text('Kullanıcı bulunamadı'),
              )
            else
              Expanded(
                child: ListView.builder(
                  itemCount: _searchResults.length,
                  itemBuilder: (context, index) {
                    final user = _searchResults[index];
                    return Card(
                      child: ListTile(
                        leading: CircleAvatar(
                          child: Text(
                            user['nickname'][0].toUpperCase(),
                          ),
                        ),
                        title: Row(
                          children: [
                            Text(user['nickname'] ?? ''),
                            if (user['isPremium'] == true)
                              const Padding(
                                padding: EdgeInsets.only(left: 4.0),
                                child: Icon(
                                  Icons.verified,
                                  color: Colors.amber,
                                  size: 16,
                                ),
                              ),
                          ],
                        ),
                        subtitle: Text(user['email'] ?? ''),
                        trailing: IconButton(
                          icon: const Icon(Icons.person_add),
                          onPressed: () => _addFriend(user['id']),
                        ),
                      ),
                    );
                  },
                ),
              ),
          ],
        ),
      ),
    );
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }
}
  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\friends\friends_screen.dart  
====================  
  
﻿// friends_screen.dart - v1.0.0
// Arkadaş listesi ekranı
// Klasör: lib/features/friends/friends_screen.dart

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/providers/providers.dart';
import 'package:zikirmo_new/core/models/user_model.dart';
import 'package:zikirmo_new/core/services/auth_service.dart';
import 'package:zikirmo_new/core/services/firestore_service.dart';
import 'package:zikirmo_new/routes.dart';

// Arkadaş listesini getiren provider
final friendsProvider = FutureProvider<List<UserModel>>((ref) async {
  final authService = ref.watch(authServiceProvider);
  final firestoreService = ref.watch(firestoreServiceProvider);
  final userId = authService.currentUser?.uid;
  
  if (userId == null) return [];
  
  return await firestoreService.getFriends(userId);
});

// Arkadaşlık isteklerini getiren provider
final friendRequestsProvider = FutureProvider<List<UserModel>>((ref) async {
  final authService = ref.watch(authServiceProvider);
  final firestoreService = ref.watch(firestoreServiceProvider);
  final userId = authService.currentUser?.uid;
  
  if (userId == null) return [];
  
  return await firestoreService.getFriendRequests(userId);
});

class FriendsScreen extends ConsumerWidget {
  const FriendsScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final friendsAsync = ref.watch(friendsProvider);
    final friendRequestsAsync = ref.watch(friendRequestsProvider);
    
    return Scaffold(
      appBar: AppBar(
        title: Text('friends'.tr()),
        actions: [
          IconButton(
            icon: const Icon(Icons.person_search),
            tooltip: 'Kullanıcı Ara'.tr(),
            onPressed: () {
              Navigator.pushNamed(context, AppRoutes.userSearch);
            },
          ),
        ],
      ),
      body: RefreshIndicator(
        onRefresh: () async {
          ref.refresh(friendsProvider);
          ref.refresh(friendRequestsProvider);
        },
        child: DefaultTabController(
          length: 2,
          child: Column(
            children: [
              // Tab bar
              TabBar(
                tabs: [
                  Tab(text: 'Arkadaşlar'.tr()),
                  Tab(
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Text('İstekler'.tr()),
                        const SizedBox(width: 4),
                        friendRequestsAsync.when(
                          data: (requests) => requests.isNotEmpty
                              ? Container(
                                  padding: const EdgeInsets.all(6),
                                  decoration: BoxDecoration(
                                    color: Colors.red,
                                    shape: BoxShape.circle,
                                  ),
                                  child: Text(
                                    requests.length.toString(),
                                    style: const TextStyle(
                                      color: Colors.white,
                                      fontSize: 12,
                                    ),
                                  ),
                                )
                              : const SizedBox(),
                          loading: () => const SizedBox(),
                          error: (_, __) => const SizedBox(),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
              
              // Tab içerikleri
              Expanded(
                child: TabBarView(
                  children: [
                    // Arkadaşlar tab'ı
                    friendsAsync.when(
                      data: (friends) => friends.isEmpty
                          ? _buildEmptyState(
                              context,
                              Icons.people,
                              'noFriends'.tr(),
                              'Arkadaş eklemek için sağ üstteki arama simgesine dokunun.'.tr(),
                            )
                          : _buildFriendsList(context, ref, friends),
                      loading: () => const Center(child: CircularProgressIndicator()),
                      error: (_, __) => Center(
                        child: Text('errorLoadingFriends'.tr()),
                      ),
                    ),
                    
                    // İstekler tab'ı
                    friendRequestsAsync.when(
                      data: (requests) => requests.isEmpty
                          ? _buildEmptyState(
                              context,
                              Icons.inbox,
                              'Arkadaşlık İsteği Yok'.tr(),
                              'Yeni arkadaşlık istekleri burada görünecek.'.tr(),
                            )
                          : _buildRequestsList(context, ref, requests),
                      loading: () => const Center(child: CircularProgressIndicator()),
                      error: (_, __) => Center(
                        child: Text('Arkadaşlık istekleri yüklenirken hata oluştu.'.tr()),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          Navigator.pushNamed(context, AppRoutes.userSearch);
        },
        tooltip: 'Kullanıcı Ara'.tr(),
        child: const Icon(Icons.person_add),
      ),
    );
  }
  
  // Boş durum widget'ı
  Widget _buildEmptyState(
    BuildContext context,
    IconData icon,
    String title,
    String message,
  ) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              icon,
              size: 80,
              color: Colors.grey[400],
            ),
            const SizedBox(height: 16),
            Text(
              title,
              style: Theme.of(context).textTheme.titleLarge,
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 8),
            Text(
              message,
              style: Theme.of(context).textTheme.bodyMedium,
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }
  
  // Arkadaş listesi widget'ı
  Widget _buildFriendsList(
    BuildContext context,
    WidgetRef ref,
    List<UserModel> friends,
  ) {
    return ListView.builder(
      itemCount: friends.length,
      itemBuilder: (context, index) {
        final friend = friends[index];
        return Card(
          margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          child: ListTile(
            leading: CircleAvatar(
              backgroundColor: Theme.of(context).primaryColor.withOpacity(0.2),
              backgroundImage: friend.profileImageUrl != null
                  ? NetworkImage(friend.profileImageUrl!)
                  : null,
              child: friend.profileImageUrl == null
                  ? Text(
                      _getInitials(friend.nickname),
                      style: const TextStyle(
                        fontWeight: FontWeight.bold,
                      ),
                    )
                  : null,
            ),
            title: Row(
              children: [
                Text(friend.nickname),
                if (friend.isPremium) 
                  Padding(
                    padding: const EdgeInsets.only(left: 4.0),
                    child: Icon(
                      Icons.verified,
                      color: Colors.amber[700],
                      size: 16,
                    ),
                  ),
              ],
            ),
            subtitle: Text('level'.tr(args: [friend.level.tr()])),
            trailing: IconButton(
              icon: const Icon(Icons.more_vert),
              onPressed: () {
                _showFriendOptionsMenu(context, ref, friend);
              },
            ),
            onTap: () {
              Navigator.pushNamed(
                context,
                AppRoutes.friendProfile,
                arguments: friend.id,
              );
            },
          ),
        );
      },
    );
  }
  
  // Arkadaşlık istekleri listesi widget'ı
  Widget _buildRequestsList(
    BuildContext context,
    WidgetRef ref,
    List<UserModel> requests,
  ) {
    return ListView.builder(
      itemCount: requests.length,
      itemBuilder: (context, index) {
        final request = requests[index];
        return Card(
          margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          child: ListTile(
            leading: CircleAvatar(
              backgroundColor: Theme.of(context).primaryColor.withOpacity(0.2),
              backgroundImage: request.profileImageUrl != null
                  ? NetworkImage(request.profileImageUrl!)
                  : null,
              child: request.profileImageUrl == null
                  ? Text(
                      _getInitials(request.nickname),
                      style: const TextStyle(
                        fontWeight: FontWeight.bold,
                      ),
                    )
                  : null,
            ),
            title: Text(request.nickname),
            subtitle: Text('Arkadaşlık isteği gönderdi'.tr()),
            trailing: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                // Kabul et butonu
                IconButton(
                  icon: const Icon(Icons.check, color: Colors.green),
                  tooltip: 'Kabul Et'.tr(),
                  onPressed: () => _acceptFriendRequest(context, ref, request.id),
                ),
                // Reddet butonu
                IconButton(
                  icon: const Icon(Icons.close, color: Colors.red),
                  tooltip: 'Reddet'.tr(),
                  onPressed: () => _rejectFriendRequest(context, ref, request.id),
                ),
              ],
            ),
            onTap: () {
              Navigator.pushNamed(
                context,
                AppRoutes.friendProfile,
                arguments: request.id,
              );
            },
          ),
        );
      },
    );
  }
  
  // Arkadaş seçenekleri menüsü
  void _showFriendOptionsMenu(
    BuildContext context,
    WidgetRef ref,
    UserModel friend,
  ) {
    showModalBottomSheet(
      context: context,
      builder: (context) {
        return SafeArea(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              ListTile(
                leading: const Icon(Icons.person),
                title: Text('Profili Görüntüle'.tr()),
                onTap: () {
                  Navigator.pop(context);
                  Navigator.pushNamed(
                    context,
                    AppRoutes.friendProfile,
                    arguments: friend.id,
                  );
                },
              ),
              ListTile(
                leading: const Icon(Icons.message),
                title: Text('Mesaj Gönder'.tr()),
                onTap: () {
                  Navigator.pop(context);
                  // TODO: Mesaj gönderme sayfasına git
                },
              ),
              ListTile(
                leading: const Icon(Icons.card_giftcard),
                title: Text('Hediye Gönder'.tr()),
                onTap: () {
                  Navigator.pop(context);
                  // TODO: Hediye gönderme sayfasına git
                },
              ),
              ListTile(
                leading: const Icon(Icons.person_remove, color: Colors.red),
                title: Text(
                  'Arkadaşlıktan Çıkar'.tr(),
                  style: const TextStyle(color: Colors.red),
                ),
                onTap: () {
                  Navigator.pop(context);
                  _removeFriend(context, ref, friend.id);
                },
              ),
            ],
          ),
        );
      },
    );
  }
  
  // Arkadaşlık isteğini kabul et
  Future<void> _acceptFriendRequest(
    BuildContext context,
    WidgetRef ref,
    String userId,
  ) async {
    final authService = ref.read(authServiceProvider);
    final firestoreService = ref.read(firestoreServiceProvider);
    final currentUserId = authService.currentUser?.uid;
    
    if (currentUserId == null) return;
    
    try {
      await firestoreService.acceptFriendRequest(currentUserId, userId);
      
      // Arkadaş listesini yenile
      ref.refresh(friendsProvider);
      ref.refresh(friendRequestsProvider);
      
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Arkadaşlık isteği kabul edildi'.tr())),
       );
     }
   } catch (e) {
     if (context.mounted) {
       ScaffoldMessenger.of(context).showSnackBar(
         SnackBar(content: Text('Bir hata oluştu'.tr())),
       );
     }
   }
 }
 
 // Arkadaşlık isteğini reddet
 Future<void> _rejectFriendRequest(
   BuildContext context,
   WidgetRef ref,
   String userId,
 ) async {
   final authService = ref.read(authServiceProvider);
   final firestoreService = ref.read(firestoreServiceProvider);
   final currentUserId = authService.currentUser?.uid;
   
   if (currentUserId == null) return;
   
   try {
     await firestoreService.rejectFriendRequest(currentUserId, userId);
     
     // Arkadaşlık isteklerini yenile
     ref.refresh(friendRequestsProvider);
     
     if (context.mounted) {
       ScaffoldMessenger.of(context).showSnackBar(
         SnackBar(content: Text('Arkadaşlık isteği reddedildi'.tr())),
       );
     }
   } catch (e) {
     if (context.mounted) {
       ScaffoldMessenger.of(context).showSnackBar(
         SnackBar(content: Text('Bir hata oluştu'.tr())),
       );
     }
   }
 }
 
 // Arkadaşı kaldır
 Future<void> _removeFriend(
   BuildContext context,
   WidgetRef ref,
   String userId,
 ) async {
   final authService = ref.read(authServiceProvider);
   final firestoreService = ref.read(firestoreServiceProvider);
   final currentUserId = authService.currentUser?.uid;
   
   if (currentUserId == null) return;
   
   // Onay dialog'u
   final confirm = await showDialog<bool>(
     context: context,
     builder: (context) => AlertDialog(
       title: Text('Arkadaşı Kaldır'.tr()),
       content: Text('Bu kişiyi arkadaş listenizden kaldırmak istediğinizden emin misiniz?'.tr()),
       actions: [
         TextButton(
           onPressed: () => Navigator.pop(context, false),
           child: Text('cancel'.tr()),
         ),
         TextButton(
           onPressed: () => Navigator.pop(context, true),
           child: Text('Kaldır'.tr()),
         ),
       ],
     ),
   );
   
   if (confirm != true) return;
   
   try {
     await firestoreService.removeFriend(currentUserId, userId);
     
     // Arkadaş listesini yenile
     ref.refresh(friendsProvider);
     
     if (context.mounted) {
       ScaffoldMessenger.of(context).showSnackBar(
         SnackBar(content: Text('Arkadaşlıktan çıkarıldı'.tr())),
       );
     }
   } catch (e) {
     if (context.mounted) {
       ScaffoldMessenger.of(context).showSnackBar(
         SnackBar(content: Text('Bir hata oluştu'.tr())),
       );
     }
   }
 }
 
 // İsmin baş harflerini al
 String _getInitials(String name) {
   if (name.isEmpty) return '';
   
   final nameParts = name.split(' ');
   String initials = '';
   
   for (var part in nameParts) {
     if (part.isNotEmpty) {
       initials += part[0].toUpperCase();
       if (initials.length >= 2) break;
     }
   }
   
   return initials;
 }
}
  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\friends\friend_profile_screen.dart  
====================  
  
// Dosya: lib/features/friends/friend_profile_screen.dart
// Yol: C:\src\zikirmo_new\lib\features\friends\friend_profile_screen.dart
// Açıklama: Arkadaş profil ekranı - doğru konuma taşındı ve i18n düzeltildi

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/models/user_model.dart';
import '../../core/services/auth_service.dart';
import '../../core/services/firestore_service.dart';
import '../../core/providers/providers.dart';
import '../../routes.dart';
import '../profile/components/badge_list.dart';

class FriendProfileScreen extends ConsumerWidget {
  final String userId;
  
  const FriendProfileScreen({
    Key? key,
    required this.userId,
  }) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final userAsync = ref.watch(otherUserProviderFamily(userId));
    final isFriendAsync = ref.watch(_isFriendProvider(userId));
    
    return Scaffold(
      appBar: AppBar(
        title: Text('profile'.tr()),
        actions: [
          IconButton(
            icon: const Icon(Icons.more_vert),
            onPressed: () => _showOptionsMenu(context, ref),
          ),
        ],
      ),
      body: userAsync.when(
        data: (user) {
          if (user == null) {
            return Center(child: Text('userNotFound'.tr()));
          }
          
          return SingleChildScrollView(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Profil başlığı
                  _buildProfileHeader(context, user),
                  const SizedBox(height: 24),
                  
                  // İstatistikler
                  _buildStatsCard(context, user),
                  const SizedBox(height: 24),
                  
                  // Rozetler
                  BadgeList(badges: user.badges),
                  const SizedBox(height: 24),
                  
                  // Hakkında bölümü
                  if (user.aboutMe != null && user.aboutMe!.isNotEmpty)
                    _buildAboutSection(context, user),
                  
                  const SizedBox(height: 24),
                  
                  // Arkadaşlık butonu
                  isFriendAsync.when(
                    data: (isFriend) => _buildFriendshipButton(context, ref, isFriend),
                    loading: () => const Center(child: CircularProgressIndicator()),
                    error: (_, __) => const SizedBox(),
                  ),
                  
                  const SizedBox(height: 16),
                  
                  // İletişim butonları
                  _buildCommunicationButtons(context),
                ],
              ),
            ),
          );
        },
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stackTrace) => Center(
          child: Text('errorLoadingProfile'.tr()),
        ),
      ),
    );
  }
  
  // Profil başlığı
  Widget _buildProfileHeader(BuildContext context, UserModel user) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            // Kullanıcı avatarı
            CircleAvatar(
              radius: 50,
              backgroundColor: Theme.of(context).primaryColor.withOpacity(0.2),
              backgroundImage: user.profileImageUrl != null
                  ? NetworkImage(user.profileImageUrl!)
                  : null,
              child: user.profileImageUrl == null
                  ? Text(
                      _getInitials(user.nickname),
                      style: const TextStyle(
                        fontSize: 36,
                        fontWeight: FontWeight.bold,
                      ),
                    )
                  : null,
            ),
            const SizedBox(height: 16),
            
            // Kullanıcı adı ve Premium rozeti
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  user.nickname,
                  style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
                if (user.isPremium) 
                  Padding(
                    padding: const EdgeInsets.only(left: 8.0),
                    child: Icon(
                      Icons.verified,
                      color: Colors.amber[700],
                      size: 24,
                    ),
                  ),
              ],
            ),
            const SizedBox(height: 8),
            
            // Seviye bilgisi
            Text(
              'userLevel'.tr(args: [user.level.tr()]),
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 8),
            
            // Puan bilgisi
            Text(
              'userPoints'.tr(args: [user.points.toString()]),
              style: Theme.of(context).textTheme.bodyMedium,
            ),
          ],
        ),
      ),
    );
  }
  
  // İstatistikler kartı
  Widget _buildStatsCard(BuildContext context, UserModel user) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'statistics'.tr(),
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 16),
            
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                _buildStatItem(
                  context,
                  Icons.touch_app,
                  'totalZikirs'.tr(),
                  user.totalZikirCount.toString(),
                ),
                _buildStatItem(
                  context,
                  Icons.whatshot,
                  'currentStreak'.tr(),
                  user.currentStreak.toString(),
                ),
                _buildStatItem(
                  context,
                  Icons.emoji_events,
                  'badges'.tr(),
                  user.badges.length.toString(),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
  
  // İstatistik öğesi
  Widget _buildStatItem(BuildContext context, IconData icon, String title, String value) {
    return Column(
      children: [
        Icon(icon, size: 28, color: Theme.of(context).primaryColor),
        const SizedBox(height: 8),
        Text(
          value,
          style: const TextStyle(
            fontSize: 20,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 4),
        Text(
          title,
          style: Theme.of(context).textTheme.bodySmall,
          textAlign: TextAlign.center,
        ),
      ],
    );
  }
  
  // Hakkında bölümü
  Widget _buildAboutSection(BuildContext context, UserModel user) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'aboutMe'.tr(),
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 8),
            Text(user.aboutMe ?? ''),
          ],
        ),
      ),
    );
  }
  
  // Arkadaşlık butonu
  Widget _buildFriendshipButton(BuildContext context, WidgetRef ref, bool isFriend) {
    return SizedBox(
      width: double.infinity,
      height: 50,
      child: ElevatedButton.icon(
        onPressed: () => _toggleFriendship(context, ref, isFriend),
        icon: Icon(isFriend ? Icons.person_remove : Icons.person_add),
        label: Text(isFriend ? 'removeFriend'.tr() : 'addFriend'.tr()),
        style: ElevatedButton.styleFrom(
          backgroundColor: isFriend ? Colors.red : Theme.of(context).primaryColor,
          foregroundColor: Colors.white,
        ),
      ),
    );
  }
  
  // İletişim butonları
  Widget _buildCommunicationButtons(BuildContext context) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'communication'.tr(),
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 16),
            
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                _buildActionButton(
                  context, 
                  Icons.message,
                  'sendMessage'.tr(),
                  () {
                    Navigator.pushNamed(
                      context,
                      AppRoutes.sendMessage,
                      arguments: userId,
                    );
                  },
                ),
                _buildActionButton(
                  context, 
                  Icons.card_giftcard,
                  'sendGift'.tr(),
                  () {
                    Navigator.pushNamed(
                      context,
                      AppRoutes.sendGift,
                      arguments: userId,
                    );
                  },
                ),
                _buildActionButton(
                  context, 
                  Icons.share,
                  'shareProfile'.tr(),
                  () {
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(content: Text('shareFeatureComingSoon'.tr())),
                    );
                  },
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
  
  // Aksiyon butonu
  Widget _buildActionButton(
    BuildContext context,
    IconData icon,
    String label,
    VoidCallback onPressed,
  ) {
    return Column(
      children: [
        IconButton(
          onPressed: onPressed,
          icon: Icon(icon, size: 28),
          color: Theme.of(context).primaryColor,
        ),
        Text(
          label,
          style: Theme.of(context).textTheme.bodySmall,
          textAlign: TextAlign.center,
        ),
      ],
    );
  }
  
  // Seçenekler menüsü
  void _showOptionsMenu(BuildContext context, WidgetRef ref) {
    showModalBottomSheet(
      context: context,
      builder: (context) {
        return SafeArea(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              ListTile(
                leading: const Icon(Icons.block),
                title: Text('blockUser'.tr()),
                onTap: () {
                  Navigator.pop(context);
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('blockFeatureComingSoon'.tr())),
                  );
                },
              ),
              ListTile(
                leading: const Icon(Icons.report),
                title: Text('reportUser'.tr()),
                onTap: () {
                  Navigator.pop(context);
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('reportFeatureComingSoon'.tr())),
                  );
                },
              ),
            ],
          ),
        );
      },
    );
  }
  
  // Arkadaşlık durumunu değiştir
  Future<void> _toggleFriendship(BuildContext context, WidgetRef ref, bool isFriend) async {
    final authService = ref.read(authServiceProvider);
    final firestoreService = ref.read(firestoreServiceProvider);
    final currentUserId = authService.currentUser?.uid;
    
    if (currentUserId == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('pleaseLogin'.tr())),
      );
      return;
    }
    
    try {
      if (isFriend) {
        await firestoreService.removeFriend(currentUserId, userId);
        
        if (context.mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('friendRemoved'.tr())),
          );
        }
      } else {
        await firestoreService.addFriend(currentUserId, userId);
        
        if (context.mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('friendRequestSent'.tr())),
          );
        }
      }
      
      // Arkadaşlık durumunu yenile
      ref.refresh(_isFriendProvider(userId));
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('operationFailed'.tr())),
        );
      }
    }
  }
  
  // İsmin baş harflerini al
  String _getInitials(String name) {
    if (name.isEmpty) return '';
    
    final nameParts = name.split(' ');
    String initials = '';
    
    for (var part in nameParts) {
      if (part.isNotEmpty) {
        initials += part[0].toUpperCase();
        if (initials.length >= 2) break;
      }
    }
    
    return initials;
  }
}

// Arkadaş durumu provider'ı
final _isFriendProvider = FutureProvider.family<bool, String>((ref, userId) async {
  final authService = ref.watch(authServiceProvider);
  final firestoreService = ref.watch(firestoreServiceProvider);
  final currentUserId = authService.currentUser?.uid;
  
  if (currentUserId == null) return false;
  
  final currentUser = await firestoreService.getUser(currentUserId);
  if (currentUser == null) return false;
  
  return currentUser.friends.contains(userId);
});  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\friends\user_search_screen.dart  
====================  
  
﻿// user_search_screen.dart - v1.0.0
// Kullanıcı arama ekranı
// Klasör: lib/features/friends/user_search_screen.dart

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/providers/providers.dart';
import 'package:zikirmo_new/core/models/user_model.dart';
import 'package:zikirmo_new/core/services/auth_service.dart';
import 'package:zikirmo_new/core/services/firestore_service.dart';
import 'package:zikirmo_new/routes.dart';

// Arama sonuçları provider'ı
final searchResultsProvider = StateProvider<List<UserModel>>((ref) => []);

// Ülke filtresi provider'ı
final countryFilterProvider = StateProvider<String?>((ref) => null);

class UserSearchScreen extends ConsumerStatefulWidget {
  const UserSearchScreen({Key? key}) : super(key: key);

  @override
  ConsumerState<UserSearchScreen> createState() => _UserSearchScreenState();
}

class _UserSearchScreenState extends ConsumerState<UserSearchScreen> {
  final _searchController = TextEditingController();
  bool _isLoading = false;
  
  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }
  
  // Kullanıcı arama
  Future<void> _searchUsers() async {
    final query = _searchController.text.trim();
    if (query.isEmpty) return;
    
    setState(() {
      _isLoading = true;
    });
    
    try {
      final firestoreService = ref.read(firestoreServiceProvider);
      final countryFilter = ref.read(countryFilterProvider);
      
      // Arama yap
      final results = await firestoreService.searchUsers(
        query,
        countryFilter: countryFilter,
      );
      
      // Arama sonuçlarını güncelle
      ref.read(searchResultsProvider.notifier).state = results;
    } catch (e) {
      // Hata durumunda boş liste döndür
      ref.read(searchResultsProvider.notifier).state = [];
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final searchResults = ref.watch(searchResultsProvider);
    final countryFilter = ref.watch(countryFilterProvider);
    
    return Scaffold(
      appBar: AppBar(
        title: Text('Kullanıcı Ara'.tr()),
      ),
      body: Column(
        children: [
          // Arama çubuğu
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _searchController,
                    decoration: InputDecoration(
                      labelText: 'searchUser'.tr(),
                      hintText: 'E-posta, isim veya takma isim'.tr(),
                      prefixIcon: const Icon(Icons.search),
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    onSubmitted: (_) => _searchUsers(),
                  ),
                ),
                const SizedBox(width: 16),
                IconButton(
                  onPressed: _searchUsers,
                  icon: const Icon(Icons.search),
                  tooltip: 'Ara'.tr(),
                ),
              ],
            ),
          ),
          
          // Filtreler
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16.0),
            child: Row(
              children: [
                Text('Filtreler:'.tr()),
                const SizedBox(width: 8),
                
                // Ülke filtresi
                DropdownButton<String?>(
                  value: countryFilter,
                  hint: Text('Ülke'.tr()),
                  onChanged: (value) {
                    ref.read(countryFilterProvider.notifier).state = value;
                  },
                  items: [
                    const DropdownMenuItem(
                      value: null,
                      child: Text('Tümü'),
                    ),
                    const DropdownMenuItem(
                      value: 'TR',
                      child: Text('Türkiye'),
                    ),
                    const DropdownMenuItem(
                      value: 'US',
                      child: Text('Amerika Birleşik Devletleri'),
                    ),
                    // Diğer ülkeler eklenebilir
                  ],
                ),
              ],
            ),
          ),
          
          // Yükleniyor göstergesi
          if (_isLoading)
            const Padding(
              padding: EdgeInsets.all(16.0),
              child: Center(child: CircularProgressIndicator()),
            ),
          
          // Arama sonuçları
          Expanded(
            child: searchResults.isEmpty
                ? Center(
                    child: Text(
                      _searchController.text.isEmpty
                          ? 'Kullanıcı aramak için yukarıdaki arama çubuğunu kullanın.'.tr()
                          : 'noUsersFound'.tr(),
                    ),
                  )
                : ListView.builder(
                    itemCount: searchResults.length,
                    itemBuilder: (context, index) {
                      final user = searchResults[index];
                      return _buildUserListItem(context, user);
                    },
                  ),
          ),
        ],
      ),
    );
  }
  
  // Kullanıcı liste öğesi
  Widget _buildUserListItem(BuildContext context, UserModel user) {
    final authService = ref.read(authServiceProvider);
    final currentUserId = authService.currentUser?.uid;
    
    // Kullanıcı kendisi mi?
    final isSelf = currentUserId == user.id;
    
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: ListTile(
        leading: CircleAvatar(
          backgroundColor: Theme.of(context).primaryColor.withOpacity(0.2),
          backgroundImage: user.profileImageUrl != null
              ? NetworkImage(user.profileImageUrl!)
              : null,
          child: user.profileImageUrl == null
              ? Text(
                  _getInitials(user.nickname),
                  style: const TextStyle(
                    fontWeight: FontWeight.bold,
                  ),
                )
              : null,
        ),
        title: Row(
          children: [
            Text(user.nickname),
            if (user.isPremium) 
              Padding(
                padding: const EdgeInsets.only(left: 4.0),
                child: Icon(
                  Icons.verified,
                  color: Colors.amber[700],
                  size: 16,
                ),
              ),
          ],
        ),
        subtitle: Text('level'.tr(args: [user.level.tr()])),
        trailing: isSelf
            ? const Chip(
                label: Text('Siz'),
                backgroundColor: Colors.grey,
              )
            : IconButton(
                icon: const Icon(Icons.person_add),
                tooltip: 'addFriend'.tr(),
                onPressed: () => _addFriend(user.id),
              ),
        onTap: () {
          Navigator.pushNamed(
            context,
            AppRoutes.friendProfile,
            arguments: user.id,
          );
        },
      ),
    );
  }
  
  // Arkadaş ekleme
  Future<void> _addFriend(String userId) async {
    final authService = ref.read(authServiceProvider);
    final firestoreService = ref.read(firestoreServiceProvider);
    final currentUserId = authService.currentUser?.uid;
    
    if (currentUserId == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('pleaseLogin'.tr())),
      );
      return;
    }
    
    try {
      await firestoreService.addFriend(currentUserId, userId);
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('friendAdded'.tr())),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('errorAddingFriend'.tr())),
        );
      }
    }
  }
  
  // İsmin baş harflerini al
  String _getInitials(String name) {
    if (name.isEmpty) return '';
    
    final nameParts = name.split(' ');
    String initials = '';
    
    for (var part in nameParts) {
      if (part.isNotEmpty) {
        initials += part[0].toUpperCase();
        if (initials.length >= 2) break;
      }
    }
    
    return initials;
  }
}
  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\gifts\send_gift_screen.dart  
====================  
  
﻿// send_gift_screen.dart - v1.0.0
// Arkadaşa hediye gönderme ekranı
// Klasör: lib/features/gifts/send_gift_screen.dart

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/providers/providers.dart';
import 'package:zikirmo_new/core/models/user_model.dart';
import 'package:zikirmo_new/core/services/auth_service.dart';
import 'package:zikirmo_new/core/services/firestore_service.dart';

// Hediye türleri
enum GiftType {
  tespih,
  buton,
  premium,
}

// Hediye modeli
class Gift {
  final String id;
  final String name;
  final String description;
  final GiftType type;
  final int price;
  final String imagePath;
  
  const Gift({
    required this.id,
    required this.name,
    required this.description,
    required this.type,
    required this.price,
    required this.imagePath,
  });
}

// Kullanılabilir hediyeler listesi
final gifts = [
  Gift(
    id: 'tespih_1',
    name: 'Ahşap Tespih',
    description: 'Geleneksel ahşap tespih',
    type: GiftType.tespih,
    price: 50,
    imagePath: 'assets/images/gifts/tespih_1.png',
  ),
  Gift(
    id: 'tespih_2',
    name: 'Kehribar Tespih',
    description: 'Lüks kehribar tespih',
    type: GiftType.tespih,
    price: 100,
    imagePath: 'assets/images/gifts/tespih_2.png',
  ),
  Gift(
    id: 'button_1',
    name: 'Altın Buton',
    description: 'Altın renkli zikir butonu',
    type: GiftType.buton,
    price: 75,
    imagePath: 'assets/images/gifts/button_1.png',
  ),
  Gift(
    id: 'button_2',
    name: 'Gümüş Buton',
    description: 'Gümüş renkli zikir butonu',
    type: GiftType.buton,
    price: 75,
    imagePath: 'assets/images/gifts/button_2.png',
  ),
  Gift(
    id: 'premium_1',
    name: '1 Aylık Premium',
    description: 'Bir aylık premium üyelik hediyesi',
    type: GiftType.premium,
    price: 200,
    imagePath: 'assets/images/gifts/premium.png',
  ),
];

// Mevcut kullanıcının puan bilgilerini getiren provider
final userPointsProvider = FutureProvider<int>((ref) async {
  final authService = ref.watch(authServiceProvider);
  final firestoreService = ref.watch(firestoreServiceProvider);
  final userId = authService.currentUser?.uid;
  
  if (userId == null) return 0;
  
  final user = await firestoreService.getUser(userId);
  return user?.points ?? 0;
});

class SendGiftScreen extends ConsumerStatefulWidget {
  final String receiverId;
  
  const SendGiftScreen({
    Key? key,
    required this.receiverId,
  }) : super(key: key);

  @override
  ConsumerState<SendGiftScreen> createState() => _SendGiftScreenState();
}

class _SendGiftScreenState extends ConsumerState<SendGiftScreen> {
  Gift? _selectedGift;
  bool _isLoading = false;
  UserModel? _receiver;
  
  @override
  void initState() {
    super.initState();
    _loadReceiverData();
  }
  
  // Alıcı kullanıcı bilgilerini yükle
  Future<void> _loadReceiverData() async {
    final firestoreService = ref.read(firestoreServiceProvider);
    final user = await firestoreService.getUser(widget.receiverId);
    
    if (mounted) {
      setState(() {
        _receiver = user;
      });
    }
  }
  
  // Hediye gönder
  Future<void> _sendGift() async {
    if (_selectedGift == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Lütfen bir hediye seçin'.tr())),
      );
      return;
    }
    
    setState(() {
      _isLoading = true;
    });
    
    try {
      final authService = ref.read(authServiceProvider);
      final firestoreService = ref.read(firestoreServiceProvider);
      final currentUserId = authService.currentUser?.uid;
      
      if (currentUserId == null) {
        throw Exception('Kullanıcı girişi gerekli');
      }
      
      // Kullanıcının puanını kontrol et
      final userPoints = await firestoreService.getUserPoints(currentUserId);
      
      if (userPoints < _selectedGift!.price) {
        throw Exception('Yetersiz puan');
      }
      
      // Hediyeyi gönder
      await firestoreService.sendGift(
        senderId: currentUserId,
        receiverId: widget.receiverId,
        giftId: _selectedGift!.id,
        giftType: _selectedGift!.type.toString(),
        giftPrice: _selectedGift!.price,
      );
      
      if (mounted) {
        // Başarı mesajı göster
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Hediye gönderildi'.tr())),
        );
        
        // Kullanıcı puanlarını yenile
        ref.refresh(userPointsProvider);
        
        // Ekranı kapat
        Navigator.pop(context);
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              e.toString().contains('Yetersiz puan')
                  ? 'Yetersiz puan'.tr()
                  : 'Hediye gönderilirken hata oluştu'.tr(),
            ),
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final userPointsAsync = ref.watch(userPointsProvider);
    
    return Scaffold(
      appBar: AppBar(
        title: Text('Hediye Gönder'.tr()),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Kullanıcı puanları
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Row(
                  children: [
                    const Icon(Icons.monetization_on),
                    const SizedBox(width: 16),
                    userPointsAsync.when(
                      data: (points) => Text(
                        'points'.tr(args: [points.toString()]),
                        style: const TextStyle(fontWeight: FontWeight.bold),
                      ),
                      loading: () => const Text('Yükleniyor...'),
                      error: (_, __) => const Text('Hata'),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),
            
            // Alıcı bilgisi
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Row(
                  children: [
                    const Icon(Icons.person),
                    const SizedBox(width: 16),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Kime:'.tr(),
                            style: Theme.of(context).textTheme.bodySmall,
                          ),
                          const SizedBox(height: 4),
                          Text(
                            _receiver?.nickname ?? 'Yükleniyor...'.tr(),
                            style: const TextStyle(
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 24),
            
            // Hediye seçimi başlığı
            Text(
              'Bir hediye seçin'.tr(),
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 16),
            
            // Hediyeler listesi
            Expanded(
              child: GridView.builder(
                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: 2,
                  childAspectRatio: 0.75,
                  crossAxisSpacing: 16,
                  mainAxisSpacing: 16,
                ),
                itemCount: gifts.length,
                itemBuilder: (context, index) {
                  final gift = gifts[index];
                  final isSelected = _selectedGift?.id == gift.id;
                  
                  return Card(
                    color: isSelected
                        ? Theme.of(context).primaryColor.withOpacity(0.1)
                        : null,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                      side: isSelected
                          ? BorderSide(
                              color: Theme.of(context).primaryColor,
                              width: 2,
                            )
                          : BorderSide.none,
                    ),
                    child: InkWell(
                      onTap: () {
                        setState(() {
                          _selectedGift = gift;
                        });
                      },
                      borderRadius: BorderRadius.circular(12),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.center,
                        children: [
                          // Hediye resmi
                          Expanded(
                            child: Padding(
                              padding: const EdgeInsets.all(8.0),
                              child: Image.asset(
                                gift.imagePath,
                                errorBuilder: (_, __, ___) => const Icon(
                                  Icons.card_giftcard,
                                  size: 64,
                                ),
                              ),
                            ),
                          ),
                          
                          // Hediye bilgileri
                          Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.center,
                              children: [
                                Text(
                                  gift.name,
                                  style: const TextStyle(
                                    fontWeight: FontWeight.bold,
                                  ),
                                  textAlign: TextAlign.center,
                                ),
                                const SizedBox(height: 4),
                                Text(
                                  gift.description,
                                  style: Theme.of(context).textTheme.bodySmall,
                                  textAlign: TextAlign.center,
                                ),
                                const SizedBox(height: 8),
                                Container(
                                  padding: const EdgeInsets.symmetric(
                                    horizontal: 12,
                                    vertical: 4,
                                  ),
                                  decoration: BoxDecoration(
                                    color: Colors.amber,
                                    borderRadius: BorderRadius.circular(12),
                                  ),
                                  child: Text(
                                    '${gift.price} Puan',
                                    style: const TextStyle(
                                      fontWeight: FontWeight.bold,
                                      color: Colors.black,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ),
                  );
                },
              ),
            ),
            
            // Gönder butonu
            SizedBox(
              width: double.infinity,
              height: 50,
              child: _isLoading
                  ? const Center(child: CircularProgressIndicator())
                  : ElevatedButton(
                      onPressed: _selectedGift == null ? null : _sendGift,
                      child: Text('Hediyeyi Gönder'.tr()),
                    ),
            ),
          ],
        ),
      ),
    );
  }
}
  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\history\zikir_history_screen.dart  
====================  
  
﻿// lib/features/history/zikir_history_screen.dart

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/providers/providers.dart';
import 'package:zikirmo_new/core/services/auth_service.dart';
import 'package:zikirmo_new/core/services/firestore_service.dart';
import 'package:zikirmo_new/core/models/user_zikir_model.dart';
import 'package:zikirmo_new/core/models/zikir_model.dart';
import 'package:zikirmo_new/routes.dart';

// Zikir geçmişini getiren provider
final zikirHistoryProvider = FutureProvider.family<List<UserZikirModel>, String>((ref, period) async {
  final authService = ref.watch(authServiceProvider);
  final firestoreService = ref.watch(firestoreServiceProvider);
  final userId = authService.currentUser?.uid;
  
  if (userId == null) return [];
  
  try {
    DateTime startDate;
    final now = DateTime.now();
    
    switch (period) {
      case 'today':
        startDate = DateTime(now.year, now.month, now.day);
        break;
      case 'week':
        startDate = now.subtract(const Duration(days: 7));
        break;
      case 'month':
        startDate = DateTime(now.year, now.month, 1);
        break;
      case 'all':
      default:
        startDate = DateTime(2020, 1, 1); // Çok eski bir tarih
        break;
    }
    
    final snapshot = await firestoreService.firestore
        .collection('user_zikirs')
        .where('userId', isEqualTo: userId)
        .where('createdAt', isGreaterThanOrEqualTo: startDate)
        .orderBy('createdAt', descending: true)
        .limit(100)
        .get();
    
    return snapshot.docs
        .map((doc) => UserZikirModel.fromFirestore(doc))
        .toList();
  } catch (e) {
    return [];
  }
});

// Zikir detaylarını getiren provider
final zikirDetailsProvider = FutureProvider.family<ZikirModel?, String>((ref, zikirId) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return await firestoreService.getZikir(zikirId);
});

class ZikirHistoryScreen extends ConsumerStatefulWidget {
  const ZikirHistoryScreen({Key? key}) : super(key: key);

  @override
  ConsumerState<ZikirHistoryScreen> createState() => _ZikirHistoryScreenState();
}

class _ZikirHistoryScreenState extends ConsumerState<ZikirHistoryScreen> {
  String _selectedPeriod = 'all';
  
  @override
  Widget build(BuildContext context) {
    final historyAsync = ref.watch(zikirHistoryProvider(_selectedPeriod));
    
    return Scaffold(
      appBar: AppBar(
        title: Text('zikirHistory'.tr()),
        actions: [
          PopupMenuButton<String>(
            onSelected: (value) {
              setState(() {
                _selectedPeriod = value;
              });
            },
            itemBuilder: (context) => [
              PopupMenuItem(value: 'today', child: Text('today'.tr())),
              PopupMenuItem(value: 'week', child: Text('thisWeek'.tr())),
              PopupMenuItem(value: 'month', child: Text('thisMonth'.tr())),
              PopupMenuItem(value: 'all', child: Text('all'.tr())),
            ],
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(_getPeriodDisplayName(_selectedPeriod)),
                  const Icon(Icons.arrow_drop_down),
                ],
              ),
            ),
          ),
        ],
      ),
      body: historyAsync.when(
        data: (history) {
          if (history.isEmpty) {
            return _buildEmptyState();
          }
          
          return RefreshIndicator(
            onRefresh: () async {
              ref.refresh(zikirHistoryProvider(_selectedPeriod));
            },
            child: Column(
              children: [
                // İstatistik kartı
                _buildStatsCard(history),
                
                // Geçmiş listesi
                Expanded(
                  child: ListView.builder(
                    padding: const EdgeInsets.symmetric(horizontal: 16),
                    itemCount: history.length,
                    itemBuilder: (context, index) {
                      final userZikir = history[index];
                      return _buildHistoryItem(userZikir);
                    },
                  ),
                ),
              ],
            ),
          );
        },
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stack) => _buildErrorState(),
      ),
    );
  }
  
  // İstatistik kartı
  Widget _buildStatsCard(List<UserZikirModel> history) {
    final totalZikirs = history.fold<int>(0, (sum, item) => sum + item.currentCount);
    final completedZikirs = history.where((item) => item.isCompleted).length;
    final totalTime = history.fold<Duration>(
      Duration.zero, 
      (sum, item) => sum + (item.timeSpent ?? Duration.zero)
    );
    
    return Card(
      margin: const EdgeInsets.all(16),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              _getStatsTitle(_selectedPeriod),
              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                _buildStatItem('totalZikirs'.tr(), totalZikirs.toString(), Icons.auto_awesome),
                _buildStatItem('completed'.tr(), completedZikirs.toString(), Icons.check_circle),
                _buildStatItem('duration'.tr(), _formatDuration(totalTime), Icons.access_time),
              ],
            ),
          ],
        ),
      ),
    );
  }
  
  // İstatistik öğesi
  Widget _buildStatItem(String label, String value, IconData icon) {
    return Column(
      children: [
        Icon(icon, color: Theme.of(context).primaryColor, size: 24),
        const SizedBox(height: 8),
        Text(
          value,
          style: const TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        Text(
          label,
          style: TextStyle(
            fontSize: 12,
            color: Colors.grey[600],
          ),
          textAlign: TextAlign.center,
        ),
      ],
    );
  }
  
  // Geçmiş öğesi
  Widget _buildHistoryItem(UserZikirModel userZikir) {
    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      child: Consumer(
        builder: (context, ref, child) {
          final zikirAsync = ref.watch(zikirDetailsProvider(userZikir.zikirId));
          
          return zikirAsync.when(
            data: (zikir) => _buildHistoryTile(userZikir, zikir),
            loading: () => _buildHistoryTileLoading(),
            error: (_, __) => _buildHistoryTileError(userZikir),
          );
        },
      ),
    );
  }
  
  // Geçmiş tile'ı
  Widget _buildHistoryTile(UserZikirModel userZikir, ZikirModel? zikir) {
    final progress = userZikir.progressPercentage;
    final isCompleted = userZikir.isCompleted;
    
    return ListTile(
      leading: CircleAvatar(
        backgroundColor: isCompleted ? Colors.green.withOpacity(0.2) : Theme.of(context).primaryColor.withOpacity(0.2),
        child: Icon(
          isCompleted ? Icons.check : Icons.auto_awesome,
          color: isCompleted ? Colors.green : Theme.of(context).primaryColor,
        ),
      ),
      title: Text(
        zikir?.getLocalizedTitle(context.locale.languageCode) ?? 'unknownZikir'.tr(),
        style: TextStyle(
          fontWeight: isCompleted ? FontWeight.bold : FontWeight.normal,
        ),
      ),
      subtitle: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const SizedBox(height: 4),
          Text('${userZikir.currentCount} / ${userZikir.targetCount}'),
          const SizedBox(height: 8),
          LinearProgressIndicator(
            value: progress,
            backgroundColor: Colors.grey[300],
            valueColor: AlwaysStoppedAnimation<Color>(
              isCompleted ? Colors.green : Theme.of(context).primaryColor,
            ),
          ),
          const SizedBox(height: 4),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                DateFormat('dd.MM.yyyy HH:mm').format(userZikir.createdAt),
                style: TextStyle(
                  fontSize: 12,
                  color: Colors.grey[600],
                ),
              ),
              if (userZikir.timeSpent != null)
                Text(
                  _formatDuration(userZikir.timeSpent!),
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.grey[600],
                  ),
                ),
            ],
          ),
        ],
      ),
      trailing: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          if (isCompleted)
            Icon(Icons.emoji_events, color: Colors.amber, size: 20),
          const SizedBox(width: 8),
          PopupMenuButton<String>(
            onSelected: (value) => _handleMenuAction(value, userZikir, zikir),
            itemBuilder: (context) => [
              if (zikir != null) ...[
                PopupMenuItem(
                  value: 'continue',
                  child: Row(
                    children: [
                      const Icon(Icons.play_arrow),
                      const SizedBox(width: 8),
                      Text('continue'.tr()),
                    ],
                  ),
                ),
                PopupMenuItem(
                  value: 'details',
                  child: Row(
                    children: [
                      const Icon(Icons.info),
                      const SizedBox(width: 8),
                      Text('details'.tr()),
                    ],
                  ),
                ),
              ],
              PopupMenuItem(
                value: 'delete',
                child: Row(
                  children: [
                    const Icon(Icons.delete, color: Colors.red),
                    const SizedBox(width: 8),
                    Text('delete'.tr(), style: TextStyle(color: Colors.red)),
                  ],
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
  
  // Yükleniyor tile'ı
  Widget _buildHistoryTileLoading() {
    return ListTile(
      leading: CircleAvatar(backgroundColor: Colors.grey[300]),
      title: Container(height: 16, color: Colors.grey[300]),
      subtitle: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const SizedBox(height: 4),
          Container(height: 12, width: 100, color: Colors.grey[300]),
          const SizedBox(height: 8),
          Container(height: 4, color: Colors.grey[300]),
        ],
      ),
    );
  }
  
  // Hata tile'ı
  Widget _buildHistoryTileError(UserZikirModel userZikir) {
    return ListTile(
      leading: CircleAvatar(
        backgroundColor: Colors.red.withOpacity(0.2),
        child: const Icon(Icons.error, color: Colors.red),
      ),
      title: Text('zikirInfoCouldNotLoad'.tr()),
      subtitle: Text('${userZikir.currentCount} / ${userZikir.targetCount}'),
    );
  }
  
  // Menü aksiyonları
  void _handleMenuAction(String action, UserZikirModel userZikir, ZikirModel? zikir) {
    switch (action) {
      case 'continue':
        if (zikir != null) {
          Navigator.pushNamed(
            context,
            AppRoutes.zikirCounter,
            arguments: zikir.id,
          );
        }
        break;
      case 'details':
        if (zikir != null) {
          Navigator.pushNamed(
            context,
            AppRoutes.zikirDetail,
            arguments: zikir.id,
          );
        }
        break;
      case 'delete':
        _showDeleteDialog(userZikir);
        break;
    }
  }
  
  // Silme onay dialog'u
  void _showDeleteDialog(UserZikirModel userZikir) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('deleteZikirRecord'.tr()),
        content: Text('deleteZikirConfirm'.tr()),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('cancel'.tr()),
          ),
          TextButton(
            onPressed: () async {
              Navigator.pop(context);
              await _deleteZikirRecord(userZikir);
            },
            child: Text('delete'.tr(), style: TextStyle(color: Colors.red)),
          ),
        ],
      ),
    );
  }
  
  // Zikir kaydını silme
  Future<void> _deleteZikirRecord(UserZikirModel userZikir) async {
    try {
      final firestoreService = ref.read(firestoreServiceProvider);
      await firestoreService.firestore
          .collection('user_zikirs')
          .doc(userZikir.id)
          .delete();
      
      // Provider'ı yenile
      ref.refresh(zikirHistoryProvider(_selectedPeriod));
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('zikirRecordDeleted'.tr())),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('deleteFailed'.tr(args: [e.toString()]))),
        );
      }
    }
  }
  
  // Boş durum
  Widget _buildEmptyState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.history,
            size: 80,
            color: Colors.grey[400],
          ),
          const SizedBox(height: 16),
          Text(
            'noZikirHistory'.tr(),
            style: Theme.of(context).textTheme.titleMedium,
          ),
          const SizedBox(height: 8),
          Text(
            'startZikirToSeeHistory'.tr(),
            style: TextStyle(color: Colors.grey[600]),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 24),
          ElevatedButton(
            onPressed: () {
              Navigator.pushNamed(context, AppRoutes.zikirCounter);
            },
            child: Text('pullFirstZikir'.tr()),
          ),
        ],
      ),
    );
  }
  
  // Hata durumu
  Widget _buildErrorState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.error_outline,
            size: 80,
            color: Colors.grey[400],
          ),
          const SizedBox(height: 16),
          Text(
            'errorLoadingHistory'.tr(),
            style: Theme.of(context).textTheme.titleMedium,
          ),
          const SizedBox(height: 16),
          ElevatedButton(
            onPressed: () {
              ref.refresh(zikirHistoryProvider(_selectedPeriod));
            },
            child: Text('tryAgain'.tr()),
          ),
        ],
      ),
    );
  }
  
  // Periyot görüntü adı
  String _getPeriodDisplayName(String period) {
    switch (period) {
      case 'today':
        return 'today'.tr();
      case 'week':
        return 'thisWeek'.tr();
      case 'month':
        return 'thisMonth'.tr();
      case 'all':
      default:
        return 'all'.tr();
    }
  }
  
  // İstatistik başlığı
  String _getStatsTitle(String period) {
    switch (period) {
      case 'today':
        return 'todayStats'.tr();
      case 'week':
        return 'thisWeekStats'.tr();
      case 'month':
        return 'thisMonthStats'.tr();
      case 'all':
      default:
        return 'allTimeStats'.tr();
    }
  }
  
  // Süre formatlama
  String _formatDuration(Duration duration) {
    if (duration.inHours > 0) {
      return 'hoursMinutes'.tr(args: [duration.inHours.toString(), duration.inMinutes.remainder(60).toString()]);
    } else if (duration.inMinutes > 0) {
      return 'minutes'.tr(args: [duration.inMinutes.toString()]);
    } else {
      return 'seconds'.tr(args: [duration.inSeconds.toString()]);
    }
  }
}
  
  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\home\home_screen.dart  
====================  
  
// Dosya: lib/features/home/home_screen.dart
// Yol: C:\src\zikirmo_new\lib\features\home\home_screen.dart
// Açıklama: Ana ekran - tüm hardcoded string'ler i18n'e çevrildi

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/providers/providers.dart';
import 'package:zikirmo_new/routes.dart';
import 'package:zikirmo_new/core/models/zikir_model.dart';
import 'package:zikirmo_new/core/services/firestore_service.dart';
import 'package:zikirmo_new/core/services/auth_service.dart';

// Popüler zikirler için provider
final popularZikirsProvider = FutureProvider<List<ZikirModel>>((ref) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return await firestoreService.getPopularZikirs(limit: 5);
});

// Kullanıcı bilgileri için provider  
final currentUserProvider = FutureProvider((ref) async {
  final authService = ref.watch(authServiceProvider);
  final firestoreService = ref.watch(firestoreServiceProvider);
  final userId = authService.currentUser?.uid;
  
  if (userId != null) {
    return await firestoreService.getUser(userId);
  }
  return null;
});

class HomeScreen extends ConsumerStatefulWidget {
  const HomeScreen({super.key});

  @override
  ConsumerState<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends ConsumerState<HomeScreen> {
  int _selectedIndex = 0;

  // Bottom navigation'daki sayfa değişimi
  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
    
    // Her tab için ilgili sayfaya yönlendirme
    switch (index) {
      case 0:
        // Ana sayfa - zaten buradayız
        break;
      case 1:
        Navigator.pushNamed(context, AppRoutes.categories);
        break;
      case 2:
        Navigator.pushNamed(context, AppRoutes.leaderboard);
        break;
      case 3:
        Navigator.pushNamed(context, AppRoutes.friends);
        break;
      case 4:
        Navigator.pushNamed(context, AppRoutes.profile);
        break;
    }
  }

  @override
  Widget build(BuildContext context) {
    final popularZikirsAsync = ref.watch(popularZikirsProvider);
    final currentUserAsync = ref.watch(currentUserProvider);
    
    return Scaffold(
      appBar: AppBar(
        title: Text('homeTitle'.tr()),
        actions: [
          IconButton(
            icon: const Icon(Icons.notifications_outlined),
            onPressed: () {
              Navigator.pushNamed(context, AppRoutes.notifications);
            },
            tooltip: 'notifications'.tr(),
          ),
          IconButton(
            icon: const Icon(Icons.person_outline),
            onPressed: () {
              Navigator.pushNamed(context, AppRoutes.profile);
            },
            tooltip: 'profile'.tr(),
          ),
        ],
      ),
      body: RefreshIndicator(
        onRefresh: () async {
          ref.refresh(popularZikirsProvider);
          ref.refresh(currentUserProvider);
        },
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Kullanıcı karşılama kartı
              currentUserAsync.when(
                data: (user) => _buildWelcomeCard(context, user),
                loading: () => _buildWelcomeCardLoading(),
                error: (_, __) => _buildWelcomeCard(context, null),
              ),
              
              const SizedBox(height: 24),
              
              // Hızlı aksiyonlar
              _buildQuickActions(context),
              
              const SizedBox(height: 24),
              
              // Kategoriler başlığı
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    'categories'.tr(),
                    style: Theme.of(context).textTheme.titleLarge,
                  ),
                  TextButton(
                    onPressed: () {
                      Navigator.pushNamed(context, AppRoutes.categories);
                    },
                    child: Text('viewAll'.tr()),
                  ),
                ],
              ),
              
              const SizedBox(height: 16),
              
              // Kategori kartları
              _buildCategoriesGrid(context),
              
              const SizedBox(height: 24),
              
              // Popüler zikirler başlığı
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    'popularZikirs'.tr(),
                    style: Theme.of(context).textTheme.titleLarge,
                  ),
                  TextButton(
                    onPressed: () {
                      Navigator.pushNamed(context, AppRoutes.suggestedZikirs);
                    },
                    child: Text('viewAll'.tr()),
                  ),
                ],
              ),
              
              const SizedBox(height: 16),
              
              // Popüler zikirler listesi
              popularZikirsAsync.when(
                data: (zikirs) => _buildPopularZikirs(context, zikirs),
                loading: () => _buildPopularZikirsLoading(),
                error: (_, __) => _buildPopularZikirsError(),
              ),
            ],
          ),
        ),
      ),
      bottomNavigationBar: BottomNavigationBar(
        type: BottomNavigationBarType.fixed,
        currentIndex: _selectedIndex,
        onTap: _onItemTapped,
        selectedItemColor: Theme.of(context).primaryColor,
        unselectedItemColor: Colors.grey,
        items: [
          BottomNavigationBarItem(
            icon: const Icon(Icons.home),
            label: 'home'.tr(),
          ),
          BottomNavigationBarItem(
            icon: const Icon(Icons.category),
            label: 'categories'.tr(),
          ),
          BottomNavigationBarItem(
            icon: const Icon(Icons.leaderboard),
            label: 'leaderboard'.tr(),
          ),
          BottomNavigationBarItem(
            icon: const Icon(Icons.people),
            label: 'friends'.tr(),
          ),
          BottomNavigationBarItem(
            icon: const Icon(Icons.person),
            label: 'profile'.tr(),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          Navigator.pushNamed(context, AppRoutes.zikirCounter);
        },
        backgroundColor: Theme.of(context).primaryColor,
        child: const Icon(Icons.add, color: Colors.white),
        tooltip: 'quickZikir'.tr(),
      ),
      floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked,
    );
  }

  // Karşılama kartı
  Widget _buildWelcomeCard(BuildContext context, dynamic user) {
    final userName = user?.nickname ?? 'defaultUser'.tr();
    final userPoints = user?.points ?? 0;
    final userLevel = user?.level ?? 'levelBeginner';
    
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(16),
          gradient: LinearGradient(
            colors: [
              Theme.of(context).primaryColor,
              Theme.of(context).primaryColor.withOpacity(0.8),
            ],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  CircleAvatar(
                    backgroundColor: Colors.white.withOpacity(0.3),
                    child: Text(
                      userName.isNotEmpty ? userName[0].toUpperCase() : 'U',
                      style: const TextStyle(
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'welcomeUser'.tr(args: [userName]),
                          style: const TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                        ),
                        Text(
                          'userStats'.tr(args: [userLevel.tr(), userPoints.toString()]),
                          style: const TextStyle(
                            fontSize: 14,
                            color: Colors.white70,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              Row(
                children: [
                  Expanded(
                    child: ElevatedButton.icon(
                      onPressed: () {
                        Navigator.pushNamed(context, AppRoutes.zikirCounter);
                      },
                      icon: const Icon(Icons.play_arrow),
                      label: Text('startZikir'.tr()),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.white,
                        foregroundColor: Theme.of(context).primaryColor,
                      ),
                    ),
                  ),
                  const SizedBox(width: 12),
                  ElevatedButton(
                    onPressed: () {
                      Navigator.pushNamed(context, AppRoutes.statistics);
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.white.withOpacity(0.2),
                      foregroundColor: Colors.white,
                    ),
                    child: const Icon(Icons.bar_chart),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  // Karşılama kartı yükleniyor durumu
  Widget _buildWelcomeCardLoading() {
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: Container(
        height: 140,
        padding: const EdgeInsets.all(20.0),
        child: const Center(
          child: CircularProgressIndicator(),
        ),
      ),
    );
  }

  // Hızlı aksiyonlar
  Widget _buildQuickActions(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
      children: [
        _buildQuickActionCard(
          context,
          Icons.auto_awesome,
          'suggested'.tr(),
          () => Navigator.pushNamed(context, AppRoutes.suggestedZikirs),
        ),
        _buildQuickActionCard(
          context,
          Icons.history,
          'history'.tr(),
          () => Navigator.pushNamed(context, AppRoutes.zikirHistory),
        ),
        _buildQuickActionCard(
          context,
          Icons.add_circle,
          'customZikir'.tr(),
          () => Navigator.pushNamed(context, AppRoutes.customZikir),
        ),
        _buildQuickActionCard(
          context,
          Icons.emoji_events,
          'achievements'.tr(),
          () => Navigator.pushNamed(context, AppRoutes.challenges),
        ),
      ],
    );
  }

  // Hızlı aksiyon kartı
  Widget _buildQuickActionCard(
    BuildContext context,
    IconData icon,
    String label,
    VoidCallback onTap,
  ) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        width: 70,
        padding: const EdgeInsets.symmetric(vertical: 12),
        child: Column(
          children: [
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Theme.of(context).primaryColor.withOpacity(0.1),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Icon(
                icon,
                color: Theme.of(context).primaryColor,
                size: 24,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              label,
              style: const TextStyle(fontSize: 12),
              textAlign: TextAlign.center,
              maxLines: 1,
              overflow: TextOverflow.ellipsis,
            ),
          ],
        ),
      ),
    );
  }

  // Kategoriler grid'i
  Widget _buildCategoriesGrid(BuildContext context) {
    final categories = [
      {'title': 'dailyZikirs'.tr(), 'icon': Icons.calendar_today, 'route': AppRoutes.categories},
      {'title': 'esmaUlHusna'.tr(), 'icon': Icons.star, 'route': AppRoutes.categories},
      {'title': 'prayers'.tr(), 'icon': Icons.favorite, 'route': AppRoutes.categories},
      {'title': 'salawat'.tr(), 'icon': Icons.people, 'route': AppRoutes.categories},
    ];

    return GridView.count(
      crossAxisCount: 2,
      crossAxisSpacing: 12,
      mainAxisSpacing: 12,
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      childAspectRatio: 1.2,
      children: categories.map((category) => 
        _buildCategoryCard(
          context, 
          category['title'] as String, 
          category['icon'] as IconData, 
          () => Navigator.pushNamed(context, category['route'] as String),
        )
      ).toList(),
    );
  }

  // Kategori kartı widget'ı
  Widget _buildCategoryCard(BuildContext context, String title, IconData icon, VoidCallback onTap) {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(icon, size: 32, color: Theme.of(context).primaryColor),
              const SizedBox(height: 12),
              Text(
                title,
                textAlign: TextAlign.center,
                style: const TextStyle(
                  fontSize: 14,
                  fontWeight: FontWeight.w600,
                ),
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
              ),
            ],
          ),
        ),
      ),
    );
  }

  // Popüler zikirler listesi
  Widget _buildPopularZikirs(BuildContext context, List<ZikirModel> zikirs) {
    if (zikirs.isEmpty) {
      return _buildPopularZikirsEmpty();
    }
    
    return ListView.builder(
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      itemCount: zikirs.length,
      itemBuilder: (context, index) {
        final zikir = zikirs[index];
        return Card(
          margin: const EdgeInsets.only(bottom: 8),
          child: ListTile(
            leading: CircleAvatar(
              backgroundColor: Theme.of(context).primaryColor.withOpacity(0.1),
              child: Icon(
                Icons.auto_awesome,
                color: Theme.of(context).primaryColor,
              ),
            ),
            title: Text(
              zikir.getLocalizedTitle(context.locale.languageCode),
              maxLines: 1,
              overflow: TextOverflow.ellipsis,
            ),
            subtitle: Text('target'.tr(args: [zikir.targetCount.toString()])),
            trailing: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                IconButton(
                  icon: const Icon(Icons.info_outline),
                  onPressed: () {
                    Navigator.pushNamed(
                      context, 
                      AppRoutes.zikirDetail,
                      arguments: zikir.id,
                    );
                  },
                  tooltip: 'details'.tr(),
                ),
                IconButton(
                  icon: const Icon(Icons.play_arrow),
                  onPressed: () {
                    Navigator.pushNamed(
                      context, 
                      AppRoutes.zikirCounter,
                      arguments: zikir.id,
                    );
                  },
                  tooltip: 'startZikir'.tr(),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  // Popüler zikirler yükleniyor durumu
  Widget _buildPopularZikirsLoading() {
    return ListView.builder(
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      itemCount: 3,
      itemBuilder: (context, index) {
        return Card(
          margin: const EdgeInsets.only(bottom: 8),
          child: ListTile(
            leading: CircleAvatar(
              backgroundColor: Colors.grey[300],
            ),
            title: Container(
              height: 16,
              color: Colors.grey[300],
            ),
            subtitle: Container(
              height: 12,
              width: 100,
              color: Colors.grey[300],
            ),
          ),
        );
      },
    );
  }

  // Popüler zikirler hata durumu
  Widget _buildPopularZikirsError() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            Icon(Icons.error_outline, size: 48, color: Colors.grey[400]),
            const SizedBox(height: 8),
            Text(
              'errorLoadingZikirs'.tr(),
              style: TextStyle(color: Colors.grey[600]),
            ),
            const SizedBox(height: 8),
            ElevatedButton(
              onPressed: () {
                ref.refresh(popularZikirsProvider);
              },
              child: Text('tryAgain'.tr()),
            ),
          ],
        ),
      ),
    );
  }

  // Popüler zikirler boş durumu
  Widget _buildPopularZikirsEmpty() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            Icon(Icons.auto_awesome_outlined, size: 48, color: Colors.grey[400]),
            const SizedBox(height: 8),
            Text(
              'noPopularZikirs'.tr(),
              style: TextStyle(color: Colors.grey[600]),
            ),
            const SizedBox(height: 8),
            ElevatedButton(
              onPressed: () {
                Navigator.pushNamed(context, AppRoutes.categories);
              },
              child: Text('exploreZikirs'.tr()),
            ),
          ],
        ),
      ),
    );
  }
}

  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\leaderboard\leaderboard_screen.dart  
====================  
  
﻿// Dosya: lib/features/leaderboard/leaderboard_screen.dart
// Açıklama: Günlük, haftalık, aylık ve arkadaş grupları için lider tablolarını gösterir.
// Klasör: lib/features/leaderboard

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/providers/providers.dart';
import 'package:zikirmo_new/core/models/user_model.dart';
import 'package:zikirmo_new/core/services/auth_service.dart';
import 'package:zikirmo_new/core/services/firestore_service.dart';
import 'package:zikirmo_new/core/config/theme_config.dart';

// Lider tablosu provider
final leaderboardProvider = FutureProvider.family<List<UserModel>, String>((ref, period) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return await firestoreService.getLeaderboard(period);
});

// Arkadaş lider tablosu provider
final friendsLeaderboardProvider = FutureProvider<List<UserModel>>((ref) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  final userId = ref.watch(authServiceProvider).currentUser?.uid;
  if (userId == null) return [];
  return await firestoreService.getFriends(userId);
});

class LeaderboardScreen extends ConsumerStatefulWidget {
  const LeaderboardScreen({super.key});

  @override
  ConsumerState<LeaderboardScreen> createState() => _LeaderboardScreenState();
}

class _LeaderboardScreenState extends ConsumerState<LeaderboardScreen> with SingleTickerProviderStateMixin {
  String _selectedPeriod = 'weekly';
  late TabController _tabController;
  int _selectedTabIndex = 0;
  
  // Medaller için renkler
  final List<Color> _medalColors = [
    const Color(0xFFFFD700), // Altın
    const Color(0xFFC0C0C0), // Gümüş
    const Color(0xFFCD7F32), // Bronz
  ];

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);
    _tabController.addListener(() {
      setState(() {
        _selectedTabIndex = _tabController.index;
      });
    });
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final leaderboardAsync = ref.watch(leaderboardProvider(_selectedPeriod));
    final friendsLeaderboardAsync = ref.watch(friendsLeaderboardProvider);
    
    return Scaffold(
      appBar: AppBar(
        title: Text('leaderboard'.tr()),
        bottom: TabBar(
          controller: _tabController,
          tabs: [
            Tab(text: 'topUsers'.tr()),
            Tab(text: 'friendsLeaderboard'.tr()),
          ],
        ),
      ),
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Süre filtresi
          if (_selectedTabIndex == 0) // Sadece genel tabloda göster
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: _buildPeriodFilter(),
            ),
          
          // Lider tablosu içeriği
          Expanded(
            child: TabBarView(
              controller: _tabController,
              children: [
                // Genel lider tablosu
                leaderboardAsync.when(
                  data: (users) => _buildLeaderboardList(users),
                  loading: () => const Center(child: CircularProgressIndicator()),
                  error: (error, stack) => Center(
                    child: Text('errorLoadingLeaderboard'.tr()),
                  ),
                ),
                
                // Arkadaşlar lider tablosu
                friendsLeaderboardAsync.when(
                  data: (friends) => _buildLeaderboardList(friends),
                  loading: () => const Center(child: CircularProgressIndicator()),
                  error: (error, stack) => Center(
                    child: Text('errorLoadingFriends'.tr()),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
  
  // Süre filtresi widget'ı
  Widget _buildPeriodFilter() {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      decoration: BoxDecoration(
        color: Theme.of(context).cardColor,
        borderRadius: BorderRadius.circular(12),
      ),
      child: Row(
        children: [
          Text(
            'period'.tr() + ':',
            style: TextStyle(
              fontWeight: FontWeight.bold,
              color: Theme.of(context).colorScheme.primary,
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: Row(
                children: [
                  _buildPeriodChip('daily'),
                  const SizedBox(width: 8),
                  _buildPeriodChip('weekly'),
                  const SizedBox(width: 8),
                  _buildPeriodChip('monthly'),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
  
  // Süre filtresi seçimi widget'ı
  Widget _buildPeriodChip(String period) {
    final isSelected = _selectedPeriod == period;
    
    return FilterChip(
      label: Text(period.tr()),
      selected: isSelected,
      onSelected: (selected) {
        setState(() {
          _selectedPeriod = period;
        });
      },
      backgroundColor: Theme.of(context).cardColor,
      selectedColor: ThemeConfig.primaryColor.withOpacity(0.2),
      checkmarkColor: ThemeConfig.primaryColor,
      labelStyle: TextStyle(
        color: isSelected ? ThemeConfig.primaryColor : Theme.of(context).textTheme.bodyLarge?.color,
        fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
      ),
    );
  }
  
  // Lider tablosu listesi
  Widget _buildLeaderboardList(List<UserModel> users) {
    if (users.isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(Icons.leaderboard, size: 64, color: Colors.grey),
            const SizedBox(height: 16),
            Text(
              _selectedTabIndex == 0 ? 'noUsers'.tr() : 'noFriends'.tr(),
              style: const TextStyle(fontSize: 16, color: Colors.grey),
            ),
          ],
        ),
      );
    }
    
    // Puanlarına göre kullanıcıları sırala
    users.sort((a, b) => b.points.compareTo(a.points));
    
    return ListView.builder(
      padding: const EdgeInsets.symmetric(vertical: 8),
      itemCount: users.length + 1, // +1 başlık için
      itemBuilder: (context, index) {
        // Başlık satırı
        if (index == 0) {
          return Container(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
            decoration: BoxDecoration(
              color: Theme.of(context).cardColor,
              borderRadius: BorderRadius.circular(12),
            ),
            child: Row(
              children: [
                const SizedBox(width: 40), // Sıra numarası için boşluk
                Expanded(
                  flex: 2,
                  child: Text(
                    'user'.tr(),
                    style: const TextStyle(fontWeight: FontWeight.bold),
                  ),
                ),
                Expanded(
                  child: Text(
                    'points'.tr(args: ['']),
                    style: const TextStyle(fontWeight: FontWeight.bold),
                    textAlign: TextAlign.center,
                  ),
                ),
                Expanded(
                  child: Text(
                    'level'.tr(args: ['']),
                    style: const TextStyle(fontWeight: FontWeight.bold),
                    textAlign: TextAlign.center,
                  ),
                ),
              ],
            ),
          );
        }
        
        final userIndex = index - 1; // Başlık satırını çıkar
        final user = users[userIndex];
        final isCurrentUser = user.id == ref.read(authServiceProvider).currentUser?.uid;
        
        // Kullanıcı sırası 
        final rank = userIndex + 1;
        
        return Container(
          margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
          decoration: BoxDecoration(
            color: isCurrentUser 
                ? ThemeConfig.primaryColor.withOpacity(0.1)
                : Theme.of(context).cardColor,
            borderRadius: BorderRadius.circular(12),
            border: isCurrentUser
                ? Border.all(color: ThemeConfig.primaryColor, width: 1.5)
                : null,
          ),
          child: ListTile(
            contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
            leading: _buildRankWidget(rank),
            title: Row(
              children: [
                // Kullanıcı adı ve premium işareti
                Expanded(
                  flex: 2,
                  child: Row(
                    children: [
                      CircleAvatar(
                        backgroundColor: _getAvatarColor(user.nickname),
                        radius: 18,
                        child: Text(
                          user.nickname.isNotEmpty ? user.nickname[0].toUpperCase() : '?',
                          style: const TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Row(
                              children: [
                                Flexible(
                                  child: Text(
                                    user.nickname,
                                    style: TextStyle(
                                      fontWeight: isCurrentUser ? FontWeight.bold : FontWeight.normal,
                                      fontSize: 16,
                                    ),
                                    maxLines: 1,
                                    overflow: TextOverflow.ellipsis,
                                  ),
                                ),
                                if (user.isPremium) 
                                  const Icon(
                                    Icons.verified,
                                    color: ThemeConfig.primaryColor,
                                    size: 16,
                                  ),
                              ],
                            ),
                            if (isCurrentUser)
                              Text(
                                'you'.tr(),
                                style: TextStyle(
                                  fontSize: 12,
                                  color: ThemeConfig.primaryColor,
                                ),
                              ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
                
                // Puan
                Expanded(
                  child: Text(
                    user.points.toString(),
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: isCurrentUser ? ThemeConfig.primaryColor : null,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ),
                
                // Seviye
                Expanded(
                  child: Text(
                    user.level.tr(),
                    style: TextStyle(
                      fontSize: 12,
                      color: isCurrentUser ? ThemeConfig.primaryColor : Colors.grey[600],
                    ),
                    textAlign: TextAlign.center,
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                  ),
                ),
              ],
            ),
            onTap: () {
              // Kullanıcı profiline git veya detay göster
              if (user.id == ref.read(authServiceProvider).currentUser?.uid) {
                Navigator.pushNamed(context, '/profile');
              } else {
                _showUserDetailDialog(user);
              }
            },
          ),
        );
      },
    );
  }
  
  // Sıralama widget'ı (madalya veya numara)
  Widget _buildRankWidget(int rank) {
    // İlk 3 için madalya
    if (rank <= 3) {
      return Container(
        width: 40,
        height: 40,
        decoration: BoxDecoration(
          color: _medalColors[rank - 1].withOpacity(0.2),
          shape: BoxShape.circle,
        ),
        child: Center(
          child: Icon(
            Icons.emoji_events,
            color: _medalColors[rank - 1],
            size: 24,
          ),
        ),
      );
    }
    
    // Diğerleri için sıra numarası
    return Container(
      width: 40,
      height: 40,
      decoration: BoxDecoration(
        color: Colors.grey[200],
        shape: BoxShape.circle,
      ),
      child: Center(
        child: Text(
          rank.toString(),
          style: TextStyle(
            fontWeight: FontWeight.bold,
            color: Colors.grey[800],
          ),
        ),
      ),
    );
  }
  
  // Kullanıcı detay diyaloğu
  void _showUserDetailDialog(UserModel user) {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          contentPadding: EdgeInsets.zero,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              // Üst kısım (arka plan ve avatar)
              Container(
                width: double.infinity,
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: ThemeConfig.primaryColor,
                  borderRadius: const BorderRadius.only(
                    topLeft: Radius.circular(16),
                    topRight: Radius.circular(16),
                  ),
                ),
                child: Column(
                  children: [
                    CircleAvatar(
                      backgroundColor: Colors.white,
                      radius: 40,
                      child: Text(
                        user.nickname.isNotEmpty ? user.nickname[0].toUpperCase() : '?',
                        style: TextStyle(
                          fontSize: 32,
                          fontWeight: FontWeight.bold,
                          color: _getAvatarColor(user.nickname),
                        ),
                      ),
                    ),
                    const SizedBox(height: 16),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Text(
                          user.nickname,
                          style: const TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                        ),
                        if (user.isPremium) 
                          const Padding(
                            padding: EdgeInsets.only(left: 4),
                            child: Icon(
                              Icons.verified,
                              color: Colors.white,
                              size: 20,
                            ),
                          ),
                      ],
                    ),
                    const SizedBox(height: 4),
                    Text(
                      user.level.tr(),
                      style: const TextStyle(
                        fontSize: 16,
                        color: Colors.white70,
                      ),
                    ),
                  ],
                ),
              ),
              
              // Alt kısım (istatistikler)
              Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  children: [
                    _buildUserStat(
                      Icons.grade,
                      'points'.tr(args: [user.points.toString()]),
                    ),
                    const SizedBox(height: 12),
                    _buildUserStat(
                      Icons.auto_awesome,
                      'totalZikirs'.tr(args: [user.totalZikirCount.toString()]),
                    ),
                    const SizedBox(height: 12),
                    _buildUserStat(
                      Icons.whatshot,
                      'currentStreak'.tr(args: [user.currentStreak.toString()]),
                    ),
                    const SizedBox(height: 12),
                    _buildUserStat(
                      Icons.badge,
                      'badges'.tr() + ': ' + user.badges.length.toString(),
                    ),
                  ],
                ),
              ),
              
              // Aksiyon butonları
              Padding(
                padding: const EdgeInsets.all(16),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    // Arkadaş ekleme/çıkarma butonu
                    _buildActionButton(
                      _isUserFriend(user.id) ? Icons.person_remove : Icons.person_add,
                      _isUserFriend(user.id) ? 'removeFriend'.tr() : 'addFriend'.tr(),
                      () => _toggleFriendship(user.id),
                    ),
                    
                    // Dua gönderme butonu
                    _buildActionButton(
                      Icons.favorite,
                      'sendDua'.tr(),
                      () => _sendDua(user.id),
                    ),
                    
                    // Alkış gönderme butonu
                    _buildActionButton(
                      Icons.emoji_events,
                      'sendClap'.tr(),
                      () => _sendClap(user.id),
                    ),
                  ],
                ),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: Text('close'.tr()),
            ),
          ],
        );
      },
    );
  }
  
  // Kullanıcı istatistiği widget'ı
  Widget _buildUserStat(IconData icon, String text) {
    return Row(
      children: [
        Icon(icon, color: ThemeConfig.primaryColor, size: 20),
        const SizedBox(width: 12),
        Text(
          text,
          style: const TextStyle(fontSize: 16),
        ),
      ],
    );
  }
  
  // Aksiyon butonu widget'ı
  Widget _buildActionButton(IconData icon, String label, VoidCallback onPressed) {
    return InkWell(
      onTap: onPressed,
      borderRadius: BorderRadius.circular(8),
      child: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(icon, color: ThemeConfig.primaryColor),
            const SizedBox(height: 4),
            Text(
              label,
              style: TextStyle(
                fontSize: 12,
                color: Colors.grey[700],
              ),
            ),
          ],
        ),
      ),
    );
  }
  
  // Kullanıcının arkadaş olup olmadığını kontrol et
  bool _isUserFriend(String userId) {
    final currentUser = ref.read(authServiceProvider).currentUser;
    if (currentUser == null) return false;
    
    final friendsAsync = ref.read(friendsLeaderboardProvider);
    return friendsAsync.maybeWhen(
      data: (friends) => friends.any((friend) => friend.id == userId),
      orElse: () => false,
    );
  }
  
  // Arkadaşlık durumunu değiştir
  Future<void> _toggleFriendship(String friendId) async {
    final currentUser = ref.read(authServiceProvider).currentUser;
    if (currentUser == null) {
      _showAuthError();
      return;
    }
    
    try {
      final firestoreService = ref.read(firestoreServiceProvider);
      final isFriend = _isUserFriend(friendId);
      
      if (isFriend) {
        await firestoreService.removeFriend(currentUser.uid, friendId);
        if (mounted) {
          Navigator.pop(context);
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('friendRemoved'.tr())),
          );
        }
      } else {
        final user = await firestoreService.getUser(currentUser.uid);
        if (user != null && !user.canAddMoreFriends() && !user.isPremium) {
          if (mounted) {
            Navigator.pop(context);
            _showPremiumRequiredDialog('friendLimitReached'.tr());
          }
          return;
        }
        
        await firestoreService.addFriend(currentUser.uid, friendId);
        if (mounted) {
          Navigator.pop(context);
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('friendAdded'.tr())),
          );
        }
      }
      
      // Arkadaş listesini yenile
      ref.refresh(friendsLeaderboardProvider);
      
    } catch (e) {
      if (mounted) {
        Navigator.pop(context);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('errorFriendAction'.tr())),
        );
      }
    }
  }
  
  // Dua gönder
  Future<void> _sendDua(String receiverId) async {
    final currentUser = ref.read(authServiceProvider).currentUser;
    if (currentUser == null) {
      _showAuthError();
      return;
    }
    
    try {
      // Burada dua gönderme işlemi yapılabilir
      
      if (mounted) {
        Navigator.pop(context);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('duaSent'.tr())),
        );
      }
    } catch (e) {
      if (mounted) {
        Navigator.pop(context);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('errorSendingDua'.tr())),
        );
      }
    }
  }
  
  // Alkış gönder
  Future<void> _sendClap(String receiverId) async {
    final currentUser = ref.read(authServiceProvider).currentUser;
    if (currentUser == null) {
      _showAuthError();
      return;
    }
    
    try {
      // Burada alkış gönderme işlemi yapılabilir
      
      if (mounted) {
        Navigator.pop(context);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('clapSent'.tr())),
        );
      }
    } catch (e) {
      if (mounted) {
        Navigator.pop(context);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('errorSendingClap'.tr())),
        );
      }
    }
  }
  
  // Yetkilendirme hatası
  void _showAuthError() {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('pleaseLogin'.tr())),
    );
  }
  
  // Premium gerektiği durumda dialog göster
  void _showPremiumRequiredDialog(String message) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('premiumRequired'.tr()),
        content: Text(message),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('cancel'.tr()),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              Navigator.pushNamed(context, '/membership_info');
            },
            child: Text('upgradeToPremium'.tr()),
          ),
        ],
      ),
    );
  }
  
  // Avatar arka plan rengi oluştur
  Color _getAvatarColor(String nickname) {
    if (nickname.isEmpty) return ThemeConfig.primaryColor;
    
    // Hash kodu kullanarak tutarlı renk oluştur
    final int hash = nickname.codeUnits.fold(0, (prev, element) => prev + element);
    final colors = [
      Colors.teal,
      Colors.blue,
      Colors.purple,
      Colors.orange,
      Colors.pink,
      Colors.indigo,
      Colors.green,
      Colors.amber,
      Colors.deepOrange,
      Colors.lightBlue,
      Colors.lime,
      Colors.cyan,
    ];
    
    return colors[hash % colors.length];
  }
}

// Dosya Sonu: lib/features/leaderboard/leaderboard_screen.dart

  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\membership\membership_info_screen.dart  
====================  
  
﻿// Dosya: lib/features/membership/membership_info_screen.dart
// Açıklama: Freemium ve premium üyelik özelliklerini ve fiyatlarını tanıtan ekranı tanımlar.
// Klasör: lib/features/membership

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:zikirmo_new/core/services/firestore_service.dart';

class MembershipInfoScreen extends StatelessWidget {
  const MembershipInfoScreen({super.key});

  String _getPriceByRegion(BuildContext context) {
    // Bölgeye göre fiyat belirleme (ülke kodu easy_localization ile alınır)
    final locale = context.locale.countryCode ?? 'US';
    if (locale == 'TR') {
      return '29 TL/ay';
    } else if (['AT', 'BE', 'BG', 'HR', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE'].contains(locale)) {
      return '0.99 EUR/ay';
    } else {
      return '0.99 USD/ay';
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('membershipInfoTitle'.tr()),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'membershipInfoHeader'.tr(),
                style: Theme.of(context).textTheme.headlineSmall,
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 20),
              // Freemium Kartı
              Card(
                elevation: 4,
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'freemiumTitle'.tr(),
                        style: Theme.of(context).textTheme.titleLarge,
                      ),
                      const SizedBox(height: 10),
                      Text('freemiumDescription'.tr()),
                      const SizedBox(height: 10),
                      Text('freemiumFeatures'.tr()),
                      const SizedBox(height: 10),
                      Text(
                        'freemiumPrice'.tr(),
                        style: const TextStyle(fontWeight: FontWeight.bold),
                      ),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 20),
              // Premium Kartı
              Card(
                elevation: 4,
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'premiumTitle'.tr(),
                        style: Theme.of(context).textTheme.titleLarge,
                      ),
                      const SizedBox(height: 10),
                      Text('premiumDescription'.tr()),
                      const SizedBox(height: 10),
                      Text('premiumFeatures'.tr()),
                      const SizedBox(height: 10),
                      Text(
                        'premiumPrice'.tr(args: [_getPriceByRegion(context)]),
                        style: const TextStyle(fontWeight: FontWeight.bold),
                      ),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 20),
              Center(
                child: ElevatedButton(
                  onPressed: () {
                    Navigator.pushNamed(context, '/login');
                  },
                  child: Text('getStarted'.tr()),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Dosya Sonu: lib/features/membership/membership_info_screen.dart  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\messages\messages_list_screen.dart  
====================  
  
﻿// lib/features/messages/messages_list_screen.dart

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/providers/providers.dart';
import 'package:zikirmo_new/core/services/auth_service.dart';
import 'package:zikirmo_new/core/services/firestore_service.dart';
import 'package:zikirmo_new/core/models/user_model.dart';
import 'package:zikirmo_new/routes.dart';

// Mesaj modeli
class MessageModel {
  final String id;
  final String senderId;
  final String receiverId;
  final String text;
  final DateTime timestamp;
  final bool isRead;

  MessageModel({
    required this.id,
    required this.senderId,
    required this.receiverId,
    required this.text,
    required this.timestamp,
    required this.isRead,
  });

  factory MessageModel.fromMap(Map<String, dynamic> map, String id) {
    return MessageModel(
      id: id,
      senderId: map['senderId'] ?? '',
      receiverId: map['receiverId'] ?? '',
      text: map['text'] ?? '',
      timestamp: DateTime.fromMillisecondsSinceEpoch(map['timestamp'] ?? 0),
      isRead: map['isRead'] ?? false,
    );
  }
}

// Konuşma modeli
class ConversationModel {
  final String otherUserId;
  final UserModel? otherUser;
  final MessageModel? lastMessage;
  final int unreadCount;

  ConversationModel({
    required this.otherUserId,
    this.otherUser,
    this.lastMessage,
    this.unreadCount = 0,
  });
}

// Konuşmaları getiren provider
final conversationsProvider = FutureProvider<List<ConversationModel>>((ref) async {
  final authService = ref.watch(authServiceProvider);
  final firestoreService = ref.watch(firestoreServiceProvider);
  final currentUserId = authService.currentUser?.uid;
  
  if (currentUserId == null) return [];
  
  try {
    // Kullanıcının mesajlarını getir
    final sentMessages = await firestoreService.firestore
        .collection('messages')
        .where('senderId', isEqualTo: currentUserId)
        .orderBy('timestamp', descending: true)
        .get();
    
    final receivedMessages = await firestoreService.firestore
        .collection('messages')
        .where('receiverId', isEqualTo: currentUserId)
        .orderBy('timestamp', descending: true)
        .get();
    
    // Tüm mesajları birleştir
    final allMessages = <MessageModel>[];
    
    for (var doc in sentMessages.docs) {
      allMessages.add(MessageModel.fromMap(doc.data(), doc.id));
    }
    
    for (var doc in receivedMessages.docs) {
      allMessages.add(MessageModel.fromMap(doc.data(), doc.id));
    }
    
    // Konuşmaları grupla
    final conversations = <String, List<MessageModel>>{};
    
    for (var message in allMessages) {
      final otherUserId = message.senderId == currentUserId 
          ? message.receiverId 
          : message.senderId;
      
      if (!conversations.containsKey(otherUserId)) {
        conversations[otherUserId] = [];
      }
      conversations[otherUserId]!.add(message);
    }
    
    // ConversationModel listesi oluştur
    final result = <ConversationModel>[];
    
    for (var entry in conversations.entries) {
      final otherUserId = entry.key;
      final messages = entry.value;
      
      // En son mesajı bul
      messages.sort((a, b) => b.timestamp.compareTo(a.timestamp));
      final lastMessage = messages.isNotEmpty ? messages.first : null;
      
      // Okunmamış mesaj sayısını hesapla
      final unreadCount = messages
          .where((m) => m.receiverId == currentUserId && !m.isRead)
          .length;
      
      // Diğer kullanıcının bilgilerini getir
      final otherUser = await firestoreService.getUser(otherUserId);
      
      result.add(ConversationModel(
        otherUserId: otherUserId,
        otherUser: otherUser,
        lastMessage: lastMessage,
        unreadCount: unreadCount,
      ));
    }
    
    // En son mesaja göre sırala
    result.sort((a, b) {
      final aTime = a.lastMessage?.timestamp ?? DateTime(2000);
      final bTime = b.lastMessage?.timestamp ?? DateTime(2000);
      return bTime.compareTo(aTime);
    });
    
    return result;
  } catch (e) {
    return [];
  }
});

class MessagesListScreen extends ConsumerStatefulWidget {
  const MessagesListScreen({Key? key}) : super(key: key);

  @override
  ConsumerState<MessagesListScreen> createState() => _MessagesListScreenState();
}

class _MessagesListScreenState extends ConsumerState<MessagesListScreen> {
  
  // Mesajı okundu olarak işaretle
  Future<void> _markAsRead(String messageId) async {
    try {
      final firestoreService = ref.read(firestoreServiceProvider);
      await firestoreService.firestore
          .collection('messages')
          .doc(messageId)
          .update({'isRead': true});
      
      // Provider'ı yenile
      ref.refresh(conversationsProvider);
    } catch (e) {
      // Hata durumunda sessizce devam et
    }
  }
  
  // Konuşmayı sil
  Future<void> _deleteConversation(String otherUserId) async {
    try {
      final authService = ref.read(authServiceProvider);
      final firestoreService = ref.read(firestoreServiceProvider);
      final currentUserId = authService.currentUser?.uid;
      
      if (currentUserId == null) return;
      
      // Bu konuşmadaki tüm mesajları sil
      final sentMessages = await firestoreService.firestore
          .collection('messages')
          .where('senderId', isEqualTo: currentUserId)
          .where('receiverId', isEqualTo: otherUserId)
          .get();
      
      final receivedMessages = await firestoreService.firestore
          .collection('messages')
          .where('senderId', isEqualTo: otherUserId)
          .where('receiverId', isEqualTo: currentUserId)
          .get();
      
      final batch = firestoreService.firestore.batch();
      
      for (var doc in sentMessages.docs) {
        batch.delete(doc.reference);
      }
      
      for (var doc in receivedMessages.docs) {
        batch.delete(doc.reference);
      }
      
      await batch.commit();
      
      // Provider'ı yenile
      ref.refresh(conversationsProvider);
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('conversationDeleted'.tr())),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('deleteOperationFailed'.tr())),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final conversationsAsync = ref.watch(conversationsProvider);
    
    return Scaffold(
      appBar: AppBar(
        title: Text('messages'.tr()),
        actions: [
          IconButton(
            icon: const Icon(Icons.person_search),
            tooltip: 'newMessage'.tr(),
            onPressed: () {
              Navigator.pushNamed(context, AppRoutes.userSearch);
            },
          ),
        ],
      ),
      body: conversationsAsync.when(
        data: (conversations) {
          if (conversations.isEmpty) {
            return _buildEmptyState();
          }
          
          return RefreshIndicator(
            onRefresh: () async {
              ref.refresh(conversationsProvider);
            },
            child: ListView.builder(
              itemCount: conversations.length,
              itemBuilder: (context, index) {
                final conversation = conversations[index];
                return _buildConversationTile(conversation);
              },
            ),
          );
        },
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stack) => _buildErrorState(),
      ),
    );
  }
  
  // Konuşma tile'ı
  Widget _buildConversationTile(ConversationModel conversation) {
    final hasUnread = conversation.unreadCount > 0;
    final otherUser = conversation.otherUser;
    final lastMessage = conversation.lastMessage;
    
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
      elevation: hasUnread ? 3 : 1,
      color: hasUnread ? Theme.of(context).primaryColor.withOpacity(0.05) : null,
      child: ListTile(
        leading: Stack(
          children: [
            CircleAvatar(
              backgroundColor: Theme.of(context).primaryColor.withOpacity(0.2),
              backgroundImage: otherUser?.profileImageUrl != null
                  ? NetworkImage(otherUser!.profileImageUrl!)
                  : null,
              child: otherUser?.profileImageUrl == null
                  ? Text(
                      _getInitials(otherUser?.nickname ?? 'U'),
                      style: const TextStyle(fontWeight: FontWeight.bold),
                    )
                  : null,
            ),
            if (hasUnread)
              Positioned(
                right: 0,
                top: 0,
                child: Container(
                  width: 20,
                  height: 20,
                  decoration: BoxDecoration(
                    color: Colors.red,
                    shape: BoxShape.circle,
                    border: Border.all(color: Colors.white, width: 2),
                  ),
                  child: Center(
                    child: Text(
                      conversation.unreadCount > 9 ? '9+' : conversation.unreadCount.toString(),
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 10,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ),
              ),
          ],
        ),
        title: Row(
          children: [
            Expanded(
              child: Text(
                otherUser?.nickname ?? 'unknownUser'.tr(),
                style: TextStyle(
                  fontWeight: hasUnread ? FontWeight.bold : FontWeight.normal,
                ),
              ),
            ),
            if (otherUser?.isPremium == true)
              Icon(
                Icons.verified,
                color: Colors.amber[700],
                size: 16,
              ),
          ],
        ),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            if (lastMessage != null) ...[
              const SizedBox(height: 4),
              Text(
                lastMessage.text,
                maxLines: 1,
                overflow: TextOverflow.ellipsis,
                style: TextStyle(
                  fontWeight: hasUnread ? FontWeight.w600 : FontWeight.normal,
                  color: hasUnread ? Colors.black87 : Colors.grey[600],
                ),
              ),
              const SizedBox(height: 4),
              Text(
                _formatMessageTime(lastMessage.timestamp),
                style: TextStyle(
                  fontSize: 12,
                  color: Colors.grey[500],
                ),
              ),
            ],
          ],
        ),
        trailing: PopupMenuButton<String>(
          onSelected: (value) => _handleMenuAction(value, conversation),
          itemBuilder: (context) => [
            PopupMenuItem(
              value: 'mark_read',
              child: Row(
                children: [
                  const Icon(Icons.mark_email_read),
                  const SizedBox(width: 8),
                  Text('markAsRead'.tr()),
                ],
              ),
            ),
            PopupMenuItem(
              value: 'delete',
              child: Row(
                children: [
                  const Icon(Icons.delete, color: Colors.red),
                  const SizedBox(width: 8),
                  Text('deleteConversation'.tr(), style: TextStyle(color: Colors.red)),
                ],
              ),
            ),
          ],
        ),
        onTap: () {
          // Mesaj ekranına git
          Navigator.pushNamed(
            context,
            AppRoutes.sendMessage,
            arguments: conversation.otherUserId,
          ).then((_) {
            // Geri dönüldüğünde konuşmaları yenile
            ref.refresh(conversationsProvider);
          });
        },
        contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      ),
    );
  }
  
  // Menü aksiyonları
  void _handleMenuAction(String action, ConversationModel conversation) {
    switch (action) {
      case 'mark_read':
        _markConversationAsRead(conversation);
        break;
      case 'delete':
        _showDeleteConfirmation(conversation);
        break;
    }
  }
  
  // Konuşmayı okundu olarak işaretle
  Future<void> _markConversationAsRead(ConversationModel conversation) async {
    try {
      final authService = ref.read(authServiceProvider);
      final firestoreService = ref.read(firestoreServiceProvider);
      final currentUserId = authService.currentUser?.uid;
      
      if (currentUserId == null) return;
      
      // Bu konuşmadaki okunmamış mesajları bul ve okundu işaretle
      final unreadMessages = await firestoreService.firestore
          .collection('messages')
          .where('senderId', isEqualTo: conversation.otherUserId)
          .where('receiverId', isEqualTo: currentUserId)
          .where('isRead', isEqualTo: false)
          .get();
      
      final batch = firestoreService.firestore.batch();
      
      for (var doc in unreadMessages.docs) {
        batch.update(doc.reference, {'isRead': true});
      }
      
      await batch.commit();
      
      // Provider'ı yenile
      ref.refresh(conversationsProvider);
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('messagesMarkedAsRead'.tr())),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('operationFailed'.tr())),
        );
      }
    }
  }
  
  // Silme onayı
  void _showDeleteConfirmation(ConversationModel conversation) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('deleteConversationTitle'.tr()),
        content: Text(
          'deleteConversationConfirm'.tr(args: [conversation.otherUser?.nickname ?? 'unknownUser'.tr()])
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('cancel'.tr()),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              _deleteConversation(conversation.otherUserId);
            },
            child: Text('delete'.tr(), style: TextStyle(color: Colors.red)),
          ),
        ],
      ),
    );
  }
  
  // Boş durum
  Widget _buildEmptyState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.chat_bubble_outline,
            size: 80,
            color: Colors.grey[400],
          ),
          const SizedBox(height: 16),
          Text(
            'noMessages'.tr(),
            style: Theme.of(context).textTheme.titleMedium,
          ),
          const SizedBox(height: 8),
          Text(
            'startMessagingWithFriends'.tr(),
            style: TextStyle(color: Colors.grey[600]),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 24),
          ElevatedButton.icon(
            onPressed: () {
              Navigator.pushNamed(context, AppRoutes.userSearch);
            },
            icon: const Icon(Icons.person_search),
            label: Text('searchUsers'.tr()),
          ),
        ],
      ),
    );
  }
  
  // Hata durumu
  Widget _buildErrorState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.error_outline,
            size: 80,
            color: Colors.grey[400],
          ),
          const SizedBox(height: 16),
          Text(
            'errorLoadingMessages'.tr(),
            style: Theme.of(context).textTheme.titleMedium,
          ),
          const SizedBox(height: 16),
          ElevatedButton(
            onPressed: () {
              ref.refresh(conversationsProvider);
            },
            child: Text('tryAgain'.tr()),
          ),
        ],
      ),
    );
  }
  
  // İsmin baş harfleri
  String _getInitials(String name) {
    if (name.isEmpty) return 'U';
    
    final parts = name.split(' ');
    String initials = '';
    
    for (var part in parts) {
      if (part.isNotEmpty) {
        initials += part[0].toUpperCase();
        if (initials.length >= 2) break;
      }
    }
    
    return initials.isEmpty ? 'U' : initials;
  }
  
  // Mesaj zamanını formatla
  String _formatMessageTime(DateTime timestamp) {
    final now = DateTime.now();
    final difference = now.difference(timestamp);
    
    if (difference.inMinutes < 1) {
      return 'justNow'.tr();
    } else if (difference.inHours < 1) {
      return 'minutesAgo'.tr(args: [difference.inMinutes.toString()]);
    } else if (difference.inDays < 1) {
      return 'hoursAgo'.tr(args: [difference.inHours.toString()]);
    } else if (difference.inDays < 7) {
      return 'daysAgo'.tr(args: [difference.inDays.toString()]);
    } else {
      return DateFormat('dd.MM.yyyy').format(timestamp);
    }
  }
}
  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\messages\send_message_screen.dart  
====================  
  
﻿// send_message_screen.dart - v1.0.0
// Hazır mesajlar gönderme ekranı
// Klasör: lib/features/messages/send_message_screen.dart

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/providers/providers.dart';
import 'package:zikirmo_new/core/models/user_model.dart';
import 'package:zikirmo_new/core/services/auth_service.dart';
import 'package:zikirmo_new/core/services/firestore_service.dart';

class SendMessageScreen extends ConsumerStatefulWidget {
  final String receiverId;
  
  const SendMessageScreen({
    Key? key,
    required this.receiverId,
  }) : super(key: key);

  @override
  ConsumerState<SendMessageScreen> createState() => _SendMessageScreenState();
}

class _SendMessageScreenState extends ConsumerState<SendMessageScreen> {
  String? _selectedMessage;
  bool _isLoading = false;
  UserModel? _receiver;
  
  // Hazır mesajlar listesi
  final List<String> _predefinedMessages = [
    'Tebrikler!',
    'Helâl Olsun',
    'Allah Razı Olsun',
    'Allah\'a Emanet Ol',
    'Seni İslama Davet Ediyorum',
    'Allahû Ekber',
    'Lâ İlahe İllallah',
    'Maaşallah',
    'Hayırlı Günler Dilerim',
    'Selamün Aleyküm',
    'Allah Kolaylık Versin',
  ];
  
  @override
  void initState() {
    super.initState();
    _loadReceiverData();
  }
  
  // Alıcı kullanıcı bilgilerini yükle
  Future<void> _loadReceiverData() async {
    final firestoreService = ref.read(firestoreServiceProvider);
    final user = await firestoreService.getUser(widget.receiverId);
    
    if (mounted) {
      setState(() {
        _receiver = user;
      });
    }
  }
  
  // Mesaj gönder
  Future<void> _sendMessage() async {
    if (_selectedMessage == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Lütfen bir mesaj seçin'.tr())),
      );
      return;
    }
    
    setState(() {
      _isLoading = true;
    });
    
    try {
      final authService = ref.read(authServiceProvider);
      final firestoreService = ref.read(firestoreServiceProvider);
      final currentUserId = authService.currentUser?.uid;
      
      if (currentUserId == null) {
        throw Exception('Kullanıcı girişi gerekli');
      }
      
      // Mesajı gönder
      await firestoreService.sendMessage(
        senderId: currentUserId,
        receiverId: widget.receiverId,
        messageText: _selectedMessage!,
      );
      
      if (mounted) {
        // Başarı mesajı göster
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Mesaj gönderildi'.tr())),
        );
        
        // Ekranı kapat
        Navigator.pop(context);
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Mesaj gönderilirken hata oluştu'.tr())),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Mesaj Gönder'.tr()),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Alıcı bilgisi
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Row(
                  children: [
                    const Icon(Icons.person),
                    const SizedBox(width: 16),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Kime:'.tr(),
                            style: Theme.of(context).textTheme.bodySmall,
                          ),
                          const SizedBox(height: 4),
                          Text(
                            _receiver?.nickname ?? 'Yükleniyor...'.tr(),
                            style: const TextStyle(
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 24),
            
            // Mesaj seçimi başlığı
            Text(
              'Bir mesaj seçin'.tr(),
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 16),
            
            // Hazır mesajlar listesi
            Expanded(
              child: ListView.builder(
                itemCount: _predefinedMessages.length,
                itemBuilder: (context, index) {
                  final message = _predefinedMessages[index];
                  final isSelected = _selectedMessage == message;
                  
                  return Card(
                    color: isSelected
                        ? Theme.of(context).primaryColor.withOpacity(0.1)
                        : null,
                    margin: const EdgeInsets.only(bottom: 8),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                      side: isSelected
                          ? BorderSide(
                              color: Theme.of(context).primaryColor,
                              width: 2,
                            )
                          : BorderSide.none,
                    ),
                    child: InkWell(
                      onTap: () {
                        setState(() {
                          _selectedMessage = message;
                        });
                      },
                      borderRadius: BorderRadius.circular(12),
                      child: Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Row(
                          children: [
                            Expanded(
                              child: Text(
                                message,
                                style: TextStyle(
                                  fontWeight: isSelected
                                      ? FontWeight.bold
                                      : FontWeight.normal,
                                ),
                              ),
                            ),
                            if (isSelected)
                              Icon(
                                Icons.check_circle,
                                color: Theme.of(context).primaryColor,
                              ),
                          ],
                        ),
                      ),
                    ),
                  );
                },
              ),
            ),
            
            // Gönder butonu
            SizedBox(
              width: double.infinity,
              height: 50,
              child: _isLoading
                  ? const Center(child: CircularProgressIndicator())
                  : ElevatedButton(
                      onPressed: _selectedMessage == null ? null : _sendMessage,
                      child: Text('Gönder'.tr()),
                    ),
            ),
          ],
        ),
      ),
    );
  }
}
  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\notifications\notifications_screen.dart  
====================  
  
﻿// lib/features/notifications/notifications_screen.dart

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/providers/providers.dart';
import 'package:zikirmo_new/core/services/auth_service.dart';
import 'package:zikirmo_new/core/services/firestore_service.dart';

// Bildirim modeli
class NotificationModel {
  final String id;
  final String title;
  final String message;
  final String type; // 'friend_request', 'achievement', 'reminder', 'system'
  final DateTime createdAt;
  final bool isRead;
  final Map<String, dynamic>? data;

  NotificationModel({
    required this.id,
    required this.title,
    required this.message,
    required this.type,
    required this.createdAt,
    required this.isRead,
    this.data,
  });

  factory NotificationModel.fromMap(Map<String, dynamic> map, String id) {
    return NotificationModel(
      id: id,
      title: map['title'] ?? '',
      message: map['message'] ?? '',
      type: map['type'] ?? 'system',
      createdAt: DateTime.fromMillisecondsSinceEpoch(map['createdAt'] ?? 0),
      isRead: map['isRead'] ?? false,
      data: map['data'],
    );
  }
}

// Bildirimleri getiren provider
final notificationsProvider = FutureProvider<List<NotificationModel>>((ref) async {
  final authService = ref.watch(authServiceProvider);
  final firestoreService = ref.watch(firestoreServiceProvider);
  final userId = authService.currentUser?.uid;
  
  if (userId == null) return [];
  
  try {
    final snapshot = await firestoreService.firestore
        .collection('notifications')
        .where('userId', isEqualTo: userId)
        .orderBy('createdAt', descending: true)
        .limit(50)
        .get();
    
    return snapshot.docs
        .map((doc) => NotificationModel.fromMap(doc.data(), doc.id))
        .toList();
  } catch (e) {
    return [];
  }
});

class NotificationsScreen extends ConsumerStatefulWidget {
  const NotificationsScreen({Key? key}) : super(key: key);

  @override
  ConsumerState<NotificationsScreen> createState() => _NotificationsScreenState();
}

class _NotificationsScreenState extends ConsumerState<NotificationsScreen> {
  
  // Bildirimi okundu olarak işaretle
  Future<void> _markAsRead(String notificationId) async {
    try {
      final firestoreService = ref.read(firestoreServiceProvider);
      await firestoreService.firestore
          .collection('notifications')
          .doc(notificationId)
          .update({'isRead': true});
      
      // Provider'ı yenile
      ref.refresh(notificationsProvider);
    } catch (e) {
      // Hata durumunda sessizce devam et
    }
  }
  
  // Tüm bildirimleri okundu olarak işaretle
  Future<void> _markAllAsRead() async {
    try {
      final authService = ref.read(authServiceProvider);
      final firestoreService = ref.read(firestoreServiceProvider);
      final userId = authService.currentUser?.uid;
      
      if (userId == null) return;
      
      final snapshot = await firestoreService.firestore
          .collection('notifications')
          .where('userId', isEqualTo: userId)
          .where('isRead', isEqualTo: false)
          .get();
      
      final batch = firestoreService.firestore.batch();
      for (var doc in snapshot.docs) {
        batch.update(doc.reference, {'isRead': true});
      }
      await batch.commit();
      
      // Provider'ı yenile
      ref.refresh(notificationsProvider);
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('allNotificationsMarkedAsRead'.tr())),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('operationFailed'.tr())),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final notificationsAsync = ref.watch(notificationsProvider);
    
    return Scaffold(
      appBar: AppBar(
        title: Text('notifications'.tr()),
        actions: [
          IconButton(
            icon: const Icon(Icons.done_all),
            tooltip: 'markAllAsRead'.tr(),
            onPressed: _markAllAsRead,
          ),
        ],
      ),
      body: notificationsAsync.when(
        data: (notifications) {
          if (notifications.isEmpty) {
            return _buildEmptyState();
          }
          
          // Okunmamış ve okunmuş bildirimleri ayır
          final unreadNotifications = notifications.where((n) => !n.isRead).toList();
          final readNotifications = notifications.where((n) => n.isRead).toList();
          
          return RefreshIndicator(
            onRefresh: () async {
              ref.refresh(notificationsProvider);
            },
            child: ListView(
              children: [
                // Okunmamış bildirimler
                if (unreadNotifications.isNotEmpty) ...[
                  Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Text(
                      'newNotifications'.tr(args: [unreadNotifications.length.toString()]),
                      style: Theme.of(context).textTheme.titleMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                        color: Theme.of(context).primaryColor,
                      ),
                    ),
                  ),
                  ...unreadNotifications.map((notification) =>
                      _buildNotificationTile(notification, isUnread: true)),
                ],
                
                // Okunmuş bildirimler
                if (readNotifications.isNotEmpty) ...[
                  Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Text(
                      'previousNotifications'.tr(),
                      style: Theme.of(context).textTheme.titleMedium?.copyWith(
                        color: Colors.grey[600],
                      ),
                    ),
                  ),
                  ...readNotifications.map((notification) =>
                      _buildNotificationTile(notification, isUnread: false)),
                ],
              ],
            ),
          );
        },
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stack) => _buildErrorState(),
      ),
    );
  }
  
  // Bildirim tile'ı
  Widget _buildNotificationTile(NotificationModel notification, {required bool isUnread}) {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
      decoration: BoxDecoration(
        color: isUnread ? Theme.of(context).primaryColor.withOpacity(0.05) : null,
        borderRadius: BorderRadius.circular(12),
        border: isUnread ? Border.all(
          color: Theme.of(context).primaryColor.withOpacity(0.2),
          width: 1,
        ) : null,
      ),
      child: ListTile(
        leading: CircleAvatar(
          backgroundColor: _getNotificationColor(notification.type).withOpacity(0.2),
          child: Icon(
            _getNotificationIcon(notification.type),
            color: _getNotificationColor(notification.type),
          ),
        ),
        title: Row(
          children: [
            Expanded(
              child: Text(
                notification.title,
                style: TextStyle(
                  fontWeight: isUnread ? FontWeight.bold : FontWeight.normal,
                ),
              ),
            ),
            if (isUnread)
              Container(
                width: 8,
                height: 8,
                decoration: BoxDecoration(
                  color: Theme.of(context).primaryColor,
                  shape: BoxShape.circle,
                ),
              ),
          ],
        ),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const SizedBox(height: 4),
            Text(notification.message),
            const SizedBox(height: 4),
            Text(
              _formatDate(notification.createdAt),
              style: TextStyle(
                fontSize: 12,
                color: Colors.grey[600],
              ),
            ),
          ],
        ),
        onTap: () {
          if (isUnread) {
            _markAsRead(notification.id);
          }
          _handleNotificationTap(notification);
        },
        contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      ),
    );
  }
  
  // Boş durum
  Widget _buildEmptyState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.notifications_none,
            size: 80,
            color: Colors.grey[400],
          ),
          const SizedBox(height: 16),
          Text(
            'noNotifications'.tr(),
            style: Theme.of(context).textTheme.titleMedium,
          ),
          const SizedBox(height: 8),
          Text(
            'newNotificationsWillAppearHere'.tr(),
            style: TextStyle(color: Colors.grey[600]),
          ),
        ],
      ),
    );
  }
  
  // Hata durumu
  Widget _buildErrorState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.error_outline,
            size: 80,
            color: Colors.grey[400],
          ),
          const SizedBox(height: 16),
          Text(
            'errorLoadingNotifications'.tr(),
            style: Theme.of(context).textTheme.titleMedium,
          ),
          const SizedBox(height: 16),
          ElevatedButton(
            onPressed: () {
              ref.refresh(notificationsProvider);
            },
            child: Text('tryAgain'.tr()),
          ),
        ],
      ),
    );
  }
  
  // Bildirim tipine göre ikon
  IconData _getNotificationIcon(String type) {
    switch (type) {
      case 'friend_request':
        return Icons.person_add;
      case 'achievement':
        return Icons.emoji_events;
      case 'reminder':
        return Icons.access_time;
      case 'message':
        return Icons.message;
      case 'gift':
        return Icons.card_giftcard;
      case 'system':
      default:
        return Icons.info;
    }
  }
  
  // Bildirim tipine göre renk
  Color _getNotificationColor(String type) {
    switch (type) {
      case 'friend_request':
        return Colors.blue;
      case 'achievement':
        return Colors.amber;
      case 'reminder':
        return Colors.orange;
      case 'message':
        return Colors.green;
      case 'gift':
        return Colors.purple;
      case 'system':
      default:
        return Colors.grey;
    }
  }
  
  // Tarih formatlama
  String _formatDate(DateTime date) {
    final now = DateTime.now();
    final difference = now.difference(date);
    
    if (difference.inMinutes < 1) {
      return 'justNow'.tr();
    } else if (difference.inHours < 1) {
      return 'minutesAgo'.tr(args: [difference.inMinutes.toString()]);
    } else if (difference.inDays < 1) {
      return 'hoursAgo'.tr(args: [difference.inHours.toString()]);
    } else if (difference.inDays < 7) {
      return 'daysAgo'.tr(args: [difference.inDays.toString()]);
    } else {
      return DateFormat('dd.MM.yyyy HH:mm').format(date);
    }
  }
  
  // Bildirime tıklama işlemi
  void _handleNotificationTap(NotificationModel notification) {
    switch (notification.type) {
      case 'friend_request':
        Navigator.pushNamed(context, '/friends');
        break;
      case 'achievement':
        Navigator.pushNamed(context, '/challenges');
        break;
      case 'message':
        if (notification.data?['senderId'] != null) {
          Navigator.pushNamed(
            context, 
            '/send_message',
            arguments: notification.data!['senderId'],
          );
        }
        break;
      case 'gift':
        Navigator.pushNamed(context, '/reward_store');
        break;
      default:
        // Varsayılan işlem yok
        break;
    }
  }
}
  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\onboarding\onboarding_screen.dart  
====================  
  
import 'package:flutter_riverpod/flutter_riverpod.dart';
// Dosya: lib/features/onboarding/onboarding_screen.dart
// Açıklama: Uygulama ilk açılış tanıtım ekranı

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:zikirmo_new/routes.dart';

class OnboardingScreen extends ConsumerStatefulWidget {
  const OnboardingScreen({Key? key}) : super(key: key);

  @override
  ConsumerState<OnboardingScreen> createState() => _OnboardingScreenState();
}

class _OnboardingScreenState extends ConsumerState<OnboardingScreen> {
  final PageController _pageController = PageController();
  int _currentPage = 0;

  // Onboarding ekranları için içerik
  final List<Map<String, dynamic>> _slides = [
    {
      'title': 'onboardingWelcome',
      'description': 'onboardingDescription', 
      'icon': Icons.volunteer_activism,
    },
    {
      'title': 'dailyZikir',
      'description': 'Günlük zikirlerinizi düzenli olarak takip edin ve hatırlatıcılar alın.',
      'icon': Icons.calendar_today,
    },
    {
      'title': 'Arkadaşlarınızla Bağlantıda Kalın',
      'description': 'Arkadaşlarınızla zikir hedeflerinizi paylaşın ve birbirinizi motive edin.',
      'icon': Icons.people,
    },
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child: Column(
          children: [
            // Atla butonu
            Align(
              alignment: Alignment.topRight,
              child: TextButton(
                onPressed: () => _navigateToLogin(),
                child: Text('Atla'.tr()),
              ),
            ),
            
            // Sayfa görünümü
            Expanded(
              child: PageView.builder(
                controller: _pageController,
                onPageChanged: (index) {
                  setState(() {
                    _currentPage = index;
                  });
                },
                itemCount: _slides.length,
                itemBuilder: (context, index) => _buildPage(
                  title: _slides[index]['title'],
                  description: _slides[index]['description'],
                  icon: _slides[index]['icon'],
                ),
              ),
            ),
            
            // Sayfa göstergeleri
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: List.generate(
                _slides.length,
                (index) => AnimatedContainer(
                  duration: const Duration(milliseconds: 200),
                  margin: const EdgeInsets.symmetric(horizontal: 4),
                  width: _currentPage == index ? 16 : 8,
                  height: 8,
                  decoration: BoxDecoration(
                    color: _currentPage == index ? Colors.teal : Colors.grey,
                    borderRadius: BorderRadius.circular(4),
                  ),
                ),
              ),
            ),
            const SizedBox(height: 16),
            
            // İleri/Başla butonu
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
              child: SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: () {
                    if (_currentPage == _slides.length - 1) {
                      _navigateToLogin();
                    } else {
                      _pageController.nextPage(
                        duration: const Duration(milliseconds: 300),
                        curve: Curves.easeInOut,
                      );
                    }
                  },
                  style: ElevatedButton.styleFrom(
                    padding: const EdgeInsets.symmetric(vertical: 16),
                  ),
                  child: Text(
                    _currentPage == _slides.length - 1
                        ? 'onboardingGetStarted'.tr()
                        : 'İleri'.tr(),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Onboarding sayfası görünümü
  Widget _buildPage({required String title, required String description, required IconData icon}) {
    return Padding(
      padding: const EdgeInsets.all(24.0),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            icon,
            size: 120,
            color: Colors.teal,
          ),
          const SizedBox(height: 40),
          Text(
            title.tr(),
            style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                  fontWeight: FontWeight.bold,
                ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 16),
          Text(
            description.tr(),
            style: Theme.of(context).textTheme.bodyLarge,
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  // Login sayfasına yönlendirme
  void _navigateToLogin() {
    Navigator.pushReplacementNamed(context, AppRoutes.login);
  }
}
// onboarding_screen.dart - v1.0.0
  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\premium\premium_screen.dart  
====================  
  
// lib/features/premium/premium_screen.dart

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/providers/providers.dart'; // Sadece bu import

class PremiumScreen extends ConsumerStatefulWidget {
  const PremiumScreen({Key? key}) : super(key: key);

  @override
  ConsumerState<PremiumScreen> createState() => _PremiumScreenState();
}

class _PremiumScreenState extends ConsumerState<PremiumScreen> {
  bool _isLoading = true;
  String _selectedPlan = 'yearly'; // Varsayılan plan
  final Map<String, double> _planPrices = {
    'monthly': 9.99,  // Düzeltildi - double değer
    'yearly': 49.99,  // Düzeltildi - double değer
    'lifetime': 99.99, // Düzeltildi - double değer
  };
  bool _isPremium = false;
  String? _currentPlan;
  DateTime? _expiryDate;
  
  @override
  void initState() {
    super.initState();
    _loadSubscriptionStatus();
  }
  
  Future<void> _loadSubscriptionStatus() async {
    try {
      final purchaseService = ref.read(purchaseServiceProvider);
      final products = await purchaseService.loadProducts();
      
      // Güncel fiyatları al
      if (products.isNotEmpty) {
        // Ürün fiyatlarını güncelle
        for (var product in products) {
          if (product.id.contains('monthly')) {
            _planPrices['monthly'] = double.tryParse(product.price) ?? 9.99;
          } else if (product.id.contains('yearly')) {
            _planPrices['yearly'] = double.tryParse(product.price) ?? 49.99;
          } else if (product.id.contains('lifetime')) {
            _planPrices['lifetime'] = double.tryParse(product.price) ?? 99.99;
          }
        }
      }
      
      // Mevcut abonelik durumunu kontrol et
      final authService = ref.read(authServiceProvider);
      _isPremium = await authService.checkIfUserIsPremium();
      
      if (_isPremium) {
        final subscriptionDetails = await purchaseService.getSubscriptionDetails();
        _currentPlan = subscriptionDetails?.planType;
        _expiryDate = subscriptionDetails?.expiryDate;
      }
      
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('errorLoadingProducts'.tr())),
        );
      }
    }
  }
  
  Future<void> _startPurchase() async {
    setState(() {
      _isLoading = true;
    });
    
    try {
      final purchaseService = ref.read(purchaseServiceProvider);
      final success = await purchaseService.purchase(_selectedPlan);
      
      if (success && mounted) {
        // Başarılı satın alma
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('purchaseSuccessful'.tr())),
        );
        
        // Durumu güncelle
        await _loadSubscriptionStatus();
      } else if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('purchaseError'.tr())),
        );
      }
    }
  }
  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('premiumMembership'.tr()),
      ),
      body: _isLoading 
        ? const Center(child: CircularProgressIndicator())
        : SingleChildScrollView(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  // Premium durum bilgisi
                  if (_isPremium) _buildCurrentSubscription(),
                  
                  // Premium özelliklerin listesi
                  _buildPremiumFeatures(),
                  
                  // Premium değilse abonelik seçenekleri
                  if (!_isPremium) _buildPlanOptions(),
                  
                  // Satın alma butonu
                  if (!_isPremium) _buildPurchaseButton(),
                  
                  const SizedBox(height: 24),
                  
                  // Hükümler ve koşullar
                  Text(
                    'termsAndPrivacy'.tr(),
                    style: Theme.of(context).textTheme.bodySmall,
                    textAlign: TextAlign.center,
                  ),
                ],
              ),
            ),
          ),
    );
  }
  
  Widget _buildCurrentSubscription() {
    String statusText = 'currentlyPremium'.tr();
    if (_currentPlan != null) {
      statusText += ' - $_currentPlan';
    }
    
    if (_expiryDate != null && _currentPlan != 'lifetime') {
      final formattedDate = DateFormat.yMMMd(context.locale.languageCode).format(_expiryDate!);
      statusText += ' (${'validUntil'.tr(args: [formattedDate])})';
    }
    
    return Card(
      margin: const EdgeInsets.only(bottom: 24),
      color: Colors.green[100],
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            Row(
              children: [
                const Icon(Icons.stars, color: Colors.green, size: 36),
                const SizedBox(width: 16),
                Expanded(
                  child: Text(
                    statusText,
                    style: const TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ],
            ),
            if (_currentPlan != 'lifetime' && _expiryDate != null)
              TextButton(
                onPressed: () => _startPurchase(),
                child: Text('renewSubscription'.tr()),
              ),
          ],
        ),
      ),
    );
  }
  
  Widget _buildPremiumFeatures() {
    final features = [
      {'icon': Icons.format_size, 'title': 'customCounterSize'.tr()},
      {'icon': Icons.touch_app, 'title': 'wholeScreenCounter'.tr()},
      {'icon': Icons.visibility_off, 'title': 'minimalMode'.tr()},
      {'icon': Icons.drag_indicator, 'title': 'moveCounter'.tr()},
      {'icon': Icons.bar_chart, 'title': 'advancedStatistics'.tr()},
      {'icon': Icons.cloud_upload, 'title': 'cloudBackup'.tr()},
    ];
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'premiumFeatures'.tr(),
          style: Theme.of(context).textTheme.headlineSmall,
        ),
        const SizedBox(height: 16),
        ...features.map((feature) => Padding(
          padding: const EdgeInsets.only(bottom: 12),
          child: Row(
            children: [
              Icon(feature['icon'] as IconData, color: Theme.of(context).primaryColor),
              const SizedBox(width: 12),
              Expanded(child: Text(feature['title'] as String)),
            ],
          ),
        )).toList(),
        const SizedBox(height: 24),
      ],
    );
  }
  
  Widget _buildPlanOptions() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'choosePlan'.tr(),
          style: Theme.of(context).textTheme.headlineSmall,
        ),
        const SizedBox(height: 16),
        Row(
          children: [
            Expanded(
              child: _buildPlanCard(
                'monthly',
                'monthlyPlan'.tr(),
                '${_planPrices['monthly']!.toStringAsFixed(2)} ₺',
                'perMonth'.tr(),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: _buildPlanCard(
                'yearly',
                'yearlyPlan'.tr(),
                '${_planPrices['yearly']!.toStringAsFixed(2)} ₺',
                'perYear'.tr(),
                isRecommended: true,
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: _buildPlanCard(
                'lifetime',
                'lifetimePlan'.tr(),
                '${_planPrices['lifetime']!.toStringAsFixed(2)} ₺',
                'oneTime'.tr(),
              ),
            ),
          ],
        ),
        const SizedBox(height: 24),
      ],
    );
  }
  
  Widget _buildPlanCard(String planId, String title, String price, String subtitle, {bool isRecommended = false}) {
    final isSelected = _selectedPlan == planId;
    
    return InkWell(
      onTap: () {
        setState(() {
          _selectedPlan = planId;
        });
      },
      child: Container(
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          border: Border.all(
            color: isSelected ? Theme.of(context).primaryColor : Colors.grey[300]!,
            width: 2,
          ),
          borderRadius: BorderRadius.circular(12),
          color: isSelected ? Colors.grey[50] : Colors.white,
        ),
        child: Column(
          children: [
            if (isRecommended)
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
                margin: const EdgeInsets.only(bottom: 8),
                decoration: BoxDecoration(
                  color: Theme.of(context).primaryColor,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  'bestValue'.tr(),
                  style: const TextStyle(color: Colors.white, fontSize: 10),
                ),
              ),
            Text(
              title,
              style: const TextStyle(fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 8),
            Text(
              price,
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Theme.of(context).primaryColor,
              ),
            ),
            Text(
              subtitle,
              style: TextStyle(fontSize: 12, color: Colors.grey[600]),
            ),
          ],
        ),
      ),
    );
  }
  
  Widget _buildPurchaseButton() {
    return ElevatedButton(
      onPressed: _startPurchase,
      style: ElevatedButton.styleFrom(
        padding: const EdgeInsets.symmetric(vertical: 16),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      ),
      child: Text('upgradeToPremium'.tr()),
    );
  }
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\profile\edit_profile_screen.dart  
====================  
  
import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/models/user_model.dart';
import '../../core/services/auth_service.dart';
import '../../core/services/firestore_service.dart';
import '../../core/providers/providers.dart';

class EditProfileScreen extends ConsumerStatefulWidget {
  const EditProfileScreen({Key? key}) : super(key: key);

  @override
  ConsumerState<EditProfileScreen> createState() => _EditProfileScreenState();
}

class _EditProfileScreenState extends ConsumerState<EditProfileScreen> {
  final _formKey = GlobalKey<FormState>();
  
  late TextEditingController _nicknameController;
  late TextEditingController _aboutMeController;
  
  bool _isLoading = false;
  String? _errorMessage;
  
  @override
  void initState() {
    super.initState();
    _nicknameController = TextEditingController();
    _aboutMeController = TextEditingController();
    
    // Kullanıcı bilgilerini yükle
    _loadUserData();
  }
  
  @override
  void dispose() {
    _nicknameController.dispose();
    _aboutMeController.dispose();
    super.dispose();
  }
  
  // Kullanıcı bilgilerini yükle
  Future<void> _loadUserData() async {
    final userAsync = ref.read(userProvider);
    
    userAsync.whenData((user) {
      if (user != null) {
        setState(() {
          _nicknameController.text = user.nickname;
          _aboutMeController.text = user.aboutMe ?? '';
        });
      }
    });
  }
  
  // Profil bilgilerini güncelle
  Future<void> _updateProfile() async {
    if (!_formKey.currentState!.validate()) return;
    
    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });
    
    try {
      final authService = ref.read(authServiceProvider);
      final firestoreService = ref.read(firestoreServiceProvider);
      final userId = authService.currentUser?.uid;
      
      if (userId == null) {
        throw Exception('Kullanıcı bulunamadı');
      }
      
      // Profil bilgilerini güncelle
      await firestoreService.updateUser(
        userId,
        {
          'nickname': _nicknameController.text.trim(),
          'aboutMe': _aboutMeController.text.trim(),
        },
      );
      
      // Kullanıcı verilerini yenile
      ref.refresh(userProvider);
      
      if (mounted) {
        Navigator.pop(context);
        
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Profil başarıyla güncellendi')),
        );
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Profil güncellenirken hata oluştu';
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Profili Düzenle'),
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Form(
            key: _formKey,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Kullanıcı adı alanı
                TextFormField(
                  controller: _nicknameController,
                  decoration: InputDecoration(
                    labelText: 'Kullanıcı Adı',
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Kullanıcı adı gerekli';
                    }
                    if (value.length < 3) {
                      return 'Kullanıcı adı en az 3 karakter olmalı';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16),
                
                // Hakkımda alanı
                TextFormField(
                  controller: _aboutMeController,
                  decoration: InputDecoration(
                    labelText: 'Hakkımda',
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  maxLines: 5,
                  maxLength: 500,
                ),
                const SizedBox(height: 16),
                
                // Hata mesajı
                if (_errorMessage != null) ...[
                  Text(
                    _errorMessage!,
                    style: const TextStyle(color: Colors.red),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 16),
                ],
                
                // Kaydet butonu
                SizedBox(
                  width: double.infinity,
                  height: 50,
                  child: _isLoading
                      ? const Center(child: CircularProgressIndicator())
                      : ElevatedButton(
                          onPressed: _updateProfile,
                          child: Text('Kaydet'),
                        ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\profile\profile_screen.dart  
====================  
  
import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/models/user_model.dart';
import '../../core/providers/providers.dart'; // UNIFIED providers
import '../../routes.dart';
import 'components/profile_header.dart';
import 'components/stats_card.dart';
import 'components/badge_list.dart';

class ProfileScreen extends ConsumerWidget {
  const ProfileScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final userAsync = ref.watch(userProvider); // UNIFIED provider kullanımı
    
    return Scaffold(
      appBar: AppBar(
        title: Text('profile'.tr()),
        actions: [
          IconButton(
            icon: const Icon(Icons.settings),
            onPressed: () {
              Navigator.pushNamed(context, AppRoutes.settings);
            },
          ),
        ],
      ),
      body: userAsync.when(
        data: (user) {
          if (user == null) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text('noUser'.tr()),
                  const SizedBox(height: 16),
                  ElevatedButton(
                    onPressed: () {
                      Navigator.pushReplacementNamed(context, AppRoutes.login);
                    },
                    child: Text('signIn'.tr()),
                  ),
                ],
              ),
            );
          }
          
          return RefreshIndicator(
            onRefresh: () async {
              ref.refresh(userProvider);
            },
            child: SingleChildScrollView(
              physics: const AlwaysScrollableScrollPhysics(),
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Profil başlığı - avatar, kullanıcı adı, seviye vb.
                    ProfileHeader(user: user),
                    const SizedBox(height: 24),
                    
                    // İstatistikler kartı
                    StatsCard(user: user),
                    const SizedBox(height: 24),
                    
                    // Rozetler listesi
                    BadgeList(badges: user.badges),
                    const SizedBox(height: 24),
                    
                    // Kişisel bilgiler kartı
                    Card(
                      child: Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Text(
                                  'aboutMe'.tr(),
                                  style: Theme.of(context).textTheme.titleLarge,
                                ),
                                IconButton(
                                  icon: const Icon(Icons.edit),
                                  onPressed: () {
                                    Navigator.pushNamed(context, AppRoutes.editProfile);
                                  },
                                ),
                              ],
                            ),
                            const SizedBox(height: 8),
                            Text(
                              user.aboutMe ?? 'noAboutMe'.tr(),
                              style: Theme.of(context).textTheme.bodyMedium,
                            ),
                          ],
                        ),
                      ),
                    ),
                    const SizedBox(height: 24),
                    
                    // Sosyal medya bağlantıları
                    Card(
                      child: Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Text(
                                  'socialMedia'.tr(),
                                  style: Theme.of(context).textTheme.titleLarge,
                                ),
                                IconButton(
                                  icon: const Icon(Icons.edit),
                                  onPressed: () {
                                    Navigator.pushNamed(context, AppRoutes.socialLinks);
                                  },
                                ),
                              ],
                            ),
                            const SizedBox(height: 16),
                            _buildSocialLinks(user),
                          ],
                        ),
                      ),
                    ),
                    const SizedBox(height: 24),
                    
                    // Çıkış yap butonu
                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton.icon(
                        onPressed: () async {
                          final authService = ref.read(authServiceProvider);
                          await authService.signOut();
                          if (context.mounted) {
                            Navigator.pushReplacementNamed(context, AppRoutes.login);
                          }
                        },
                        icon: const Icon(Icons.exit_to_app),
                        label: Text('signOut'.tr()),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.red,
                          foregroundColor: Colors.white,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          );
        },
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stackTrace) => Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(Icons.error_outline, color: Colors.red[400], size: 64),
              const SizedBox(height: 16),
              Text('errorLoadingProfile'.tr()),
              const SizedBox(height: 16),
              ElevatedButton(
                onPressed: () => ref.refresh(userProvider),
                child: Text('tryAgain'.tr()),
              ),
            ],
          ),
        ),
      ),
    );
  }
  
  // Sosyal medya bağlantılarını oluşturur
  Widget _buildSocialLinks(UserModel user) {
    final socialLinks = user.socialLinks ?? {};
    
    if (socialLinks.isEmpty) {
      return Center(
        child: Text('noSocialLinks'.tr()),
      );
    }
    
    return Column(
      children: [
        if (socialLinks.containsKey('instagram'))
          _buildSocialLinkTile(
            'Instagram',
            socialLinks['instagram']!,
            Icons.camera_alt,
            Colors.pink,
          ),
        if (socialLinks.containsKey('twitter'))
          _buildSocialLinkTile(
            'Twitter',
            socialLinks['twitter']!,
            Icons.alternate_email,
            Colors.blue,
          ),
        if (socialLinks.containsKey('facebook'))
          _buildSocialLinkTile(
            'Facebook',
            socialLinks['facebook']!,
            Icons.facebook,
            Colors.indigo,
          ),
        if (socialLinks.containsKey('spotify'))
          _buildSocialLinkTile(
            'Spotify',
            socialLinks['spotify']!,
            Icons.music_note,
            Colors.green,
          ),
        if (socialLinks.containsKey('bluesky'))
          _buildSocialLinkTile(
            'Bluesky',
            socialLinks['bluesky']!,
            Icons.cloud,
            Colors.lightBlue,
          ),
      ],
    );
  }
  
  // Sosyal medya bağlantısı için liste öğesi
  Widget _buildSocialLinkTile(String name, String username, IconData icon, Color color) {
    return ListTile(
      leading: CircleAvatar(
        backgroundColor: color.withOpacity(0.2),
        child: Icon(icon, color: color),
      ),
      title: Text(name),
      subtitle: Text(username),
      trailing: const Icon(Icons.open_in_new),
      onTap: () {
        // TODO: Sosyal medya bağlantısını aç
      },
    );
  }
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\profile\social_links_screen.dart  
====================  
  
import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/models/user_model.dart';
import '../../core/services/auth_service.dart';
import '../../core/services/firestore_service.dart';
import '../../core/providers/providers.dart';

class SocialLinksScreen extends ConsumerStatefulWidget {
 const SocialLinksScreen({Key? key}) : super(key: key);

 @override
 ConsumerState<SocialLinksScreen> createState() => _SocialLinksScreenState();
}

class _SocialLinksScreenState extends ConsumerState<SocialLinksScreen> {
 final _formKey = GlobalKey<FormState>();
 
 late TextEditingController _instagramController;
 late TextEditingController _twitterController;
 late TextEditingController _facebookController;
 late TextEditingController _spotifyController;
 late TextEditingController _blueskyController;
 
 bool _isLoading = false;
 String? _errorMessage;
 
 @override
 void initState() {
   super.initState();
   _instagramController = TextEditingController();
   _twitterController = TextEditingController();
   _facebookController = TextEditingController();
   _spotifyController = TextEditingController();
   _blueskyController = TextEditingController();
   
   // Kullanıcı bilgilerini yükle
   _loadUserData();
 }
 
 @override
 void dispose() {
   _instagramController.dispose();
   _twitterController.dispose();
   _facebookController.dispose();
   _spotifyController.dispose();
   _blueskyController.dispose();
   super.dispose();
 }
 
 // Kullanıcı bilgilerini yükle
 Future<void> _loadUserData() async {
   final userAsync = ref.read(userProvider);
   
   userAsync.whenData((user) {
     if (user != null && user.socialLinks != null) {
       final socialLinks = user.socialLinks!;
       
       setState(() {
         _instagramController.text = socialLinks['instagram'] ?? '';
         _twitterController.text = socialLinks['twitter'] ?? '';
         _facebookController.text = socialLinks['facebook'] ?? '';
         _spotifyController.text = socialLinks['spotify'] ?? '';
         _blueskyController.text = socialLinks['bluesky'] ?? '';
       });
     }
   });
 }
 
 // Sosyal medya bağlantılarını güncelle
 Future<void> _updateSocialLinks() async {
   if (!_formKey.currentState!.validate()) return;
   
   setState(() {
     _isLoading = true;
     _errorMessage = null;
   });
   
   try {
     final authService = ref.read(authServiceProvider);
     final firestoreService = ref.read(firestoreServiceProvider);
     final userId = authService.currentUser?.uid;
     
     if (userId == null) {
       throw Exception('Kullanıcı bulunamadı');
     }
     
     // Sosyal medya bağlantılarını güncelle
     final socialLinks = <String, String>{};
     
     if (_instagramController.text.isNotEmpty) {
       socialLinks['instagram'] = _instagramController.text.trim();
     }
     
     if (_twitterController.text.isNotEmpty) {
       socialLinks['twitter'] = _twitterController.text.trim();
     }
     
     if (_facebookController.text.isNotEmpty) {
       socialLinks['facebook'] = _facebookController.text.trim();
     }
     
     if (_spotifyController.text.isNotEmpty) {
       socialLinks['spotify'] = _spotifyController.text.trim();
     }
     
     if (_blueskyController.text.isNotEmpty) {
       socialLinks['bluesky'] = _blueskyController.text.trim();
     }
     
     await firestoreService.updateUser(
       userId,
       {'socialLinks': socialLinks},
     );
     
     // Kullanıcı verilerini yenile
     ref.refresh(userProvider);
     
     if (mounted) {
       Navigator.pop(context);
       
       ScaffoldMessenger.of(context).showSnackBar(
         SnackBar(content: Text('Sosyal medya bağlantıları güncellendi')),
       );
     }
   } catch (e) {
     setState(() {
       _errorMessage = 'Sosyal medya bağlantıları güncellenirken hata oluştu';
     });
   } finally {
     setState(() {
       _isLoading = false;
     });
   }
 }

 @override
 Widget build(BuildContext context) {
   return Scaffold(
     appBar: AppBar(
       title: Text('Sosyal Medya Bağlantıları'),
     ),
     body: SingleChildScrollView(
       child: Padding(
         padding: const EdgeInsets.all(16.0),
         child: Form(
           key: _formKey,
           child: Column(
             crossAxisAlignment: CrossAxisAlignment.start,
             children: [
               Text(
                 'Sosyal medya hesaplarını ekle veya güncelle',
                 style: Theme.of(context).textTheme.bodyLarge,
               ),
               const SizedBox(height: 24),
               
               // Instagram
               _buildSocialField(
                 _instagramController,
                 'Instagram',
                 Icons.camera_alt,
                 Colors.pink,
                 '@kullaniciadi',
               ),
               const SizedBox(height: 16),
               
               // Twitter
               _buildSocialField(
                 _twitterController,
                 'Twitter',
                 Icons.alternate_email,
                 Colors.blue,
                 '@kullaniciadi',
               ),
               const SizedBox(height: 16),
               
               // Facebook
               _buildSocialField(
                 _facebookController,
                 'Facebook',
                 Icons.facebook,
                 Colors.indigo,
                 'facebook.com/kullaniciadi',
               ),
               const SizedBox(height: 16),
               
               // Spotify
               _buildSocialField(
                 _spotifyController,
                 'Spotify',
                 Icons.music_note,
                 Colors.green,
                 'kullaniciadi',
               ),
               const SizedBox(height: 16),
               
               // Bluesky
               _buildSocialField(
                 _blueskyController,
                 'Bluesky',
                 Icons.cloud,
                 Colors.lightBlue,
                 '@kullaniciadi',
               ),
               const SizedBox(height: 24),
               
               // Hata mesajı
               if (_errorMessage != null) ...[
                 Text(
                   _errorMessage!,
                   style: const TextStyle(color: Colors.red),
                   textAlign: TextAlign.center,
                 ),
                 const SizedBox(height: 16),
               ],
               
               // Kaydet butonu
               SizedBox(
                 width: double.infinity,
                 height: 50,
                 child: _isLoading
                     ? const Center(child: CircularProgressIndicator())
                     : ElevatedButton(
                         onPressed: _updateSocialLinks,
                         child: Text('Kaydet'),
                       ),
               ),
             ],
           ),
         ),
       ),
     ),
   );
 }
 
 // Sosyal medya alan widget'ı
 Widget _buildSocialField(
   TextEditingController controller,
   String label,
   IconData icon,
   Color color,
   String hintText,
 ) {
   return TextFormField(
     controller: controller,
     decoration: InputDecoration(
       labelText: label,
       prefixIcon: Icon(icon, color: color),
       hintText: hintText,
       border: OutlineInputBorder(
         borderRadius: BorderRadius.circular(12),
       ),
     ),
   );
 }
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\profile\components\badge_list.dart  
====================  
  
// badge_list.dart - v1.0.0
// Rozet listesi bileşeni
// Klasör: lib/features/profile/components/badge_list.dart

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';

class BadgeList extends StatelessWidget {
  final List<String> badges;
  
  const BadgeList({
    Key? key,
    required this.badges,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  'badges'.tr(),
                  style: Theme.of(context).textTheme.titleLarge,
                ),
                if (badges.isNotEmpty)
                  TextButton(
                    onPressed: () {
                      // TODO: Tüm rozetler sayfasına git
                    },
                    child: Text('Tümünü Gör'.tr()),
                  ),
              ],
            ),
            const SizedBox(height: 16),
            
            if (badges.isEmpty)
              Center(
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    children: [
                      const Icon(
                        Icons.emoji_events_outlined,
                        size: 64,
                        color: Colors.grey,
                      ),
                      const SizedBox(height: 16),
                      Text(
                        'noBadges'.tr(),
                        style: Theme.of(context).textTheme.bodyMedium,
                        textAlign: TextAlign.center,
                      ),
                    ],
                  ),
                ),
              )
            else
              SizedBox(
                height: 100,
                child: ListView.builder(
                  scrollDirection: Axis.horizontal,
                  itemCount: badges.length > 5 ? 5 : badges.length,
                  itemBuilder: (context, index) {
                    return _buildBadge(context, badges[index]);
                  },
                ),
              ),
          ],
        ),
      ),
    );
  }
  
  // Rozet widget'ı
  Widget _buildBadge(BuildContext context, String badgeId) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 8.0),
      child: Column(
        children: [
          CircleAvatar(
            backgroundColor: _getBadgeColor(badgeId).withOpacity(0.2),
            radius: 30,
            child: Icon(
              _getBadgeIcon(badgeId),
              color: _getBadgeColor(badgeId),
              size: 30,
            ),
          ),
          const SizedBox(height: 8),
          SizedBox(
            width: 80,
            child: Text(
              badgeId.tr(),
              style: Theme.of(context).textTheme.bodySmall,
              textAlign: TextAlign.center,
              maxLines: 1,
              overflow: TextOverflow.ellipsis,
            ),
          ),
        ],
      ),
    );
  }
  
  // Rozet ikonu
  IconData _getBadgeIcon(String badgeId) {
    switch (badgeId) {
      case 'badgeFirstZikir':
        return Icons.star;
      case 'badgeStreak7Days':
        return Icons.whatshot;
      case 'badgeDailyPeak':
        return Icons.trending_up;
      case 'badgeZikir1000':
        return Icons.emoji_events;
      case 'badgeSocialShare':
        return Icons.share;
      case 'badgeCreativeZikir':
        return Icons.lightbulb;
      case 'badgePerfectWeek':
        return Icons.calendar_today;
      default:
        return Icons.emoji_events;
    }
  }
  
  // Rozet rengi
  Color _getBadgeColor(String badgeId) {
    switch (badgeId) {
      case 'badgeFirstZikir':
        return Colors.blue;
      case 'badgeStreak7Days':
        return Colors.orange;
      case 'badgeDailyPeak':
        return Colors.green;
      case 'badgeZikir1000':
        return Colors.purple;
      case 'badgeSocialShare':
        return Colors.pink;
      case 'badgeCreativeZikir':
        return Colors.teal;
      case 'badgePerfectWeek':
        return Colors.amber;
      default:
        return Colors.blueGrey;
    }
  }
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\profile\components\profile_header.dart  
====================  
  
﻿// profile_header.dart - v1.0.0
// Profil başlık bileşeni
// Klasör: lib/features/profile/components/profile_header.dart

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:zikirmo_new/core/models/user_model.dart';

class ProfileHeader extends StatelessWidget {
  final UserModel user;
  
  const ProfileHeader({
    Key? key,
    required this.user,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            // Avatar ve düzenleme butonu
            Stack(
              alignment: Alignment.bottomRight,
              children: [
                // Kullanıcı avatarı
                CircleAvatar(
                  radius: 50,
                  backgroundColor: Theme.of(context).primaryColor.withOpacity(0.2),
                  backgroundImage: user.profileImageUrl != null
                      ? NetworkImage(user.profileImageUrl!)
                      : null,
                  child: user.profileImageUrl == null
                      ? Text(
                          _getInitials(user.nickname),
                          style: const TextStyle(
                            fontSize: 36,
                            fontWeight: FontWeight.bold,
                          ),
                        )
                      : null,
                ),
                
                // Avatar düzenleme butonu
                CircleAvatar(
                  radius: 20,
                  backgroundColor: Theme.of(context).primaryColor,
                  child: IconButton(
                    icon: const Icon(Icons.edit, size: 18, color: Colors.white),
                    onPressed: () {
                      // TODO: Avatar düzenleme ekranına git
                    },
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            
            // Kullanıcı adı ve Premium rozeti
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  user.nickname,
                  style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
                if (user.isPremium) 
                  Padding(
                    padding: const EdgeInsets.only(left: 8.0),
                    child: Icon(
                      Icons.verified,
                      color: Colors.amber[700],
                      size: 24,
                    ),
                  ),
              ],
            ),
            const SizedBox(height: 8),
            
            // Seviye bilgisi
            Text(
              'level'.tr(args: [user.level.tr()]),
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 8),
            
            // Puan ve ilerleme çubuğu
            Text(
              'points'.tr(args: [user.points.toString()]),
              style: Theme.of(context).textTheme.bodyMedium,
            ),
            const SizedBox(height: 8),
            
            // Seviye ilerleme çubuğu
            LinearProgressIndicator(
              value: _calculateLevelProgress(user.level, user.points),
              backgroundColor: Colors.grey[300],
              color: Theme.of(context).primaryColor,
              borderRadius: BorderRadius.circular(4),
            ),
            const SizedBox(height: 4),
            
            // Bir sonraki seviyeye kalan puan
            Text(
              _getRemainingPointsText(user.level, user.points),
              style: Theme.of(context).textTheme.bodySmall,
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }
  
  // Kullanıcı adının baş harflerini almak için
  String _getInitials(String name) {
    if (name.isEmpty) return '';
    
    final nameParts = name.split(' ');
    String initials = '';
    
    for (var part in nameParts) {
      if (part.isNotEmpty) {
        initials += part[0].toUpperCase();
        if (initials.length >= 2) break;
      }
    }
    
    return initials;
  }
  
  // Seviye ilerleme oranını hesapla
  double _calculateLevelProgress(String level, int points) {
    final currentLevelMinPoints = _getCurrentLevelMinPoints(level);
    final nextLevelMinPoints = _getNextLevelPoints(level);
    
    if (nextLevelMinPoints <= currentLevelMinPoints) return 1.0;
    
    return (points - currentLevelMinPoints) / (nextLevelMinPoints - currentLevelMinPoints);
  }
  
  // Sonraki seviyeye kalan puanları hesapla
  String _getRemainingPointsText(String level, int points) {
    final nextLevelPoints = _getNextLevelPoints(level);
    final remaining = nextLevelPoints - points;
    
    if (remaining <= 0) {
      return 'En yüksek seviyedesiniz';
    }
    
    return 'Bir sonraki seviyeye $remaining puan kaldı';
  }
  
  // Mevcut seviyenin minimum puanı
  int _getCurrentLevelMinPoints(String level) {
    switch (level) {
      case 'levelBeginner': return 0;
      case 'levelApprentice': return 100;
      case 'levelMaster': return 500;
      case 'levelSage': return 1000;
      case 'levelGrateful': return 2500;
      case 'levelSaint': return 5000;
      case 'levelKnower': return 10000;
      default: return 0;
    }
  }
  
  // Sonraki seviyenin minimum puanı
  int _getNextLevelPoints(String level) {
    switch (level) {
      case 'levelBeginner': return 100;
      case 'levelApprentice': return 500;
      case 'levelMaster': return 1000;
      case 'levelSage': return 2500;
      case 'levelGrateful': return 5000;
      case 'levelSaint': return 10000;
      case 'levelKnower': return 100000; // Son seviye
      default: return 100;
    }
  }
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\profile\components\stats_card.dart  
====================  
  
﻿// stats_card.dart - v1.0.0
// İstatistikler kartı bileşeni
// Klasör: lib/features/profile/components/stats_card.dart

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:zikirmo_new/core/models/user_model.dart';

class StatsCard extends StatelessWidget {
  final UserModel user;
  
  const StatsCard({
    Key? key,
    required this.user,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'statistics'.tr(),
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 16),
            
            // İstatistik kutucukları - 2x2 grid
            GridView.count(
              crossAxisCount: 2,
              crossAxisSpacing: 16,
              mainAxisSpacing: 16,
              shrinkWrap: true,
              physics: const NeverScrollableScrollPhysics(),
              children: [
                _buildStatCard(
                  context, 
                  Icons.touch_app,
                  'totalZikirs'.tr(args: [user.totalZikirCount.toString()]),
                  'Genel istatistik'
                ),
                _buildStatCard(
                  context, 
                  Icons.whatshot,
                  'currentStreak'.tr(args: [user.currentStreak.toString()]),
                  'En uzun: ${user.longestStreak ?? 0}'
                ),
                _buildStatCard(
                  context, 
                  Icons.people,
                  'Arkadaşlar',
                  user.friends.length.toString()
                ),
                _buildStatCard(
                  context, 
                  Icons.emoji_events,
                  'Rozetler',
                  user.badges.length.toString()
                ),
              ],
            ),
            
            // Haftalık çizelge
            const SizedBox(height: 16),
            Center(
              child: TextButton.icon(
                onPressed: () {
                  // TODO: Ayrıntılı istatistik sayfasına git
                },
                icon: const Icon(Icons.bar_chart),
                label: Text('Detaylı İstatistikler'.tr()),
              ),
            ),
          ],
        ),
      ),
    );
  }
  
  // İstatistik kutusu widget'ı
  Widget _buildStatCard(BuildContext context, IconData icon, String title, String value) {
    return Container(
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.primary.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
      ),
      padding: const EdgeInsets.all(16),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          Icon(icon, size: 32, color: Theme.of(context).colorScheme.primary),
          const SizedBox(height: 8),
          Text(
            title,
            style: Theme.of(context).textTheme.titleSmall,
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 4),
          Text(
            value,
            style: Theme.of(context).textTheme.bodySmall,
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\rewards\reward_store_screen.dart  
====================  
  
import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../../core/models/user_model.dart';
import '../../core/services/firestore_service.dart';
import '../../core/services/auth_service.dart';
import '../../core/providers/providers.dart';

final rewardsProvider = FutureProvider<List<Map<String, dynamic>>>((ref) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  final snapshot = await firestoreService.firestore.collection('rewards').get();
  return snapshot.docs.map((doc) => {...doc.data(), 'id': doc.id}).toList();
});

class RewardStoreScreen extends ConsumerWidget {
  const RewardStoreScreen({super.key});

  Future<void> _purchaseReward(BuildContext context, WidgetRef ref, String userId, Map<String, dynamic> reward) async {
    final user = ref.read(userProvider).value;
    if (user == null || user.points < reward['cost']) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Yetersiz puan')),
      );
      return;
    }

    final firestoreService = ref.read(firestoreServiceProvider);
    await firestoreService.updateUser(userId, {
      'points': user.points - reward['cost'], // FieldValue yerine manual hesaplama
    });

    // Satın alınan ürünü kullanıcıya ekle
    final purchasedItems = List<String>.from(user.toJson()[reward['type']] ?? []);
    purchasedItems.add(reward['id']);
    
    await firestoreService.updateUser(userId, {
      reward['type']: purchasedItems,
    });

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('${reward['name']} satın alındı!')),
    );
    
    // Provider'ı yenile
    ref.refresh(userProvider);
  }

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final userAsync = ref.watch(userProvider);
    final rewardsAsync = ref.watch(rewardsProvider);

    return Scaffold(
      appBar: AppBar(
        title: Text('Ödül Mağazası'),
      ),
      body: userAsync.when(
        data: (user) {
          if (user == null) {
            return Center(child: Text('Lütfen giriş yapın'));
          }
          return Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'Puanlarınız: ${user.points}',
                  style: Theme.of(context).textTheme.titleLarge,
                ),
                const SizedBox(height: 20),
                Expanded(
                  child: rewardsAsync.when(
                    data: (rewards) => rewards.isEmpty
                        ? Center(child: Text('Henüz ödül yok'))
                        : ListView.builder(
                            itemCount: rewards.length,
                            itemBuilder: (context, index) {
                              final reward = rewards[index];
                              final isOwned = user.toJson()[reward['type']]?.contains(reward['id']) ?? false;
                              return Card(
                                elevation: 4,
                                margin: const EdgeInsets.only(bottom: 12),
                                child: ListTile(
                                  leading: Icon(_getRewardIcon(reward['type'])),
                                  title: Text(reward['name']),
                                  subtitle: Text('Maliyet: ${reward['cost']} puan'),
                                  trailing: isOwned
                                      ? Chip(
                                          label: Text('Sahip'),
                                          backgroundColor: Colors.green[100],
                                        )
                                      : ElevatedButton(
                                          onPressed: user.points >= reward['cost']
                                              ? () => _purchaseReward(context, ref, user.id, reward)
                                              : null,
                                          child: Text('Satın Al'),
                                        ),
                                ),
                              );
                            },
                          ),
                    loading: () => const Center(child: CircularProgressIndicator()),
                    error: (error, stack) => Center(child: Text('Ödüller yüklenirken hata oluştu')),
                  ),
                ),
              ],
            ),
          );
        },
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stack) => Center(child: Text('Kullanıcı bilgileri yüklenirken hata oluştu')),
      ),
    );
  }

  IconData _getRewardIcon(String type) {
    switch (type) {
      case 'themes':
        return Icons.color_lens;
      case 'ringtones':
        return Icons.music_note;
      case 'avatars':
        return Icons.person;
      default:
        return Icons.card_giftcard;
    }
  }
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\settings\settings_screen.dart  
====================  
  
﻿// settings_screen.dart - v1.0.0
// Uygulama ayarları ekranı
// Klasör: lib/features/settings/settings_screen.dart

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/providers/providers.dart';
import 'package:zikirmo_new/core/services/auth_service.dart';
import 'package:zikirmo_new/core/services/notification_service.dart';
import 'package:zikirmo_new/routes.dart';

// Tema modu provider'ı
final themeModeProvider = StateProvider<ThemeMode>((ref) {
  return ThemeMode.system;
});

class SettingsScreen extends ConsumerStatefulWidget {
  const SettingsScreen({Key? key}) : super(key: key);

  @override
  ConsumerState<SettingsScreen> createState() => _SettingsScreenState();
}

class _SettingsScreenState extends ConsumerState<SettingsScreen> {
  // Zikir sayacı ayarları
  bool _useVibration = true;
  bool _useSound = true;
  double _counterSize = 80.0;
  
  // Bildirim ayarları
  bool _enableDailyReminder = false;
  TimeOfDay _reminderTime = const TimeOfDay(hour: 8, minute: 0);
  
  // Uygulama içi satın alımları gizleme
  bool _hideInAppPurchases = false;

  @override
  void initState() {
    super.initState();
    // TODO: Ayarları SharedPreferences'dan yükle
  }

  // Hatırlatıcı saatini seçme
  Future<void> _selectReminderTime() async {
    final TimeOfDay? picked = await showTimePicker(
      context: context,
      initialTime: _reminderTime,
    );
    if (picked != null && mounted) {
      setState(() {
        _reminderTime = picked;
      });
      
      // Bildirim hizmetini güncelle
      if (_enableDailyReminder) {
        final notificationService = ref.read(notificationServiceProvider);
        await notificationService.scheduleDailyNotification(
          'zikirReminder'.tr(),
          'dailyZikirReminder'.tr(),
          _reminderTime.hour,
          _reminderTime.minute,
        );
      }
    }
  }

  // Dil değiştirme
  void _changeLanguage(String languageCode) async {
    await context.setLocale(Locale(languageCode));
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    // Mevcut tema modu
    final themeMode = ref.watch(themeModeProvider);
    
    // Mevcut dil
    final currentLocale = context.locale.languageCode;
    
    return Scaffold(
      appBar: AppBar(
        title: Text('settings'.tr()),
      ),
      body: ListView(
        children: [
          // Hesap ayarları
          _buildSectionHeader(context, 'Hesap'.tr()),
          
          ListTile(
            leading: const Icon(Icons.person),
            title: Text('Profil'.tr()),
            trailing: const Icon(Icons.chevron_right),
            onTap: () {
              Navigator.pushNamed(context, AppRoutes.profile);
            },
          ),
          
          if (_isUserLoggedIn())
            ListTile(
              leading: const Icon(Icons.logout),
              title: Text('signOut'.tr()),
              onTap: () async {
                await _showSignOutDialog();
              },
            ),
          
          // Uygulama ayarları
          _buildSectionHeader(context, 'Uygulama'.tr()),
          
          // Dil seçimi
          ListTile(
            leading: const Icon(Icons.language),
            title: Text('language'.tr()),
            subtitle: Text(_getLanguageName(currentLocale)),
            trailing: DropdownButton<String>(
              underline: const SizedBox(),
              value: currentLocale,
              onChanged: (value) {
                if (value != null) {
                  _changeLanguage(value);
                }
              },
              items: const [
                DropdownMenuItem(
                  value: 'tr',
                  child: Text('Türkçe'),
                ),
                DropdownMenuItem(
                  value: 'en',
                  child: Text('English'),
                ),
              ],
            ),
          ),
          
          // Tema seçimi
          ListTile(
            leading: const Icon(Icons.brightness_6),
            title: Text('Tema'.tr()),
            subtitle: Text(_getThemeModeName(themeMode)),
            trailing: DropdownButton<ThemeMode>(
              underline: const SizedBox(),
              value: themeMode,
              onChanged: (value) {
                if (value != null) {
                  ref.read(themeModeProvider.notifier).state = value;
                }
              },
              items: [
                DropdownMenuItem(
                  value: ThemeMode.system,
                  child: Text('Sistem'.tr()),
                ),
                DropdownMenuItem(
                  value: ThemeMode.light,
                  child: Text('Aydınlık'.tr()),
                ),
                DropdownMenuItem(
                 value: ThemeMode.dark,
                 child: Text('Karanlık'.tr()),
               ),
             ],
           ),
         ),
         
         // Zikir sayacı ayarları
         _buildSectionHeader(context, 'Zikir Sayacı'.tr()),
         
         // Titreşim
         SwitchListTile(
           secondary: const Icon(Icons.vibration),
           title: Text('Titreşim'.tr()),
           subtitle: Text('Zikir sayarken titreşim'.tr()),
           value: _useVibration,
           onChanged: (value) {
             setState(() {
               _useVibration = value;
             });
             // TODO: Ayarı kaydet
           },
         ),
         
         // Ses
         SwitchListTile(
           secondary: const Icon(Icons.volume_up),
           title: Text('Ses'.tr()),
           subtitle: Text('Zikir sayarken ses'.tr()),
           value: _useSound,
           onChanged: (value) {
             setState(() {
               _useSound = value;
             });
             // TODO: Ayarı kaydet
           },
         ),
         
         // Sayaç boyutu
         ListTile(
           leading: const Icon(Icons.touch_app),
           title: Text('Sayaç Boyutu'.tr()),
           subtitle: Slider(
             value: _counterSize,
             min: 50.0,
             max: 120.0,
             divisions: 7,
             label: _counterSize.round().toString(),
             onChanged: (value) {
               setState(() {
                 _counterSize = value;
               });
               // TODO: Ayarı kaydet
             },
           ),
         ),
         
         // Bildirim ayarları
         _buildSectionHeader(context, 'Bildirimler'.tr()),
         
         // Günlük hatırlatıcı
         SwitchListTile(
           secondary: const Icon(Icons.notifications),
           title: Text('Günlük Hatırlatıcı'.tr()),
           subtitle: Text('Her gün zikirlerinizi hatırlatır'.tr()),
           value: _enableDailyReminder,
           onChanged: (value) async {
             setState(() {
               _enableDailyReminder = value;
             });
             
             final notificationService = ref.read(notificationServiceProvider);
             if (value) {
               await notificationService.scheduleDailyNotification(
                 'zikirReminder'.tr(),
                 'dailyZikirReminder'.tr(),
                 _reminderTime.hour,
                 _reminderTime.minute,
               );
             } else {
               await notificationService.cancelAllNotifications();
             }
             
             // TODO: Ayarı kaydet
           },
         ),
         
         // Hatırlatıcı saati
         if (_enableDailyReminder)
           ListTile(
             leading: const Icon(Icons.access_time),
             title: Text('Hatırlatıcı Saati'.tr()),
             subtitle: Text(
               '${_reminderTime.hour.toString().padLeft(2, '0')}:${_reminderTime.minute.toString().padLeft(2, '0')}',
             ),
             onTap: _selectReminderTime,
           ),
         
         // Gizlilik ayarları
         _buildSectionHeader(context, 'Gizlilik'.tr()),
         
         // Satın alımları gizleme
         SwitchListTile(
           secondary: const Icon(Icons.visibility_off),
           title: Text('Satın Alımları Gizle'.tr()),
           subtitle: Text('Premium içerikleri gizle'.tr()),
           value: _hideInAppPurchases,
           onChanged: (value) {
             setState(() {
               _hideInAppPurchases = value;
             });
             // TODO: Ayarı kaydet
           },
         ),
         
         // Hakkında
         _buildSectionHeader(context, 'Hakkında'.tr()),
         
         ListTile(
           leading: const Icon(Icons.info),
           title: Text('Uygulama Hakkında'.tr()),
           trailing: const Icon(Icons.chevron_right),
           onTap: () {
             _showAboutDialog();
           },
         ),
         
         ListTile(
           leading: const Icon(Icons.description),
           title: Text('Gizlilik Politikası'.tr()),
           trailing: const Icon(Icons.chevron_right),
           onTap: () {
             // TODO: Gizlilik politikası sayfasına git
           },
         ),
         
         ListTile(
           leading: const Icon(Icons.gavel),
           title: Text('Kullanım Şartları'.tr()),
           trailing: const Icon(Icons.chevron_right),
           onTap: () {
             // TODO: Kullanım şartları sayfasına git
           },
         ),
         
         // Versiyon bilgisi
         const Padding(
           padding: EdgeInsets.all(16.0),
           child: Center(
             child: Text(
               'Versiyon 1.0.0',
               style: TextStyle(color: Colors.grey),
             ),
           ),
         ),
       ],
     ),
   );
 }
 
 // Bölüm başlığı
 Widget _buildSectionHeader(BuildContext context, String title) {
   return Padding(
     padding: const EdgeInsets.fromLTRB(16, 24, 16, 8),
     child: Column(
       crossAxisAlignment: CrossAxisAlignment.start,
       children: [
         Text(
           title,
           style: Theme.of(context).textTheme.titleMedium?.copyWith(
                 color: Theme.of(context).primaryColor,
                 fontWeight: FontWeight.bold,
               ),
         ),
         const SizedBox(height: 8),
         const Divider(),
       ],
     ),
   );
 }
 
 // Kullanıcının oturum açıp açmadığını kontrol et
 bool _isUserLoggedIn() {
   final authService = ref.read(authServiceProvider);
   return authService.currentUser != null;
 }
 
 // Çıkış onay dialog'u
 Future<void> _showSignOutDialog() async {
   return showDialog<void>(
     context: context,
     barrierDismissible: false,
     builder: (BuildContext context) {
       return AlertDialog(
         title: Text('Çıkış'.tr()),
         content: SingleChildScrollView(
           child: ListBody(
             children: <Widget>[
               Text('Çıkış yapmak istediğinize emin misiniz?'.tr()),
             ],
           ),
         ),
         actions: <Widget>[
           TextButton(
             child: Text('cancel'.tr()),
             onPressed: () {
               Navigator.of(context).pop();
             },
           ),
           TextButton(
             child: Text('signOut'.tr()),
             onPressed: () async {
               Navigator.of(context).pop();
               
               final authService = ref.read(authServiceProvider);
               await authService.signOut();
               
               if (context.mounted) {
                 Navigator.pushReplacementNamed(context, AppRoutes.login);
               }
             },
           ),
         ],
       );
     },
   );
 }
 
 // Hakkında dialog'u
 void _showAboutDialog() {
   showAboutDialog(
     context: context,
     applicationName: 'Zikir Matik',
     applicationVersion: '1.0.0',
     applicationIcon: const Icon(
       Icons.apps,
       size: 48,
       color: Colors.teal,
     ),
     applicationLegalese: '© 2025 Zikir Matik. Tüm hakları saklıdır.',
     children: [
       const SizedBox(height: 16),
       Text('Zikir Matik, zikir ibadetlerinizi kolayca takip etmenizi sağlayan bir uygulamadır.'.tr()),
     ],
   );
 }
 
 // Dil adını al
 String _getLanguageName(String languageCode) {
   switch (languageCode) {
     case 'tr':
       return 'Türkçe';
     case 'en':
       return 'English';
     default:
       return languageCode;
   }
 }
 
 // Tema modu adını al
 String _getThemeModeName(ThemeMode mode) {
   switch (mode) {
     case ThemeMode.system:
       return 'Sistem'.tr();
     case ThemeMode.light:
       return 'Aydınlık'.tr();
     case ThemeMode.dark:
       return 'Karanlık'.tr();
   }
 }
}
  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\splash\splash_screen.dart  
====================  
  
import 'package:flutter_riverpod/flutter_riverpod.dart';
// Dosya: lib/features/splash/splash_screen.dart
// Uygulama açılış ekranı

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:zikirmo_new/routes.dart';

class SplashScreen extends ConsumerStatefulWidget {
  const SplashScreen({Key? key}) : super(key: key);

  @override
  ConsumerState<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends ConsumerState<SplashScreen> {
  @override
  void initState() {
    super.initState();
    
    // 3 saniye bekledikten sonra onboarding veya login ekranına geçiş
    Future.delayed(const Duration(seconds: 3), () {
      // TODO: İlk giriş kontrolü yapılıp, ona göre onboarding veya home ekranına yönlendirme yapılacak
      Navigator.pushReplacementNamed(context, AppRoutes.onboarding);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Logo veya ikon
            const Icon(
              Icons.volunteer_activism,
              size: 100,
              color: Colors.teal,
            ),
            const SizedBox(height: 24),
            // Uygulama adı
            Text(
              'homeTitle'.tr(),
              style: Theme.of(context).textTheme.headlineMedium,
            ),
            const SizedBox(height: 16),
            // Hoş geldin mesajı
            Text(
              'welcomeMessage'.tr(),
              style: Theme.of(context).textTheme.bodyLarge,
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }
}
// splash_screen.dart - v1.0.0
  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\zikir\categories_screen.dart  
====================  
  
﻿// lib/features/zikir/categories_screen.dart

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/providers/providers.dart';
import 'package:zikirmo_new/core/models/category_model.dart';
import 'package:zikirmo_new/core/services/firestore_service.dart';

// Kategoriler provider'ı
final categoriesProvider = FutureProvider<List<CategoryModel>>((ref) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return await firestoreService.getCategories();
});

class CategoriesScreen extends ConsumerWidget {
  const CategoriesScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final categoriesAsync = ref.watch(categoriesProvider);
    
    return Scaffold(
      appBar: AppBar(
        title: Text('categories'.tr()),
      ),
      body: categoriesAsync.when(
        data: (categories) {
          if (categories.isEmpty) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(
                    Icons.category_outlined,
                    size: 64,
                    color: Colors.grey[400],
                  ),
                  const SizedBox(height: 16),
                  Text(
                    'noCategories'.tr(),
                    style: const TextStyle(fontSize: 16, color: Colors.grey),
                  ),
                ],
              ),
            );
          }
          
          return GridView.builder(
            padding: const EdgeInsets.all(16),
            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: 2,
              crossAxisSpacing: 16,
              mainAxisSpacing: 16,
              childAspectRatio: 1.0,
            ),
            itemCount: categories.length,
            itemBuilder: (context, index) {
              final category = categories[index];
              return _buildCategoryCard(context, category);
            },
          );
        },
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stack) => Center(
          child: Text('errorLoadingCategories'.tr()),
        ),
      ),
    );
  }
  
  Widget _buildCategoryCard(BuildContext context, CategoryModel category) {
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: InkWell(
        onTap: () {
          // Kategori detay sayfasına git
          Navigator.pushNamed(
            context,
            '/category_detail',
            arguments: category.id,
          );
        },
        borderRadius: BorderRadius.circular(16),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Kategori ikonu
              Icon(
                _getCategoryIcon(category.iconName),
                size: 48,
                color: Theme.of(context).primaryColor,
              ),
              const SizedBox(height: 16),
              
              // Kategori adı
              Text(
                category.getLocalizedName(context.locale.languageCode),
                style: Theme.of(context).textTheme.titleMedium,
                textAlign: TextAlign.center,
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
              ),
            ],
          ),
        ),
      ),
    );
  }
  
  IconData _getCategoryIcon(String iconName) {
    switch (iconName) {
      case 'star':
        return Icons.star;
      case 'favorite':
        return Icons.favorite;
      case 'prayer':
        return Icons.emoji_emotions;
      case 'daily':
        return Icons.access_time;
      case 'special':
        return Icons.celebration;
      case 'weekly':
        return Icons.calendar_today;
      case 'personal':
        return Icons.person;
      default:
        return Icons.category;
    }
  }
}
  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\zikir\category_detail_screen.dart  
====================  
  
﻿// lib/features/zikir/category_detail_screen.dart

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:zikirmo_new/core/models/category_model.dart';
import 'package:zikirmo_new/core/models/zikir_model.dart';
import 'package:zikirmo_new/core/services/firestore_service.dart';
import 'package:zikirmo_new/features/zikir/components/zikir_card.dart';

// Kategori detayı provider'ı
final categoryProvider = FutureProvider.family<CategoryModel?, String>((ref, categoryId) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return await firestoreService.getCategory(categoryId);
});

// Kategoriye ait zikirler provider'ı
final categoryZikirsProvider = FutureProvider.family<List<ZikirModel>, String>((ref, categoryId) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return await firestoreService.getZikirsByCategory(categoryId);
});

class CategoryDetailScreen extends ConsumerWidget {
  final String categoryId;
  
  const CategoryDetailScreen({
    Key? key,
    required this.categoryId,
  }) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final categoryAsync = ref.watch(categoryProvider(categoryId));
    final zikirsAsync = ref.watch(categoryZikirsProvider(categoryId));
    
    return Scaffold(
      appBar: AppBar(
        title: categoryAsync.when(
          data: (category) => Text(
            category?.getLocalizedName(context.locale.languageCode) ?? 'category'.tr(),
          ),
          loading: () => Text('loading'.tr()),
          error: (_, __) => Text('category'.tr()),
        ),
      ),
      body: zikirsAsync.when(
        data: (zikirs) {
          if (zikirs.isEmpty) {
            return Center(
              child: Column(
	        mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(
                    Icons.sentiment_dissatisfied,
                    size: 64,
                    color: Colors.grey[400],
                  ),
                  const SizedBox(height: 16),
                  Text(
                    'noCategoryZikirs'.tr(),
                    style: const TextStyle(fontSize: 16, color: Colors.grey),
                  ),
                ],
              ),
            );
          }
          
          return ListView.builder(
            padding: const EdgeInsets.all(16),
            itemCount: zikirs.length,
            itemBuilder: (context, index) {
              final zikir = zikirs[index];
              return ZikirCard(
                zikir: zikir,
                onTap: () {
                  // Zikir detay sayfasına git
                  Navigator.pushNamed(
                    context,
                    '/zikir_detail',
                    arguments: zikir.id,
                  );
                },
                onCounterTap: () {
                  // Zikir sayaç ekranına git
                  Navigator.pushNamed(
                    context,
                    '/zikir_counter',
                    arguments: zikir.id,
                  );
                },
              );
            },
          );
        },
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stack) => Center(
          child: Text('errorLoadingZikirs'.tr()),
        ),
      ),
    );
  }
}
  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\zikir\custom_zikir_screen.dart  
====================  
  
// lib/features/zikir/custom_zikir_screen.dart

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:cloud_firestore/cloud_firestore.dart'; // FieldValue için gerekli
import '../../core/providers/providers.dart'; // Sadece bu import
import '../../core/models/category_model.dart';
import '../../routes.dart';

// Kategorileri getiren provider
final categoriesForCustomZikirProvider = FutureProvider<List<CategoryModel>>((ref) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return await firestoreService.getCategories();
});

class CustomZikirScreen extends ConsumerStatefulWidget {
  const CustomZikirScreen({Key? key}) : super(key: key);

  @override
  ConsumerState<CustomZikirScreen> createState() => _CustomZikirScreenState();
}

class _CustomZikirScreenState extends ConsumerState<CustomZikirScreen> {
  final _formKey = GlobalKey<FormState>();
  
  // Form controller'ları
  final _titleController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _arabicTextController = TextEditingController();
  final _transliterationController = TextEditingController();
  final _purposeController = TextEditingController();
  final _sourceController = TextEditingController();
  
  // Form değişkenleri
  String? _selectedCategoryId;
  int _targetCount = 33;
  bool _isPublic = false;
  bool _isLoading = false;
  
  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    _arabicTextController.dispose();
    _transliterationController.dispose();
    _purposeController.dispose();
    _sourceController.dispose();
    super.dispose();
  }
  
  // Özel zikir oluşturma
  Future<void> _createCustomZikir() async {
    if (!_formKey.currentState!.validate()) return;
    
    setState(() {
      _isLoading = true;
    });
    
    try {
      final authService = ref.read(authServiceProvider);
      final firestoreService = ref.read(firestoreServiceProvider);
      final userId = authService.currentUser?.uid;
      
      if (userId == null) {
        throw Exception('pleaseLogin'.tr());
      }
      
      // Premium kontrolü
      final isPremium = await authService.checkIfUserIsPremium();
      if (!isPremium) {
        if (mounted) {
          _showPremiumDialog();
          return;
        }
      }
      
      // Zikir verilerini hazırla
      final zikirData = {
        'title': {
          'tr': _titleController.text.trim(),
          'en': _titleController.text.trim(),
        },
        'description': {
          'tr': _descriptionController.text.trim(),
          'en': _descriptionController.text.trim(),
        },
        'purpose': {
          'tr': _purposeController.text.trim(),
          'en': _purposeController.text.trim(),
        },
        'categoryId': _selectedCategoryId ?? 'personal',
        'targetCount': _targetCount,
        'arabicText': _arabicTextController.text.trim().isNotEmpty 
            ? _arabicTextController.text.trim() 
            : null,
        'transliteration': _transliterationController.text.trim().isNotEmpty 
            ? _transliterationController.text.trim() 
            : null,
        'source': _sourceController.text.trim().isNotEmpty 
            ? _sourceController.text.trim() 
            : null,
        'isPersonal': !_isPublic,
        'createdBy': userId,
        'createdAt': FieldValue.serverTimestamp(),
        'popularity': 0,
      };
      
      // Firestore'a kaydet
      final docRef = await firestoreService.firestore
          .collection('zikirler')
          .add(zikirData);
      
      // Kullanıcının puanını artır
      await firestoreService.updateUser(userId, {
        'points': FieldValue.increment(5), // Özel zikir oluşturma bonusu
      });
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('customZikirCreated'.tr())),
        );
        
        // Oluşturulan zikir sayaç ekranına git
        Navigator.pushReplacementNamed(
          context,
          AppRoutes.zikirCounter,
          arguments: docRef.id,
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('errorCreatingZikir'.tr(args: [e.toString()]))),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }
  
  // Premium dialog'u
  void _showPremiumDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('premiumFeature'.tr()),
        content: Text('customZikirPremiumMessage'.tr()),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('cancel'.tr()),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              Navigator.pushNamed(context, AppRoutes.premium);
            },
            child: Text('becomePremium'.tr()),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final categoriesAsync = ref.watch(categoriesForCustomZikirProvider);
    
    return Scaffold(
      appBar: AppBar(
        title: Text('createCustomZikir'.tr()),
        actions: [
          IconButton(
            icon: const Icon(Icons.help_outline),
            onPressed: () {
              _showHelpDialog();
            },
          ),
        ],
      ),
      body: Form(
        key: _formKey,
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Açıklama kartı
              Card(
                color: Theme.of(context).primaryColor.withOpacity(0.1),
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Row(
                    children: [
                      Icon(
                        Icons.lightbulb_outline,
                        color: Theme.of(context).primaryColor,
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: Text(
                          'customZikirDescription'.tr(),
                          style: TextStyle(
                            color: Theme.of(context).primaryColor,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 24),
              
              // Temel bilgiler
              _buildSectionTitle('basicInfo'.tr()),
              const SizedBox(height: 16),
              
              // Zikir başlığı (zorunlu)
              TextFormField(
                controller: _titleController,
                decoration: InputDecoration(
                  labelText: '${'zikirTitle'.tr()} *',
                  hintText: 'zikirTitleHint'.tr(),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                validator: (value) {
                  if (value == null || value.trim().isEmpty) {
                    return 'zikirTitleRequired'.tr();
                  }
                  if (value.trim().length < 3) {
                    return 'zikirTitleTooShort'.tr();
                  }
                  return null;
                },
                maxLength: 100,
              ),
              const SizedBox(height: 16),
              
              // Açıklama
              TextFormField(
                controller: _descriptionController,
                decoration: InputDecoration(
                  labelText: 'description'.tr(),
                  hintText: 'descriptionHint'.tr(),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                maxLines: 3,
                maxLength: 500,
              ),
              const SizedBox(height: 16),
              
              // Kategori seçimi
              categoriesAsync.when(
                data: (categories) => DropdownButtonFormField<String>(
                  value: _selectedCategoryId,
                  decoration: InputDecoration(
                    labelText: 'category'.tr(),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  items: [
                    DropdownMenuItem(
                      value: null,
                      child: Text('selectCategory'.tr()),
                    ),
                    ...categories.map((category) => DropdownMenuItem(
                      value: category.id,
                      child: Text(category.getLocalizedName(context.locale.languageCode)),
                    )),
                  ],
                  onChanged: (value) {
                    setState(() {
                      _selectedCategoryId = value;
                    });
                  },
                ),
                loading: () => Container(
                  height: 60,
                  decoration: BoxDecoration(
                    border: Border.all(color: Colors.grey),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: const Center(child: CircularProgressIndicator()),
                ),
                error: (_, __) => const SizedBox(),
              ),
              const SizedBox(height: 16),
              
              // Hedef sayısı
              Row(
                children: [
                  Expanded(
                    child: Text(
                      'targetCountLabel'.tr(args: [_targetCount.toString()]),
                      style: Theme.of(context).textTheme.titleMedium,
                    ),
                  ),
                  SizedBox(
                    width: 200,
                    child: Slider(
                      value: _targetCount.toDouble(),
                      min: 1,
                      max: 1000,
                      divisions: 100,
                      label: _targetCount.toString(),
                      onChanged: (value) {
                        setState(() {
                          _targetCount = value.round();
                        });
                      },
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 24),
              
              // Arapça metin ve okunuş
              _buildSectionTitle('arabicTextSection'.tr()),
              const SizedBox(height: 16),
              
              // Arapça yazılış
              TextFormField(
                controller: _arabicTextController,
                decoration: InputDecoration(
                  labelText: 'arabicText'.tr(),
                  hintText: 'arabicTextHint'.tr(),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                textDirection: TextDirectionDirectionality.of(context) == TextDirection.rtl,
                style: const TextStyle(fontSize: 18),
                maxLines: 2,
              ),
              const SizedBox(height: 16),
              
              // Okunuş
              TextFormField(
                controller: _transliterationController,
                decoration: InputDecoration(
                  labelText: 'transliteration'.tr(),
                  hintText: 'transliterationHint'.tr(),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                maxLines: 2,
              ),
              const SizedBox(height: 24),
              
              // Ek bilgiler
              _buildSectionTitle('additionalInfo'.tr()),
              const SizedBox(height: 16),
              
              // Amaç/Fayda
              TextFormField(
                controller: _purposeController,
                decoration: InputDecoration(
                  labelText: 'purpose'.tr(),
                  hintText: 'purposeHint'.tr(),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                maxLines: 3,
                maxLength: 300,
              ),
              const SizedBox(height: 16),
              
              // Kaynak
              TextFormField(
                controller: _sourceController,
                decoration: InputDecoration(
                  labelText: 'source'.tr(),
                  hintText: 'sourceHint'.tr(),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
              ),
              const SizedBox(height: 24),
              
              // Paylaşım ayarları
              _buildSectionTitle('shareSettings'.tr()),
              const SizedBox(height: 16),
              
              SwitchListTile(
                title: Text('shareWithEveryone'.tr()),
                subtitle: Text(
                  _isPublic 
                      ? 'shareWithEveryoneDesc'.tr()
                      : 'privateZikirDesc'.tr()
                ),
                value: _isPublic,
                onChanged: (value) {
                  setState(() {
                    _isPublic = value;
                  });
                },
              ),
              const SizedBox(height: 32),
              
              // Oluştur butonu
              SizedBox(
                width: double.infinity,
                height: 50,
                child: _isLoading
                    ? const Center(child: CircularProgressIndicator())
                    : ElevatedButton.icon(
                        onPressed: _createCustomZikir,
                        icon: const Icon(Icons.add_circle),
                        label: Text('createZikir'.tr()),
                        style: ElevatedButton.styleFrom(
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                      ),
              ),
              const SizedBox(height: 16),
            ],
          ),
        ),
      ),
    );
  }
  
  // Bölüm başlığı
  Widget _buildSectionTitle(String title) {
    return Text(
      title,
      style: Theme.of(context).textTheme.titleMedium?.copyWith(
        fontWeight: FontWeight.bold,
        color: Theme.of(context).primaryColor,
      ),
    );
  }
  
  // Yardım dialog'u
  void _showHelpDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('customZikirGuide'.tr()),
        content: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              _buildHelpItem('📝', 'helpGuideTitle'.tr(), 'helpGuideZikirName'.tr()),
              _buildHelpItem('📖', 'helpGuideDescription'.tr(), 'helpGuideZikirMeaning'.tr()),
              _buildHelpItem('🏷️', 'helpGuideCategory'.tr(), 'helpGuideSelectCategory'.tr()),
              _buildHelpItem('🎯', 'helpGuideTarget'.tr(), 'helpGuideDailyTarget'.tr()),
              _buildHelpItem('🔤', 'helpGuideArabic'.tr(), 'helpGuideArabicText'.tr()),
              _buildHelpItem('💎', 'helpGuidePurpose'.tr(), 'helpGuideSpiritualBenefits'.tr()),
              _buildHelpItem('📚', 'helpGuideSource'.tr(), 'helpGuideReference'.tr()),
              _buildHelpItem('🌐', 'helpGuideSharing'.tr(), 'helpGuideShareOption'.tr()),
            ],
          ),
        ),
        actions: [
          ElevatedButton(
            onPressed: () => Navigator.pop(context),
            child: Text('understood'.tr()),
          ),
        ],
      ),
    );
  }
  
  // Yardım öğesi
  Widget _buildHelpItem(String emoji, String title, String description) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 16),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(emoji, style: const TextStyle(fontSize: 20)),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: const TextStyle(fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 4),
                Text(
                  description,
                  style: TextStyle(color: Colors.grey[600]),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\zikir\suggested_zikirs_screen.dart  
====================  
  
﻿// lib/features/zikir/suggested_zikirs_screen.dart

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/providers/providers.dart';
import 'package:zikirmo_new/core/models/zikir_model.dart';
import 'package:zikirmo_new/core/services/firestore_service.dart';
import 'package:zikirmo_new/features/zikir/components/zikir_card.dart';

// Önerilen zikirler provider'ı
final suggestedZikirsProvider = FutureProvider<List<ZikirModel>>((ref) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return await firestoreService.getSuggestedZikirs();
});

class SuggestedZikirsScreen extends ConsumerWidget {
  const SuggestedZikirsScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final suggestedZikirsAsync = ref.watch(suggestedZikirsProvider);
    
    return Scaffold(
      appBar: AppBar(
        title: Text('suggestedZikirs'.tr()),
      ),
      body: suggestedZikirsAsync.when(
        data: (zikirs) {
          if (zikirs.isEmpty) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(
                    Icons.search_off,
                    size: 64,
                    color: Colors.grey[400],
                  ),
                  const SizedBox(height: 16),
                  Text(
                    'noSuggestedZikirs'.tr(),
                    style: const TextStyle(fontSize: 16, color: Colors.grey),
                  ),
                ],
              ),
            );
          }
          
          return ListView.builder(
            padding: const EdgeInsets.all(16),
            itemCount: zikirs.length,
            itemBuilder: (context, index) {
              final zikir = zikirs[index];
              return ZikirCard(
                zikir: zikir,
                onTap: () {
                  // Zikir detay sayfasına git
                  Navigator.pushNamed(
                    context,
                    '/zikir_detail',
                    arguments: zikir.id,
                  );
                },
                onCounterTap: () {
                  // Zikir sayaç ekranına git
                  Navigator.pushNamed(
                    context,
                    '/zikir_counter',
                    arguments: zikir.id,
                  );
                },
              );
            },
          );
        },
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stack) => Center(
          child: Text('errorLoadingZikirs'.tr()),
        ),
      ),
    );
  }
}
  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\zikir\zikir_counter_screen.dart  
====================  
  
﻿// lib/features/zikir/zikir_counter_screen.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/providers/providers.dart';
import 'package:zikirmo_new/core/models/zikir_model.dart';
import 'package:zikirmo_new/core/services/haptic_service.dart';
import 'package:zikirmo_new/core/services/auth_service.dart';
import 'package:zikirmo_new/core/constants/app_constants.dart';
import 'package:zikirmo_new/features/zikir/components/zikir_counter_widget.dart';
import 'package:zikirmo_new/features/zikir/providers/zikir_counter_provider.dart';
import 'package:zikirmo_new/core/providers/providers.dart';

class ZikirCounterScreen extends ConsumerStatefulWidget {
  final String? zikirId;

  const ZikirCounterScreen({Key? key, this.zikirId}) : super(key: key);

  @override
  ConsumerState<ZikirCounterScreen> createState() => _ZikirCounterScreenState();
}

class _ZikirCounterScreenState extends ConsumerState<ZikirCounterScreen> with SingleTickerProviderStateMixin {
  // Sayaç pozisyonu
  Offset _counterPosition = Offset(0, 0);
  
  // Sayaç boyutu (0.0-1.0 arası normalized değer)
  double _counterSize = 0.5;
  
  // Ayarlar
  bool _useVibration = true;
  bool _useSound = true;
  bool _showOnlyCounter = false; // Premium özelliği
  bool _wholeScreenTappable = false; // Premium özelliği
  
  // Animasyon
  late AnimationController _animationController;
  late Animation<double> _animation;
  
  // Zikir detayları
  ZikirModel? _zikir;
  bool _isLoading = true;
  bool _isPremium = false;
  
  @override
  void initState() {
    super.initState();
    
    // Animasyon kontrolcüsü
    _animationController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 150),
    );
    
    _animation = Tween<double>(begin: 1.0, end: 1.1).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: Curves.easeInOut,
      ),
    );
    
    _animationController.addStatusListener((status) {
      if (status == AnimationStatus.completed) {
        _animationController.reverse();
      }
    });
    
    // Kullanıcı ayarlarını yükle
    _loadUserSettings();
    
    // Zikir bilgilerini yükle
    if (widget.zikirId != null) {
      _loadZikirDetails();
    } else {
      setState(() {
        _isLoading = false;
      });
    }
  }
  
  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }
  
  // Kullanıcı ayarlarını yükleme
  Future<void> _loadUserSettings() async {
    // Ekran merkezini hesapla (ilk defa kullanılıyorsa)
    _calculateScreenCenter();
    
    // Premium özelliklerini kontrol et
    final authService = ref.read(authServiceProvider);
    final currentUser = authService.currentUser;
    
    // İlgili servisten kullanıcının premium olup olmadığını kontrol et
    if (currentUser != null) {
      final isPremium = await authService.checkIfUserIsPremium();
      
      if (mounted) {
        setState(() {
          _isPremium = isPremium;
        });
      }
    }
  }
  
  // Zikir detaylarını yükleme
  Future<void> _loadZikirDetails() async {
    if (widget.zikirId == null) return;
    
    try {
      // Zikir bilgilerini getir - AsyncValue kullanarak
      final zikirAsync = ref.read(zikirProviderFamily(widget.zikirId!));
      await zikirAsync.when(
        data: (zikir) async {
          if (mounted) {
            setState(() {
              _zikir = zikir;
              _isLoading = false;
            });
          }
        },
        loading: () {},
        error: (error, stack) {
          if (mounted) {
            setState(() {
              _isLoading = false;
            });
            
            // Hata mesajı göster
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text('zikirLoadError'.tr())),
            );
          }
        },
      );
    } catch (e) {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
        
        // Hata mesajı göster
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('zikirLoadError'.tr())),
        );
      }
    }
  }
  
  // Ekran merkezini hesaplama
  void _calculateScreenCenter() {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      final size = MediaQuery.of(context).size;
      setState(() {
        _counterPosition = Offset(size.width / 2 - 90, size.height / 2 - 90);
      });
    });
  }
  
  // Sayacı artırma
  void _incrementCounter() async {
    // Sayaç görüntüsü ve animasyonu
    _animationController.forward();
    
    // Titreşim
    if (_useVibration) {
      final hapticService = ref.read(hapticServiceProvider);
      await hapticService.lightImpact();
    }
    
    // Ses
    if (_useSound) {
      // TODO: Sound service implementation
    }
    
    // Sayaç değerini artır (provider ile)
    ref.read(zikirCounterProvider.notifier).increment();
    
    // Tamamlanma kontrolü
    final counter = ref.read(zikirCounterProvider);
    final targetCount = _zikir?.targetCount ?? 33;
    
    if (counter == targetCount) {
      // Hedef tamamlandı
      _showCompletionDialog();
      
      // Titreşim
      if (_useVibration) {
        final hapticService = ref.read(hapticServiceProvider);
        await hapticService.heavyImpact();
      }
    }
  }
  
  // Tamamlama diyaloğu
  void _showCompletionDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('congratulations'.tr()),
        content: Text('zikirCompleted'.tr()),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('continue'.tr()),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              _resetCounter();
            },
            child: Text('reset'.tr()),
          ),
        ],
      ),
    );
  }
  
  // Sayacı sıfırlama
  void _resetCounter() {
    ref.read(zikirCounterProvider.notifier).reset();
  }
  
  // Ayarlar modalını gösterme
  void _showSettingsModal() {
    showModalBottomSheet(
      context: context,
      builder: (context) => _buildSettingsModal(),
    );
  }
  
  // Ayarlar modalı içeriği
  Widget _buildSettingsModal() {
    return StatefulBuilder(
      builder: (context, setState) {
        return Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'counterSettings'.tr(),
                style: Theme.of(context).textTheme.titleLarge,
              ),
              const SizedBox(height: 16),
              
              // Titreşim ayarı
              SwitchListTile(
                title: Text('vibration'.tr()),
                value: _useVibration,
                onChanged: (value) {
                  setState(() {
                    _useVibration = value;
                  });
                  
                  // Ayarları kaydet
                  _saveSettings();
                },
              ),
              
              // Ses ayarı
              SwitchListTile(
                title: Text('sound'.tr()),
                value: _useSound,
                onChanged: (value) {
                  setState(() {
                    _useSound = value;
                  });
                  
                  // Ayarları kaydet
                  _saveSettings();
                },
              ),
              
              const Divider(),
              
              // Premium özellikleri
              if (_isPremium) ...[
                Text(
                  'premiumFeatures'.tr(),
                  style: Theme.of(context).textTheme.titleMedium,
                ),
                const SizedBox(height: 8),
                
                // Sadece sayaç gösterme (Minimal mod)
                SwitchListTile(
                  title: Text('showOnlyCounter'.tr()),
                  value: _showOnlyCounter,
                  onChanged: (value) {
                    setState(() {
                      _showOnlyCounter = value;
                    });
                    
                    // Ana ekranı güncelle
                    this.setState(() {});
                    
                    // Ayarları kaydet
                    _saveSettings();
                  },
                ),
                
                // Ekran geneli tıklama
                SwitchListTile(
                  title: Text('wholeScreenTappable'.tr()),
                  value: _wholeScreenTappable,
                  onChanged: (value) {
                    setState(() {
                      _wholeScreenTappable = value;
                    });
                    
                    // Ana ekranı güncelle
                    this.setState(() {});
                    
                    // Ayarları kaydet
                    _saveSettings();
                  },
                ),
                
                // Sayaç boyutu ayarı
                ListTile(
                  title: Text('counterSize'.tr()),
                  subtitle: Slider(
                    value: _counterSize,
                    min: 0.2,
                    max: 1.0,
                    divisions: 8,
                    label: (_counterSize * 100).round().toString() + '%',
                    onChanged: (value) {
                      setState(() {
                        _counterSize = value;
                      });
                      
                      // Ana ekranı güncelle
                      this.setState(() {});
                      
                      // Ayarları kaydet
                      _saveSettings();
                    },
                  ),
                ),
              ] else ...[
                // Premium olmayan kullanıcılar için premium özellik reklamı
                ListTile(
                  title: Text('premiumFeatures'.tr()),
                  subtitle: Text('premiumFeaturesDescription'.tr()),
                  trailing: ElevatedButton(
                    onPressed: () {
                      // Premium sayfasına git
                      Navigator.pushNamed(context, '/premium');
                    },
                    child: Text('upgradeToPremium'.tr()),
                  ),
                ),
              ],
              
              const SizedBox(height: 16),
            ],
          ),
        );
      },
    );
  }
  
  // Ayarları kaydetme
  void _saveSettings() async {
    // TODO: SharedPreferences implementation
  }
  
  @override
  Widget build(BuildContext context) {
    final counter = ref.watch(zikirCounterProvider);
    final targetCount = _zikir?.targetCount ?? 33;
    
    // İlerleme oranı
    final progress = counter / targetCount;
    
    return Scaffold(
      appBar: _showOnlyCounter ? null : AppBar(
        title: Text(_zikir?.getLocalizedTitle(context.locale.languageCode) ?? 'zikirCounter'.tr()),
        actions: [
          IconButton(
            icon: Icon(_useVibration ? Icons.vibration : Icons.vibration_outlined),
            onPressed: () {
              setState(() {
                _useVibration = !_useVibration;
              });
              _saveSettings();
            },
            tooltip: _useVibration ? 'disableVibration'.tr() : 'enableVibration'.tr(),
          ),
          IconButton(
            icon: Icon(_useSound ? Icons.volume_up : Icons.volume_off),
            onPressed: () {
              setState(() {
                _useSound = !_useSound;
              });
              _saveSettings();
            },
            tooltip: _useSound ? 'disableSound'.tr() : 'enableSound'.tr(),
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : SafeArea(
              child: Stack(
                children: [
                  // Tüm ekran tıklama alanı (premium özelliği)
                  if (_wholeScreenTappable)
                    GestureDetector(
                      onTap: _incrementCounter,
                      child: Container(
                        width: double.infinity,
                        height: double.infinity,
                        color: Colors.transparent,
                      ),
                    ),
                  
                  // Zikir bilgileri üst panel
                  if (!_showOnlyCounter)
                    Positioned(
                      top: 16,
                      left: 16,
                      right: 16,
                      child: Column(
                        children: [
                          // Zikir adı ve hedef
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Expanded(
                                child: Text(
                                  _zikir?.getLocalizedTitle(context.locale.languageCode) ?? 'zikirCounter'.tr(),
                                  style: Theme.of(context).textTheme.headlineSmall,
                                  overflow: TextOverflow.ellipsis,
                                ),
                              ),
                              Text(
                                'target'.tr(args: [targetCount.toString()]),
                                style: Theme.of(context).textTheme.titleMedium,
                              ),
                            ],
                          ),
                          const SizedBox(height: 8),
                          
                          // İlerleme çubuğu
                          LinearProgressIndicator(
                            value: progress.clamp(0.0, 1.0),
                            backgroundColor: Colors.grey[200],
                            valueColor: AlwaysStoppedAnimation<Color>(
                              progress >= 1.0 ? Colors.green : Theme.of(context).primaryColor,
                            ),
                            minHeight: 10,
                            borderRadius: BorderRadius.circular(5),
                          ),
                          
                          // Sayı göstergesi
                          Padding(
                            padding: const EdgeInsets.only(top: 8.0),
                            child: Text(
                              '$counter / $targetCount',
                              style: Theme.of(context).textTheme.titleMedium,
                            ),
                          ),
                        ],
                      ),
                    ),
                  
                  // Zikir sayacı (sürüklenebilir)
                  Positioned(
                    left: _counterPosition.dx,
                    top: _counterPosition.dy,
                    child: GestureDetector(
                      onPanUpdate: (details) {
                        // Premium kontrolü
                        if (!_isPremium) return;
                        
                        setState(() {
                          // Yeni pozisyon
                          _counterPosition = Offset(
                            (_counterPosition.dx + details.delta.dx).clamp(0, MediaQuery.of(context).size.width - 180 * _counterSize),
                            (_counterPosition.dy + details.delta.dy).clamp(0, MediaQuery.of(context).size.height - 180 * _counterSize),
                          );
                        });
                        
                        // Pozisyonu kaydet
                        _saveSettings();
                      },
                      child: ZikirCounterWidget(
                        count: counter,
                        targetCount: targetCount,
                        animation: _animation,
                        onTap: _incrementCounter,
                        size: AppConstants.minCounterSize + (AppConstants.maxCounterSize - AppConstants.minCounterSize) * _counterSize,
                        isCompleted: counter >= targetCount,
                      ),
                    ),
                  ),
                ],
              ),
            ),
      floatingActionButton: _showOnlyCounter
          ? null
          : Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                // Ayarlar butonu
                FloatingActionButton(
                  heroTag: 'settings',
                  onPressed: _showSettingsModal,
                  mini: true,
                  child: const Icon(Icons.settings),
                ),
                const SizedBox(height: 8),
                
                // Sıfırlama butonu
                FloatingActionButton(
                  heroTag: 'reset',
                  onPressed: _resetCounter,
                  mini: true,
                  backgroundColor: Colors.red,
                  child: const Icon(Icons.refresh),
                ),
              ],
            ),
    );
  }
}
  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\zikir\zikir_detail_screen.dart  
====================  
  
import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/models/zikir_model.dart';
import '../../core/services/firestore_service.dart';
import '../../core/providers/providers.dart';

class ZikirDetailScreen extends ConsumerWidget {
  final String zikirId;
  
  const ZikirDetailScreen({
    Key? key,
    required this.zikirId,
  }) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final zikirAsync = ref.watch(zikirProviderFamily(zikirId));
    final isPremiumAsync = ref.watch(isPremiumProvider);
    
    return Scaffold(
      appBar: AppBar(
        title: zikirAsync.when(
          data: (zikir) => Text(
            zikir?.getLocalizedTitle(context.locale.languageCode) ?? 'Zikir Detayı',
          ),
          loading: () => Text('Yükleniyor...'),
          error: (_, __) => Text('Zikir Detayı'),
        ),
        actions: [
          // Favori butonu (premium)
          IconButton(
            icon: const Icon(Icons.favorite_border),
            onPressed: () {
              isPremiumAsync.when(
                data: (isPremium) {
                  if (isPremium) {
                    // TODO: Favoriye ekleme/çıkarma işlevi
                  } else {
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(content: Text('Premium özellik gerekli')),
                    );
                  }
                },
                loading: () => {},
                error: (_, __) => {},
              );
            },
          ),
          
          // Paylaşım butonu
          IconButton(
            icon: const Icon(Icons.share),
            onPressed: () {
              // TODO: Paylaşım işlevi
            },
          ),
        ],
      ),
      body: zikirAsync.when(
        data: (zikir) {
          if (zikir == null) {
            return Center(
              child: Text('Zikir bulunamadı'),
            );
          }
          
          return SingleChildScrollView(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Başlık
                Text(
                  zikir.getLocalizedTitle(context.locale.languageCode),
                  style: Theme.of(context).textTheme.headlineMedium,
                ),
                const SizedBox(height: 16),
                
                // Hedef sayısı
                _buildInfoCard(
                  context,
                  'Hedef Sayısı',
                  zikir.targetCount.toString(),
                  Icons.format_list_numbered,
                ),
                const SizedBox(height: 16),
                
                // Arapça metin (varsa)
                if (zikir.arabicText != null && zikir.arabicText!.isNotEmpty) ...[
                  _buildSection(context, 'Arapça Yazılış'),
                  Container(
                    width: double.infinity,
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.grey[100],
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Text(
                      zikir.arabicText!,
                      style: const TextStyle(
                        fontSize: 24,
                        fontFamily: 'Amiri', // Arapça yazı tipi
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),
                  const SizedBox(height: 24),
                ],
                
                // Okunuşu (varsa)
                if (zikir.transliteration != null && zikir.transliteration!.isNotEmpty) ...[
                  _buildSection(context, 'Okunuşu'),
                  Container(
                    width: double.infinity,
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.grey[100],
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Text(
                      zikir.transliteration!,
                      style: const TextStyle(
                        fontSize: 18,
                        fontStyle: FontStyle.italic,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),
                  const SizedBox(height: 24),
                ],
                
                // Anlamı
                _buildSection(context, 'Anlamı'),
                Text(
                  zikir.getLocalizedDescription(context.locale.languageCode),
                  style: const TextStyle(fontSize: 16),
                ),
                const SizedBox(height: 24),
                
                // Amacı (varsa)
                if (zikir.purpose.isNotEmpty) ...[
                  _buildSection(context, 'Amacı'),
                  Text(
                    zikir.getLocalizedPurpose(context.locale.languageCode),
                    style: const TextStyle(fontSize: 16),
                  ),
                  const SizedBox(height: 24),
                ],
                
                // Kaynak (varsa)
                if (zikir.source != null && zikir.source!.isNotEmpty) ...[
                  _buildSection(context, 'Kaynak'),
                  Text(
                    zikir.source!,
                    style: const TextStyle(
                      fontSize: 16,
                      fontStyle: FontStyle.italic,
                    ),
                  ),
                  const SizedBox(height: 24),
                ],
                
                // Ses dosyaları bölümü (varsa)
                if (zikir.audioUrlArabic != null || zikir.audioUrlTranslated != null) ...[
                  _buildSection(context, 'Sesli Dinleme'),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: [
                      if (zikir.audioUrlArabic != null)
                        _buildAudioButton(
                          context,
                          'Arapça Dinle',
                          () {
                            // TODO: Arapça ses oynatma
                          },
                        ),
                      
                      if (zikir.audioUrlTranslated != null)
                        _buildAudioButton(
                          context,
                          'Türkçe Dinle',
                          () {
                            // TODO: Yerel dilde ses oynatma
                          },
                        ),
                    ],
                  ),
                  const SizedBox(height: 24),
                ],
                
                // İstatistikler bölümü (Premium)
                isPremiumAsync.when(
                  data: (isPremium) {
                    if (isPremium) {
                      return Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          _buildSection(context, 'İstatistikler'),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                            children: [
                              _buildStatCard(
                                context,
                                'Popüler',
                                zikir.popularity > 100 ? 'Evet' : 'Hayır',
                              ),
                              _buildStatCard(
                                context,
                                'Sayımınız',
                                '0', // TODO: Kullanıcının bu zikiri çekme sayısı
                              ),
                            ],
                          ),
                          const SizedBox(height: 32),
                        ],
                      );
                    }
                    return const SizedBox();
                  },
                  loading: () => const SizedBox(),
                  error: (_, __) => const SizedBox(),
                ),
              ],
            ),
          );
        },
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stack) => Center(
          child: Text('Zikir yüklenirken hata oluştu'),
        ),
      ),
      bottomNavigationBar: BottomAppBar(
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          child: ElevatedButton.icon(
            onPressed: () {
              // Zikir sayaç ekranına git
              Navigator.pushNamed(
                context,
                '/zikir_counter',
                arguments: zikirId,
              );
            },
            icon: const Icon(Icons.touch_app),
            label: Text('Zikre Başla'),
            style: ElevatedButton.styleFrom(
              padding: const EdgeInsets.symmetric(vertical: 12),
            ),
          ),
        ),
      ),
    );
  }
  
  // Bilgi kartı
  Widget _buildInfoCard(BuildContext context, String title, String value, IconData icon) {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Row(
          children: [
            Icon(
              icon,
              color: Theme.of(context).primaryColor,
              size: 32,
            ),
            const SizedBox(width: 16),
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: const TextStyle(
                    fontSize: 14,
                    color: Colors.grey,
                  ),
                ),
                Text(
                  value,
                  style: const TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
  
  // Bölüm başlığı
  Widget _buildSection(BuildContext context, String title) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
            color: Theme.of(context).primaryColor,
          ),
        ),
        const SizedBox(height: 8),
      ],
    );
  }
  
  // Ses oynatma butonu
  Widget _buildAudioButton(BuildContext context, String label, VoidCallback onPressed) {
    return ElevatedButton.icon(
      onPressed: onPressed,
      icon: const Icon(Icons.volume_up),
      label: Text(label),
      style: ElevatedButton.styleFrom(
        backgroundColor: Colors.grey[200],
        foregroundColor: Colors.black87,
      ),
    );
  }
  
  // İstatistik kartı
  Widget _buildStatCard(BuildContext context, String label, String value) {
    return Container(
      width: MediaQuery.of(context).size.width * 0.4,
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.grey[100],
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        children: [
          Text(
            label,
            style: const TextStyle(
              fontSize: 14,
              color: Colors.grey,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            value,
            style: const TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
        ],
      ),
    );
  }
}  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\zikir\components\zikir_card.dart  
====================  
  
// lib/features/zikir/components/zikir_card.dart

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import '../../../core/models/zikir_model.dart';

class ZikirCard extends StatelessWidget {
  final ZikirModel zikir;
  final VoidCallback onTap;
  final VoidCallback onCounterTap;
  final bool showFavorite;
  
  const ZikirCard({
    Key? key,
    required this.zikir,
    required this.onTap,
    required this.onCounterTap,
    this.showFavorite = true,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    // RTL desteği için düzeltme
    final isRtl = Directionality.of(context) == TextDirectionDirectionality.of(context) == TextDirection.rtl;
    
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      margin: const EdgeInsets.only(bottom: 12),
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Başlık satırı
              Row(
                children: [
                  Expanded(
                    child: Text(
                      zikir.getLocalizedTitle(context.locale.languageCode),
                      style: const TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 18,
                      ),
                    ),
                  ),
                  
                  // Hedef sayısı
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
                    decoration: BoxDecoration(
                      color: Theme.of(context).primaryColor.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(16),
                    ),
                    child: Text(
                      zikir.targetCount.toString(),
                      style: TextStyle(
                        color: Theme.of(context).primaryColor,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  
                  // Favori ikonu (premium özelliği)
                  if (showFavorite)
                    IconButton(
                      icon: const Icon(Icons.favorite_border),
                      onPressed: () {
                        // Favori ekleme/çıkarma (Premium)
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(content: Text('premiumRequired'.tr())),
                        );
                      },
                      iconSize: 20,
                      splashRadius: 20,
                      visualDensity: VisualDensity.compact,
                    ),
                ],
              ),
              
              // Açıklama (varsa)
              if (zikir.description.isNotEmpty) ...[
                const SizedBox(height: 8),
                Text(
                  zikir.getLocalizedDescription(context.locale.languageCode),
                  style: TextStyle(color: Colors.grey[600]),
                  maxLines: 2,
                  overflow: TextOverflow.ellipsis,
                ),
              ],
              
              // Arapça yazılış (varsa)
              if (zikir.arabicText != null && zikir.arabicText!.isNotEmpty) ...[
                const SizedBox(height: 12),
                Container(
                  width: double.infinity,
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.grey[100],
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Text(
                    zikir.arabicText!,
                    style: const TextStyle(
                      fontSize: 18,
                      fontFamily: 'Amiri', // Arapça yazı tipi
                    ),
                    textAlign: TextAlign.center,
                    textDirection: TextDirectionDirectionality.of(context) == TextDirection.rtl,
                  ),
                ),
              ],
              
              // Alt butonlar
              const SizedBox(height: 12),
              Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  // Dinleme butonu (ses varsa)
                  if (zikir.audioUrlArabic != null || zikir.audioUrlTranslated != null)
                    TextButton.icon(
                      onPressed: () {
                        // TODO: Ses oynatma işlevi
                      },
                      icon: const Icon(Icons.volume_up),
                      label: Text('listen'.tr()),
                    ),
                  
                  // Zikir çekme butonu
                  ElevatedButton.icon(
                    onPressed: onCounterTap,
                    icon: const Icon(Icons.touch_app),
                    label: Text('startZikir'.tr()),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Theme.of(context).primaryColor,
                      foregroundColor: Colors.white,
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}
  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\zikir\components\zikir_counter_widget.dart  
====================  
  
import 'package:flutter/material.dart';

class ZikirCounterWidget extends StatelessWidget {
  final int count;
  final int targetCount;
  final Animation<double> animation;
  final VoidCallback onTap;
  final double size;
  final bool isCompleted;

  const ZikirCounterWidget({
    Key? key,
    required this.count,
    required this.targetCount,
    required this.animation,
    required this.onTap,
    this.size = 120.0,
    this.isCompleted = false,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final progress = count / targetCount;
    
    return AnimatedBuilder(
      animation: animation,
      builder: (context, child) {
        return Transform.scale(
          scale: animation.value,
          child: GestureDetector(
            onTap: onTap,
            child: Container(
              width: size,
              height: size,
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                color: isCompleted ? Colors.green : Theme.of(context).primaryColor,
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.2),
                    blurRadius: 8,
                    offset: const Offset(0, 4),
                  ),
                ],
              ),
              child: Stack(
                alignment: Alignment.center,
                children: [
                  // İlerleme çemberi
                  SizedBox(
                    width: size - 10,
                    height: size - 10,
                    child: CircularProgressIndicator(
                      value: progress.clamp(0.0, 1.0),
                      backgroundColor: Colors.white.withOpacity(0.3),
                      valueColor: const AlwaysStoppedAnimation<Color>(Colors.white),
                      strokeWidth: 4,
                    ),
                  ),
                  
                  // Sayı
                  Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        count.toString(),
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: size * 0.25,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      if (targetCount > 0)
                        Text(
                          '/ $targetCount',
                          style: TextStyle(
                            color: Colors.white.withOpacity(0.8),
                            fontSize: size * 0.12,
                          ),
                        ),
                    ],
                  ),
                  
                  // Tamamlanma ikonu
                  if (isCompleted)
                    Positioned(
                      top: 10,
                      right: 10,
                      child: Icon(
                        Icons.check_circle,
                        color: Colors.white,
                        size: size * 0.2,
                      ),
                    ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }
}
                  
 
====================  
Dosya: C:\src\zikirmo_new\lib\features\zikir\providers\zikir_counter_provider.dart  
====================  
  
// lib/features/zikir/providers/zikir_counter_provider.dart

import 'package:flutter_riverpod/flutter_riverpod.dart';

// Sayaç değerini tutan StateNotifier
class ZikirCounterNotifier extends StateNotifier<int> {
  ZikirCounterNotifier() : super(0);
  
  void increment() => state++;
  
  void reset() => state = 0;
  
  void setValue(int value) => state = value;
}

// Sayaç değeri provider'ı
final zikirCounterProvider = StateNotifierProvider<ZikirCounterNotifier, int>((ref) {
  return ZikirCounterNotifier();
});  
 
